===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\index.js =====  
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals(); 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\reportWebVitals.js =====  
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\setupTests.js =====  
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\automation.js =====  
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

const getHeaders = () => ({
  'Content-Type': 'application/json',
  'Accept': 'application/json',
});

// ==================== AUTOMATION CONFIGURATION ====================

export const getAutomationConfig = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/config`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch config: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching automation config:', error);
    throw error;
  }
};

export const updateAutomationConfig = async (updates) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/config`, {
      method: "PUT",
      headers: getHeaders(),
      body: JSON.stringify(updates),
    });
    if (!response.ok) throw new Error(`Failed to update config: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error updating automation config:', error);
    throw error;
  }
};

export const getAutomationStatus = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/status`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch status: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching automation status:', error);
    throw error;
  }
};

// ==================== HOUSEKEEPING MANAGEMENT ====================

export const getPendingHousekeepingTasks = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/housekeeping/pending`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching pending tasks:', error);
    throw error;
  }
};

export const getUrgentHousekeepingTasks = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/housekeeping/urgent`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch urgent tasks: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching urgent tasks:', error);
    throw error;
  }
};

export const getTasksByDate = async (date) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/housekeeping/date/${date}`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching tasks by date:', error);
    throw error;
  }
};

export const completeHousekeepingTask = async (id, completedBy) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/automation/housekeeping/${id}/complete?completedBy=${encodeURIComponent(completedBy)}`,
      {
        method: "PATCH",
        headers: getHeaders(),
      }
    );
    if (!response.ok) throw new Error(`Failed to complete task: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error completing task:', error);
    throw error;
  }
};

// ==================== DYNAMIC PRICING ====================

export const getAllPricingRules = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/rules`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch pricing rules: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching pricing rules:', error);
    throw error;
  }
};

export const getActivePricingRules = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/rules/active`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch active rules: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching active pricing rules:', error);
    throw error;
  }
};

export const createPricingRule = async (ruleData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/rules`, {
      method: "POST",
      headers: getHeaders(),
      body: JSON.stringify(ruleData),
    });
    if (!response.ok) throw new Error(`Failed to create rule: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error creating pricing rule:', error);
    throw error;
  }
};

export const updatePricingRule = async (id, ruleData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/rules/${id}`, {
      method: "PUT",
      headers: getHeaders(),
      body: JSON.stringify(ruleData),
    });
    if (!response.ok) throw new Error(`Failed to update rule: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error updating pricing rule:', error);
    throw error;
  }
};

export const deletePricingRule = async (id) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/rules/${id}`, {
      method: "DELETE",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to delete rule: ${response.status}`);
    return { success: true };
  } catch (error) {
    console.error('Error deleting pricing rule:', error);
    throw error;
  }
};

export const triggerPriceUpdate = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/pricing/update-all`, {
      method: "POST",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to trigger price update: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error triggering price update:', error);
    throw error;
  }
};

// ==================== FRAUD DETECTION ====================

export const getPendingFraudAlerts = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/fraud/alerts/pending`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch alerts: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching pending fraud alerts:', error);
    throw error;
  }
};

export const getHighRiskAlerts = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/fraud/alerts/high-risk`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch high-risk alerts: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching high-risk alerts:', error);
    throw error;
  }
};

export const getAllFraudAlerts = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/fraud/alerts`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch all alerts: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching all fraud alerts:', error);
    throw error;
  }
};

export const reviewFraudAlert = async (id, status, reviewedBy, notes = null) => {
  try {
    const params = new URLSearchParams({
      status,
      reviewedBy,
      ...(notes && { notes })
    });
    
    const response = await fetch(
      `${API_BASE_URL}/api/automation/fraud/alerts/${id}/review?${params}`,
      {
        method: "PATCH",
        headers: getHeaders(),
      }
    );
    if (!response.ok) throw new Error(`Failed to review alert: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error reviewing fraud alert:', error);
    throw error;
  }
};

// ==================== OTA CHANNEL MANAGEMENT ====================

export const syncAvailabilityToOTA = async (startDate, endDate) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/automation/ota/sync-availability?startDate=${startDate}&endDate=${endDate}`,
      {
        method: "POST",
        headers: getHeaders(),
      }
    );
    if (!response.ok) throw new Error(`Failed to sync availability: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error syncing availability:', error);
    throw error;
  }
};

export const syncRatesToOTA = async (roomTypeRates) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/ota/sync-rates`, {
      method: "POST",
      headers: getHeaders(),
      body: JSON.stringify(roomTypeRates),
    });
    if (!response.ok) throw new Error(`Failed to sync rates: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error syncing rates:', error);
    throw error;
  }
};

// ==================== MANUAL TRIGGERS ====================

export const triggerNoShowProcessing = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/jobs/process-no-shows`, {
      method: "POST",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to trigger no-show processing: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error triggering no-show processing:', error);
    throw error;
  }
};

export const triggerNightlyAudit = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/automation/jobs/nightly-audit`, {
      method: "POST",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to trigger nightly audit: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error triggering nightly audit:', error);
    throw error;
  }
};

export default {
  getAutomationConfig,
  updateAutomationConfig,
  getAutomationStatus,
  getPendingHousekeepingTasks,
  getUrgentHousekeepingTasks,
  getTasksByDate,
  completeHousekeepingTask,
  getAllPricingRules,
  getActivePricingRules,
  createPricingRule,
  updatePricingRule,
  deletePricingRule,
  triggerPriceUpdate,
  getPendingFraudAlerts,
  getHighRiskAlerts,
  getAllFraudAlerts,
  reviewFraudAlert,
  syncAvailabilityToOTA,
  syncRatesToOTA,
  triggerNoShowProcessing,
  triggerNightlyAudit,
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\guest.js =====  
const API_BASE_URL = 'http://localhost:8080/api/v1/guests';

export const guestAPI = {
  /**
   * Fetch all guests
   */
  getAllGuests: async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/getAll`);
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to fetch guests:', errorText);
        throw new Error(`Failed to fetch guests: ${response.status}`);
      }
      return response.json();
    } catch (error) {
      console.error('getAllGuests error:', error);
      throw error;
    }
  },

  /**
   * Fetch a single guest by ID
   */
  getGuestById: async (guestId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/${guestId}`);
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to fetch guest details:', errorText);
        throw new Error(`Failed to fetch guest details: ${response.status}`);
      }
      return response.json();
    } catch (error) {
      console.error('getGuestById error:', error);
      throw error;
    }
  },

  /**
   * Create a new guest
   */
  createGuest: async (guestData, identityImage) => {
    try {
      const formData = new FormData();
      formData.append('guest', new Blob([JSON.stringify(guestData)], { type: 'application/json' }));
      
      if (identityImage) {
        formData.append('identityImage', identityImage);
      }

      const response = await fetch(`${API_BASE_URL}/create`, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to create guest:', errorText);
        throw new Error(`Failed to create guest: ${response.status} - ${errorText}`);
      }
      return response.json();
    } catch (error) {
      console.error('createGuest error:', error);
      throw error;
    }
  },

  /**
   * Update guest information
   */
  updateGuest: async (guestId, guestData) => {
    try {
      console.log(`Sending PATCH request to: ${API_BASE_URL}/${guestId}`);
      console.log('Request payload:', JSON.stringify(guestData, null, 2));
      
      const response = await fetch(`${API_BASE_URL}/${guestId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(guestData)
      });

      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);

      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}`;
        try {
          const errorText = await response.text();
          console.error('Backend error response:', errorText);
          
          try {
            const errorJson = JSON.parse(errorText);
            errorMessage = errorJson.message || errorJson.error || errorText;
          } catch (e) {
            errorMessage = errorText || errorMessage;
          }
        } catch (e) {
          console.error('Could not read error response:', e);
        }
        
        throw new Error(`Failed to update guest: ${errorMessage}`);
      }
      
      const result = await response.json();
      console.log('Update successful:', result);
      return result;
    } catch (error) {
      console.error('updateGuest error:', error);
      throw error;
    }
  },

  /**
   * Get guest QR code image
   */
  getGuestQrImage: async (guestId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/${guestId}/qr`);
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to fetch QR code:', errorText);
        throw new Error(`Failed to fetch QR code: ${response.status}`);
      }
      return response.blob();
    } catch (error) {
      console.error('getGuestQrImage error:', error);
      throw error;
    }
  },

  /**
   * Register guest from mobile
   */
  registerGuest: async (registrationData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(registrationData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to register guest:', errorText);
        throw new Error(`Failed to register guest: ${response.status} - ${errorText}`);
      }
      return response.json();
    } catch (error) {
      console.error('registerGuest error:', error);
      throw error;
    }
  }
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\metrics.js =====  
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

const getHeaders = () => ({
  'Content-Type': 'application/json',
  'Accept': 'application/json',
});

export const getDailyMetrics = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/metrics/automation/daily?date=${date}`,
      {
        method: "GET",
        headers: getHeaders(),
      }
    );
    if (!response.ok) throw new Error(`Failed to fetch metrics: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching daily metrics:', error);
    throw error;
  }
};

export const getTodayMetrics = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/metrics/automation/today`, {
      method: "GET",
      headers: getHeaders(),
    });
    if (!response.ok) throw new Error(`Failed to fetch today metrics: ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching today metrics:', error);
    throw error;
  }
};

export default {
  getDailyMetrics,
  getTodayMetrics,
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\reception.js =====  
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

// Basic Auth Header
const BASIC_AUTH = "Basic " + btoa("admin:admin");

const getHeaders = () => ({
  "Content-Type": "application/json",
  "Authorization": BASIC_AUTH,
});

const getFormDataHeaders = () => ({
  "Authorization": BASIC_AUTH,
  // Don't set Content-Type for FormData, let browser set it
});

// Get guest details by ID - Updated to match backend URL pattern
export const getGuestDetails = async (guestId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('Fetched guest details:', data);
    return data;
  } catch (error) {
    console.error('Error fetching guest details:', error);
    throw error;
  }
};

export const receptionAPI = {
  // Register a new guest - Updated to match backend endpoint
  registerGuest: async (guestData, identityImage = null) => {
    try {
      // Backend expects multipart/form-data with 'guest' JSON and optional 'identityImage'
      const formData = new FormData();
      
      // Append guest data as JSON string with key 'guest'
      formData.append('guest', JSON.stringify(guestData));
      
      // Append the image file if provided
      if (identityImage) {
        formData.append('identityImage', identityImage);
      }
      
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/create`, {
        method: "POST",
        // Don't send any headers for public endpoints - let browser handle FormData headers
        body: formData,
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to register guest: ${errorText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Error registering guest:", error);
      throw error;
    }
  },

  // Mobile registration endpoint - for guests to set their passwords
  registerGuestFromMobile: async (registrationData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/register`, {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(registrationData),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to register from mobile: ${errorText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Error registering guest from mobile:", error);
      throw error;
    }
  },

  // Get all guests - Updated to match backend URL
  getAllGuests: async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/getAll`, {
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch guests: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Error fetching all guests:", error);
      throw error;
    }
  },

  // Get guest by ID - Updated to match backend URL
  getGuestById: async (guestId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch guest details: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Error fetching guest by ID:", error);
      throw error;
    }
  },

  // Get guest QR code as image - New endpoint for direct image access
  getGuestQrImage: async (guestId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}/qr`, {
        method: "GET",
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch QR image: ${response.status}`);
      }
      
      // Return the blob for direct use in img src
      return await response.blob();
    } catch (error) {
      console.error("Error fetching guest QR image:", error);
      throw error;
    }
  },

  // Get guest QR code as data URL (from the response DTO)
  getGuestQrDataUrl: (guestResponseDTO) => {
    // The backend already provides qrCodeBase64 as a data URL in the response
    return guestResponseDTO.qrCodeBase64;
  },

  // Update guest - Note: This endpoint doesn't exist in your backend, you might need to add it
  updateGuest: async (guestId, guestData) => {
    try {
      // Since update endpoint doesn't exist in backend, this will likely fail
      // You might want to implement PUT /api/v1/guests/{id} in your backend
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: "PUT",
        headers: getHeaders(),
        body: JSON.stringify(guestData),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update guest: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error("Error updating guest:", error);
      throw error;
    }
  },

  // Delete guest - Note: This endpoint doesn't exist in your backend, you might need to add it
  deleteGuest: async (guestId) => {
    try {
      // Since delete endpoint doesn't exist in backend, this will likely fail
      // You might want to implement DELETE /api/v1/guests/{id} in your backend
      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: "DELETE",
        headers: getHeaders(),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to delete guest: ${response.status}`);
      }
    } catch (error) {
      console.error("Error deleting guest:", error);
      throw error;
    }
  },

  // Get all reservations - USED BY RECEPTIONISTDASHBOARD
  getAllReservations: async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/reservations/reservations`, {
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': BASIC_AUTH,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Fetched reservations:', data);
      return data;
    } catch (error) {
      console.error('Error fetching reservations:', error);
      throw error;
    }
  },
};

export default receptionAPI; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\reservation.js =====  
// src/api/reservation.js
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

const getHeaders = () => ({
  "Content-Type": "application/json",
  "Accept": "application/json",
});

// ==================== RESERVATION CRUD ====================

export const createReservation = async (reservationData) => {
  try {
    console.log('Creating reservation:', reservationData);
    
    const response = await fetch(`${API_BASE_URL}/api/reservations/create`, {
      method: "POST",
      headers: getHeaders(),
      body: JSON.stringify(reservationData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Backend error response:', errorText);
      throw new Error(`Failed to create reservation: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Created reservation:', data);
    return data;
  } catch (error) {
    console.error('Error creating reservation:', error);
    throw error;
  }
};

export const updateReservation = async (reservationId, reservationData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/reservations/update/${reservationId}`, {
      method: "PUT",
      headers: getHeaders(),
      body: JSON.stringify(reservationData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to update reservation: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error updating reservation:', error);
    throw error;
  }
};

export const deleteReservation = async (reservationId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/reservations/delete/${reservationId}`, {
      method: "DELETE",
      headers: getHeaders()
    });

    if (!response.ok) {
      throw new Error(`Failed to delete reservation: ${response.status}`);
    }

    return { success: true };
  } catch (error) {
    console.error('Error deleting reservation:', error);
    throw error;
  }
};

export const getReservationById = async (reservationId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/reservations/get/${reservationId}`, {
      method: "GET",
      headers: getHeaders()
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch reservation: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching reservation:', error);
    throw error;
  }
};

export const getAllReservations = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/reservations/getAll`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching reservations:', error);
    throw error;
  }
};

// ==================== ROOM STATUS & AVAILABILITY ====================

export const getRoomStatusForDate = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/room-status?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch room status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching room status:', error);
    throw error;
  }
};

export const getRoomStatusForDateRange = async (startDate, endDate) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/room-status/range?startDate=${startDate}&endDate=${endDate}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch room status range: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching room status range:', error);
    throw error;
  }
};

// ==================== CALENDAR & DATE QUERIES ====================

export const getMonthlyReservations = async (year, month) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/calendar?year=${year}&month=${month}`,
      { method: "GET", headers: getHeaders() }
    );
    if (!response.ok) throw new Error("Failed to fetch reservations");
    return await response.json();
  } catch (err) {
    console.error("Error fetching monthly reservations:", err);
    throw err;
  }
};

export const getDailyReservations = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/day?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );
    if (!response.ok) throw new Error("Failed to fetch reservations");
    return await response.json();
  } catch (err) {
    console.error("Error fetching daily reservations:", err);
    throw err;
  }
};

export const getReservationsForDateRange = async (startDate, endDate) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/date-range?startDate=${startDate}&endDate=${endDate}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching reservations for date range:', error);
    throw error;
  }
};

// ==================== ARRIVALS & DEPARTURES ====================

export const getArrivals = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/arrivals?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch arrivals: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching arrivals:', error);
    throw error;
  }
};

export const getDepartures = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/departures?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch departures: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching departures:', error);
    throw error;
  }
};

export const getDailySummary = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/daily-summary?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch daily summary: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching daily summary:', error);
    throw error;
  }
};

// ==================== STATUS MANAGEMENT ====================

export const updateReservationStatus = async (reservationId, status) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/${reservationId}/status?status=${status}`,
      { method: "PATCH", headers: getHeaders() }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to update status: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error updating reservation status:', error);
    throw error;
  }
};

export const checkInReservation = async (reservationId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/${reservationId}/check-in`,
      { method: "POST", headers: getHeaders() }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to check in: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error checking in reservation:', error);
    throw error;
  }
};

export const checkOutReservation = async (reservationId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/${reservationId}/check-out`,
      { method: "POST", headers: getHeaders() }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to check out: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error checking out reservation:', error);
    throw error;
  }
};

export const cancelReservation = async (reservationId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/${reservationId}/cancel`,
      { method: "POST", headers: getHeaders() }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to cancel: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error cancelling reservation:', error);
    throw error;
  }
};

// ==================== GUEST & SEARCH ====================

export const getGuestReservations = async (guestId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/guest/${guestId}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch guest reservations: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching guest reservations:', error);
    throw error;
  }
};

export const searchReservations = async (criteria) => {
  try {
    const params = new URLSearchParams();
    if (criteria.guestId) params.append('guestId', criteria.guestId);
    if (criteria.status) params.append('status', criteria.status);
    if (criteria.checkInDate) params.append('checkInDate', criteria.checkInDate);
    if (criteria.checkOutDate) params.append('checkOutDate', criteria.checkOutDate);

    const response = await fetch(
      `${API_BASE_URL}/api/reservations/search?${params}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to search reservations: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error searching reservations:', error);
    throw error;
  }
};

// ==================== OCCUPANCY STATISTICS ====================

export const getCurrentOccupancy = async () => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/occupancy/current`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch occupancy: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching current occupancy:', error);
    throw error;
  }
};

export const getOccupancyForDate = async (date) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/reservations/occupancy/date?date=${date}`,
      { method: "GET", headers: getHeaders() }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch occupancy: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching occupancy for date:', error);
    throw error;
  }
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\room.js =====  
// src/api/room.js

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

// Standard headers without authentication
const getHeaders = () => ({
  'Content-Type': 'application/json',
  'Accept': 'application/json',
});

// ✅ Create new room
export const createRoom = async (roomData) => {
  try {
    console.log('Creating room:', roomData);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/create`, {
      method: "POST",
      headers: getHeaders(),
      body: JSON.stringify(roomData),
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to create room: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('Created room:', data);
    return data;
  } catch (error) {
    console.error('Error creating room:', error);
    throw error;
  }
};

// ✅ Update room
export const updateRoom = async (roomId, roomData) => {
  try {
    console.log(`Updating room ${roomId}:`, roomData);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/update/${roomId}`, {
      method: "PUT",
      headers: getHeaders(),
      body: JSON.stringify(roomData),
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to update room: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('Updated room:', data);
    return data;
  } catch (error) {
    console.error('Error updating room:', error);
    throw error;
  }
};

// ✅ Delete room
export const deleteRoom = async (roomId) => {
  try {
    console.log(`Deleting room ${roomId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/delete/${roomId}`, {
      method: "DELETE",
      headers: getHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to delete room: ${response.status}`);
    }
    
    console.log('Deleted room:', roomId);
    return { success: true };
  } catch (error) {
    console.error('Error deleting room:', error);
    throw error;
  }
};

// ✅ Get single room by ID
export const getRoomById = async (roomId) => {
  try {
    console.log(`Fetching room ${roomId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/get/${roomId}`, {
      method: "GET",
      headers: getHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch room: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Fetched room:', data);
    return data;
  } catch (error) {
    console.error('Error fetching room by ID:', error);
    throw error;
  }
};

// ✅ Get all rooms
export const getAllRooms = async () => {
  try {
    console.log('Fetching all rooms');
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/getAll`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const text = await response.text();
      console.error('Response is not JSON:', text);
      throw new Error("Server returned non-JSON response");
    }

    const data = await response.json();
    console.log('Fetched all rooms:', data);
    return data;
  } catch (error) {
    console.error('Error fetching all rooms:', error);
    throw error;
  }
};

// ✅ Get available rooms only (no date filtering)
export const getAvailableRooms = async () => {
  try {
    console.log('Fetching available rooms');
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/get/available`, {
      method: "GET",
      headers: getHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch available rooms: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Fetched available rooms:', data);
    return data;
  } catch (error) {
    console.error('Error fetching available rooms:', error);
    throw error;
  }
};

// ✅ Get rooms by type
// NOTE: This endpoint has a conflict with getRoomById due to same path pattern /get/{param}
// The backend will treat numeric strings as IDs and non-numeric as types
export const getRoomsByType = async (roomType) => {
  try {
    console.log(`Fetching rooms by type: ${roomType}`);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/get/${roomType}`, {
      method: "GET",
      headers: getHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch rooms by type: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Fetched rooms by type:', data);
    return data;
  } catch (error) {
    console.error('Error fetching rooms by type:', error);
    throw error;
  }
};

// ✅ Get rooms by hotel ID
export const getRoomsByHotel = async (hotelId) => {
  try {
    console.log(`Fetching rooms for hotel ${hotelId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/rooms/hotel/${hotelId}`, {
      method: "GET",
      headers: getHeaders(),
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch rooms for hotel: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Fetched rooms by hotel:', data);
    return data;
  } catch (error) {
    console.error('Error fetching rooms by hotel:', error);
    throw error;
  }
};

// ==================== HELPER FUNCTIONS ====================

// Get available rooms for specific dates
// NOTE: Backend doesn't have this endpoint yet, so we implement client-side filtering
export const getAvailableRoomsForDates = async (checkInDate, checkOutDate) => {
  try {
    console.log(`Fetching available rooms for ${checkInDate} to ${checkOutDate}`);
    console.warn('Backend does not have date-filtered availability endpoint. Using client-side filtering.');
    
    // Get all available rooms and return them
    // The backend should implement proper date-based filtering
    const availableRooms = await getAvailableRooms();
    
    // TODO: When backend implements date-based filtering, replace with:
    // const response = await fetch(
    //   `${API_BASE_URL}/api/rooms/available?checkInDate=${checkInDate}&checkOutDate=${checkOutDate}`,
    //   { method: "GET", headers: getHeaders() }
    // );
    
    console.log('Available rooms (no date filter):', availableRooms);
    return availableRooms;
  } catch (error) {
    console.error('Error fetching available rooms for dates:', error);
    throw error;
  }
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\api\service.js =====  
// src/api/service.js

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

const getHeaders = () => ({
  'Content-Type': 'application/json',
  'Accept': 'application/json',
});

// ==================== SERVICE REQUEST CRUD ====================

export const createServiceRequest = async (serviceRequestData) => {
  try {
    console.log('Creating service request:', serviceRequestData);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/create`, {
      method: "POST",
      headers: getHeaders(),
      body: JSON.stringify(serviceRequestData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Backend error response:', errorText);
      throw new Error(`Failed to create service request: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Created service request:', data);
    return data;
  } catch (error) {
    console.error('Error creating service request:', error);
    throw error;
  }
};

export const updateServiceRequest = async (id, serviceRequestData) => {
  try {
    console.log(`Updating service request ${id}:`, serviceRequestData);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/${id}`, {
      method: "PUT",
      headers: getHeaders(),
      body: JSON.stringify(serviceRequestData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to update service request: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Updated service request:', data);
    return data;
  } catch (error) {
    console.error('Error updating service request:', error);
    throw error;
  }
};

export const getServiceRequestById = async (id) => {
  try {
    console.log(`Fetching service request ${id}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/${id}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service request: ${response.status}`);
    }

    const data = await response.json();
    console.log('Fetched service request:', data);
    return data;
  } catch (error) {
    console.error('Error fetching service request by ID:', error);
    throw error;
  }
};

export const getAllServiceRequests = async () => {
  try {
    console.log('Fetching all service requests');
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/all`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests: ${response.status}`);
    }

    const data = await response.json();
    console.log('Fetched all service requests:', data);
    return data;
  } catch (error) {
    console.error('Error fetching all service requests:', error);
    throw error;
  }
};

export const deleteServiceRequest = async (id) => {
  try {
    console.log(`Deleting service request ${id}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/${id}`, {
      method: "DELETE",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to delete service request: ${response.status}`);
    }

    console.log('Deleted service request:', id);
    return { success: true, id };
  } catch (error) {
    console.error('Error deleting service request:', error);
    throw error;
  }
};

// ==================== SERVICE REQUEST FILTERING ====================

export const getServiceRequestsByStatus = async (status) => {
  try {
    console.log(`Fetching service requests with status: ${status}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/status/${encodeURIComponent(status)}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by status: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests with status ${status}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by status:', error);
    throw error;
  }
};

export const getServiceRequestsByType = async (serviceType) => {
  try {
    console.log(`Fetching service requests with type: ${serviceType}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/type/${encodeURIComponent(serviceType)}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by type: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests with type ${serviceType}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by type:', error);
    throw error;
  }
};

export const getServiceRequestsByPriority = async (priority) => {
  try {
    console.log(`Fetching service requests with priority: ${priority}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/priority/${encodeURIComponent(priority)}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by priority: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests with priority ${priority}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by priority:', error);
    throw error;
  }
};

export const getServiceRequestsByReservation = async (reservationId) => {
  try {
    console.log(`Fetching service requests for reservation: ${reservationId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/reservation/${reservationId}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by reservation: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests for reservation ${reservationId}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by reservation:', error);
    throw error;
  }
};

export const getServiceRequestsByRoom = async (roomId) => {
  try {
    console.log(`Fetching service requests for room: ${roomId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/room/${roomId}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by room: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests for room ${roomId}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by room:', error);
    throw error;
  }
};

export const getServiceRequestsByAssignedStaff = async (staffId) => {
  try {
    console.log(`Fetching service requests for staff: ${staffId}`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/staff/${encodeURIComponent(staffId)}`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch service requests by staff: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched service requests for staff ${staffId}:`, data);
    return data;
  } catch (error) {
    console.error('Error fetching service requests by staff:', error);
    throw error;
  }
};

export const getPendingRequests = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/service-requests/pending`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch pending requests: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching pending requests:', error);
    throw error;
  }
};

export const getUrgentRequests = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/service-requests/urgent`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch urgent requests: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching urgent requests:', error);
    throw error;
  }
};

export const getIncompleteRequests = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/service-requests/incomplete`, {
      method: "GET",
      headers: getHeaders(),
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch incomplete requests: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching incomplete requests:', error);
    throw error;
  }
};

// ==================== SERVICE REQUEST STATUS MANAGEMENT ====================

export const assignToStaff = async (requestId, staffId) => {
  try {
    console.log(`Assigning service request ${requestId} to staff ${staffId}`);
    
    const response = await fetch(
      `${API_BASE_URL}/api/service-requests/${requestId}/assign?staffId=${encodeURIComponent(staffId)}`,
      {
        method: "PATCH",
        headers: getHeaders(),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to assign request: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error assigning service request:', error);
    throw error;
  }
};

export const updateStatus = async (requestId, status) => {
  try {
    console.log(`Updating service request ${requestId} status to ${status}`);
    
    const response = await fetch(
      `${API_BASE_URL}/api/service-requests/${requestId}/status?status=${encodeURIComponent(status)}`,
      {
        method: "PATCH",
        headers: getHeaders(),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to update status: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error updating service request status:', error);
    throw error;
  }
};

export const markServiceRequestCompleted = async (id) => {
  try {
    console.log(`Marking service request ${id} as completed`);
    
    const response = await fetch(`${API_BASE_URL}/api/service-requests/${id}/complete`, {
      method: "POST",
      headers: getHeaders(),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to mark as completed: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error marking service request as completed:', error);
    throw error;
  }
};

export const getServiceRequestsByDateRange = async (startDate, endDate) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/service-requests/date-range?startDate=${startDate}&endDate=${endDate}`,
      {
        method: "GET",
        headers: getHeaders(),
      }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch requests by date range: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error fetching service requests by date range:', error);
    throw error;
  }
};

export default {
  createServiceRequest,
  updateServiceRequest,
  getServiceRequestById,
  getAllServiceRequests,
  deleteServiceRequest,
  getServiceRequestsByStatus,
  getServiceRequestsByType,
  getServiceRequestsByPriority,
  getServiceRequestsByReservation,
  getServiceRequestsByRoom,
  getServiceRequestsByAssignedStaff,
  getPendingRequests,
  getUrgentRequests,
  getIncompleteRequests,
  assignToStaff,
  updateStatus,
  markServiceRequestCompleted,
  getServiceRequestsByDateRange
}; 
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\App.jsx =====  
import React, { useState, useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import DashboardLayout from './components/DashboardLayout';
import StayOpsSidebar from './components/SideBar';
import Login from './components/Login';
import ProtectedRoute from './components/ProtectedRoute';
import GuestRegistration from './pages/GuestRegistrationForm.jsx';
import RoomView from './pages/RoomView.jsx';
import ReceptionistDashboard from './pages/ReceptionistDashboard.jsx';
import CheckInOut from './pages/CheckInOut.jsx';
import Reservations from './pages/Reservations.jsx';
import Guests from './pages/Guests.jsx';
import Billing from './pages/Billing.jsx';
import GuestRequests from './pages/GuestRequests.jsx';
import Communication from './pages/Communication.jsx';
import Reporting from './pages/Reporting.jsx';
import Security from './pages/Security.jsx';
import Settings from './pages/Settings.jsx';
import QRScanner from './components/QRScanner.jsx';

// Automation Pages
import AutomationDashboard from './pages/AutomationDashboard.jsx';
import DynamicPricing from './pages/DynamicPricing.jsx';
import FraudDetection from './pages/FraudDetection.jsx';
import HousekeepingTasks from './pages/HousekeepingTasks.jsx';
import OTAChannelManagement from './pages/OTAChannelManagement.jsx';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check if user is already authenticated
    const authStatus = localStorage.getItem('isAuthenticated') === 'true';
    setIsAuthenticated(authStatus);
    setLoading(false);
  }, []);

  const handleLogin = () => {
    setIsAuthenticated(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('isAuthenticated');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('loginTime');
    setIsAuthenticated(false);
  };

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      }}>
        <div style={{ color: 'white', fontSize: '18px' }}>Loading...</div>
      </div>
    );
  }

  return (
    <Routes>
      {/* Login Route */}
      <Route 
        path="/login" 
        element={
          isAuthenticated ? 
            <Navigate to="/dashboard" replace /> : 
            <Login onLogin={handleLogin} />
        } 
      />
      
      {/* Route for standalone sidebar demo */}
      <Route path="/sidebar" element={<StayOpsSidebar />} />
      
      {/* Protected Dashboard routes with layout */}
      <Route 
        path="/dashboard" 
        element={
          <ProtectedRoute>
            <DashboardLayout onLogout={handleLogout} />
          </ProtectedRoute>
        }
      >
        {/* Core Receptionist Pages */}
        <Route path="overview" element={<ReceptionistDashboard />} />
        <Route path="check-in-out" element={<CheckInOut />} />
        <Route path="reservations" element={<Reservations />} />
        <Route path="guest-registration" element={<GuestRegistration />} />
        <Route path="guests" element={<Guests />} />
        <Route path="rooms" element={<RoomView />} />
        <Route path="billing" element={<Billing />} />
        <Route path="guest-requests" element={<GuestRequests />} />
        <Route path="communication" element={<Communication />} />
        <Route path="reporting" element={<Reporting />} />
        <Route path="security" element={<Security />} />
        <Route path="qr-scanner" element={<QRScanner />} />
        <Route path="settings" element={<Settings />} />
        
        {/* Automation Pages */}
        <Route path="automation" element={<AutomationDashboard />} />
        <Route path="automation/pricing" element={<DynamicPricing />} />
        <Route path="automation/fraud" element={<FraudDetection />} />
        <Route path="automation/housekeeping" element={<HousekeepingTasks />} />
        <Route path="automation/ota" element={<OTAChannelManagement />} />
        
        {/* Default redirect */}
        <Route index element={<Navigate to="overview" replace />} />
      </Route>
      
      {/* Root redirect */}
      <Route 
        path="/" 
        element={
          <Navigate 
            to={isAuthenticated ? "/dashboard" : "/login"} 
            replace 
          />
        } 
      />
      
      {/* Catch all route */}
      <Route 
        path="*" 
        element={
          <Navigate 
            to={isAuthenticated ? "/dashboard" : "/login"} 
            replace 
          />
        } 
      />
    </Routes>
  );
}

export default App;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\main.jsx =====  
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\AutomationMetricsWidget.jsx =====  
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Zap, TrendingUp, AlertTriangle, CheckCircle, ArrowRight } from 'lucide-react';
import { getTodayMetrics } from '../api/metrics';
import { getAutomationStatus } from '../api/automation';

const AutomationMetricsWidget = () => {
  const [loading, setLoading] = useState(true);
  const [metrics, setMetrics] = useState(null);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    loadMetrics();
  }, []);

  const loadMetrics = async () => {
    try {
      const [metricsData, statusData] = await Promise.all([
        getTodayMetrics(),
        getAutomationStatus()
      ]);
      setMetrics(metricsData);
      setStatus(statusData);
    } catch (error) {
      console.error('Error loading automation metrics:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="border border-gray-200 p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/3 mb-4"></div>
          <div className="space-y-3">
            <div className="h-3 bg-gray-200 rounded"></div>
            <div className="h-3 bg-gray-200 rounded w-5/6"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <Zap size={24} className="text-black" />
          <h3 className="text-lg font-medium">Automation Status</h3>
        </div>
        <Link 
          to="/dashboard/automation"
          className="text-sm text-black hover:underline flex items-center gap-1"
        >
          View All
          <ArrowRight size={14} />
        </Link>
      </div>

      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="p-4 bg-gray-50 border border-gray-200">
          <div className="text-2xl font-light mb-1">
            {metrics?.tasksAutomatedToday || 0}
          </div>
          <div className="text-xs text-gray-500">Tasks Automated Today</div>
        </div>

        <div className="p-4 bg-gray-50 border border-gray-200">
          <div className="text-2xl font-light mb-1">
            {metrics?.priceUpdatesToday || 0}
          </div>
          <div className="text-xs text-gray-500">Price Updates</div>
        </div>

        <div className="p-4 bg-gray-50 border border-gray-200">
          <div className="text-2xl font-light mb-1">
            {metrics?.fraudAlertsToday || 0}
          </div>
          <div className="text-xs text-gray-500">Fraud Alerts</div>
        </div>

        <div className="p-4 bg-gray-50 border border-gray-200">
          <div className="text-2xl font-light mb-1">
            {metrics?.housekeepingTasksToday || 0}
          </div>
          <div className="text-xs text-gray-500">Housekeeping Tasks</div>
        </div>
      </div>

      {status && (
        <div className="space-y-2 text-sm">
          <div className="flex items-center justify-between py-2 border-t border-gray-200">
            <span className="text-gray-600">System Status</span>
            <span className="flex items-center gap-2">
              <CheckCircle size={16} className="text-green-600" />
              <span className="font-medium text-green-600">
                {status.systemStatus || 'Operational'}
              </span>
            </span>
          </div>

          <div className="flex items-center justify-between py-2 border-t border-gray-200">
            <span className="text-gray-600">Active Automations</span>
            <span className="font-medium">{status.activeAutomations || 0}</span>
          </div>

          {status.lastAuditRun && (
            <div className="flex items-center justify-between py-2 border-t border-gray-200">
              <span className="text-gray-600">Last Audit</span>
              <span className="text-xs text-gray-500">
                {new Date(status.lastAuditRun).toLocaleString()}
              </span>
            </div>
          )}
        </div>
      )}

      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="grid grid-cols-3 gap-2">
          <Link
            to="/dashboard/automation/pricing"
            className="px-3 py-2 text-xs border border-gray-200 hover:border-black transition-colors text-center flex items-center justify-center gap-1"
          >
            <TrendingUp size={12} />
            Pricing
          </Link>
          <Link
            to="/dashboard/automation/fraud"
            className="px-3 py-2 text-xs border border-gray-200 hover:border-black transition-colors text-center flex items-center justify-center gap-1"
          >
            <AlertTriangle size={12} />
            Fraud
          </Link>
          <Link
            to="/dashboard/automation/housekeeping"
            className="px-3 py-2 text-xs border border-gray-200 hover:border-black transition-colors text-center flex items-center justify-center gap-1"
          >
            <Zap size={12} />
            Tasks
          </Link>
        </div>
      </div>
    </div>
  );
};

export default AutomationMetricsWidget;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\DashboardLayout.jsx =====  
import React, { useState, useEffect } from 'react';
import { Outlet, useNavigate, useLocation } from 'react-router-dom';
import { 
  Dashboard as LayoutDashboard, 
  People as Users, 
  Hotel as Bed, 
  CalendarMonth as Calendar, 
  Receipt, 
  Settings, 
  Logout as LogOut,
  Menu,
  Close as X,
  AutoFixHigh as Automation,
  TrendingUp,
  Security as SecurityIcon,
  CleaningServices,
  Language
} from '@mui/icons-material';

const sidebarItems = [
  { text: 'Dashboard', icon: LayoutDashboard, path: '/dashboard/overview' },
  { text: 'Check-In & Check-Out', icon: Users, path: '/dashboard/check-in-out' },
  { text: 'Reservations', icon: Calendar, path: '/dashboard/reservations' },
  { text: 'Guest Registration', icon: Users, path: '/dashboard/guest-registration' },
  { text: 'Guests', icon: Users, path: '/dashboard/guests' },
  { text: 'Rooms', icon: Bed, path: '/dashboard/rooms' },
  { text: 'Billing', icon: Receipt, path: '/dashboard/billing' },
  { text: 'Guest Requests', icon: Users, path: '/dashboard/guest-requests' },
  { text: 'Communication', icon: Users, path: '/dashboard/communication' },
  { text: 'Reporting', icon: Users, path: '/dashboard/reporting' },
  { text: 'Security', icon: Users, path: '/dashboard/security' },
  { 
    text: 'Automation', 
    icon: Automation, 
    path: '/dashboard/automation',
    children: [
      { text: 'Dashboard', icon: LayoutDashboard, path: '/dashboard/automation' },
      { text: 'Dynamic Pricing', icon: TrendingUp, path: '/dashboard/automation/pricing' },
      { text: 'Fraud Detection', icon: SecurityIcon, path: '/dashboard/automation/fraud' },
      { text: 'Housekeeping Tasks', icon: CleaningServices, path: '/dashboard/automation/housekeeping' },
      { text: 'OTA Channel Management', icon: Language, path: '/dashboard/automation/ota' }
    ]
  },
  { text: 'Settings', icon: Settings, path: '/dashboard/settings' },
  { text: 'QR Scanner', icon: Users, path: '/dashboard/qr-scanner'}
];

export default function DashboardLayout({ onLogout }) {
  const [isOpen, setIsOpen] = useState(true);
  const [expandedItems, setExpandedItems] = useState({});
  const navigate = useNavigate();
  const location = useLocation();

  const handleItemClick = (path) => {
    navigate(path);
  };

  const toggleExpanded = (itemText) => {
    setExpandedItems(prev => ({
      ...prev,
      [itemText]: !prev[itemText]
    }));
  };

  const isChildActive = (children) => {
    return children?.some(child => location.pathname === child.path);
  };

  // Auto-expand automation menu when on automation routes
  useEffect(() => {
    if (location.pathname.startsWith('/dashboard/automation')) {
      setExpandedItems(prev => ({
        ...prev,
        'Automation': true
      }));
    }
  }, [location.pathname]);

  const handleSignOut = () => {
    if (window.confirm('Are you sure you want to logout?')) {
      if (onLogout) {
        onLogout();
      }
      navigate('/login');
    }
  };

  const toggleSidebar = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div style={{ display: 'flex', minHeight: '100vh' }}>
      {/* Toggle Button */}
      <button
        onClick={toggleSidebar}
        style={{
          position: 'fixed',
          top: '24px',
          left: isOpen ? '240px' : '24px',
          zIndex: 1000,
          backgroundColor: 'white',
          border: '1px solid black',
          width: '40px',
          height: '40px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          transition: 'left 0.3s ease',
        }}
      >
        {isOpen ? <X style={{ fontSize: 18 }} /> : <Menu style={{ fontSize: 18 }} />}
      </button>

      {/* Sidebar */}
      <div
        style={{
          width: isOpen ? '280px' : '0',
          backgroundColor: 'white',
          borderRight: '1px solid black',
          transition: 'width 0.3s ease',
          overflow: 'hidden',
          display: 'flex',
          flexDirection: 'column',
          height: '100vh',
        }}
      >
        {/* Header */}
        <div
          style={{
            padding: '16px 24px 12px 24px',
            borderBottom: '1px solid black',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            flexShrink: 0,
          }}
        >
          <h1
            style={{
              fontSize: '20px',
              fontWeight: '300',
              color: 'black',
              letterSpacing: '0.5px',
              margin: '0 0 2px 0',
            }}
          >
            StayOps
          </h1>
          <p
            style={{
              fontSize: '11px',
              color: '#666',
              fontWeight: '300',
              letterSpacing: '0.2px',
              margin: 0,
            }}
          >
            Receptionist Dashboard
          </p>
        </div>

        {/* Navigation Items */}
        <div style={{ 
          flex: 1, 
          paddingTop: '8px',
          display: 'flex',
          flexDirection: 'column',
          overflow: 'hidden'
        }}>
          <nav style={{ 
            padding: '0 12px',
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'space-evenly'
          }}>
            {sidebarItems.map((item, index) => {
              const IconComponent = item.icon;
              const isSelected = location.pathname === item.path;
              const hasChildren = item.children && item.children.length > 0;
              const isExpanded = expandedItems[item.text];
              const isParentActive = hasChildren && isChildActive(item.children);
              
              return (
                <div key={item.text} style={{ marginBottom: '1px' }}>
                  <button
                    onClick={() => hasChildren ? toggleExpanded(item.text) : handleItemClick(item.path)}
                    style={{
                      width: '100%',
                      padding: '6px 16px',
                      minHeight: '32px',
                      backgroundColor: (isSelected || isParentActive) ? 'black' : 'transparent',
                      color: (isSelected || isParentActive) ? 'white' : 'black',
                      border: 'none',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease-in-out',
                      fontSize: '13px',
                      fontWeight: (isSelected || isParentActive) ? '400' : '300',
                      letterSpacing: '0.2px',
                    }}
                    onMouseEnter={(e) => {
                      if (!isSelected && !isParentActive) {
                        e.target.style.backgroundColor = '#f9f9f9';
                        e.target.style.border = '1px solid #e0e0e0';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (!isSelected && !isParentActive) {
                        e.target.style.backgroundColor = 'transparent';
                        e.target.style.border = 'none';
                      }
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <IconComponent
                        style={{
                          fontSize: 14,
                          marginRight: '10px',
                          color: (isSelected || isParentActive) ? 'white' : 'black',
                        }}
                      />
                      {item.text}
                    </div>
                    {hasChildren && (
                      <span style={{ 
                        fontSize: 10, 
                        color: (isSelected || isParentActive) ? 'white' : 'black',
                        transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',
                        transition: 'transform 0.2s ease-in-out'
                      }}>
                        ▶
                      </span>
                    )}
                  </button>
                  
                  {/* Submenu for children */}
                  {hasChildren && isExpanded && (
                    <div style={{ marginLeft: '20px', marginTop: '2px' }}>
                      {item.children.map((child, childIndex) => {
                        const ChildIconComponent = child.icon;
                        const isChildSelected = location.pathname === child.path;
                        
                        return (
                          <button
                            key={child.text}
                            onClick={() => handleItemClick(child.path)}
                            style={{
                              width: '100%',
                              padding: '4px 12px',
                              minHeight: '28px',
                              backgroundColor: isChildSelected ? '#333' : 'transparent',
                              color: isChildSelected ? 'white' : '#666',
                              border: 'none',
                              display: 'flex',
                              alignItems: 'center',
                              cursor: 'pointer',
                              transition: 'all 0.2s ease-in-out',
                              fontSize: '12px',
                              fontWeight: isChildSelected ? '400' : '300',
                              letterSpacing: '0.2px',
                              marginBottom: '1px',
                            }}
                            onMouseEnter={(e) => {
                              if (!isChildSelected) {
                                e.target.style.backgroundColor = '#f5f5f5';
                                e.target.style.color = '#333';
                              }
                            }}
                            onMouseLeave={(e) => {
                              if (!isChildSelected) {
                                e.target.style.backgroundColor = 'transparent';
                                e.target.style.color = '#666';
                              }
                            }}
                          >
                            <ChildIconComponent
                              style={{
                                fontSize: 12,
                                marginRight: '8px',
                                color: isChildSelected ? 'white' : '#666',
                              }}
                            />
                            {child.text}
                          </button>
                        );
                      })}
                    </div>
                  )}
                </div>
              );
            })}
          </nav>
        </div>

        {/* Bottom Section */}
        <div
          style={{
            borderTop: '1px solid black',
            padding: '8px 12px 12px 12px',
            flexShrink: 0,
          }}
        >
          {/* User Info */}
          <div
            style={{
              padding: '8px 12px',
              marginBottom: '8px',
              backgroundColor: '#f8f9fa',
              borderRadius: '6px',
              border: '1px solid #e9ecef',
            }}
          >
            <div
              style={{
                fontSize: '12px',
                color: '#6c757d',
                marginBottom: '2px',
              }}
            >
              Logged in as:
            </div>
            <div
              style={{
                fontSize: '13px',
                fontWeight: '500',
                color: '#212529',
                wordBreak: 'break-word',
              }}
            >
              {localStorage.getItem('userEmail') || 'reception@gmail.com'}
            </div>
          </div>
          
          <button
            onClick={handleSignOut}
            style={{
              width: '100%',
              padding: '6px 16px',
              minHeight: '32px',
              backgroundColor: 'transparent',
              color: 'black',
              border: 'none',
              display: 'flex',
              alignItems: 'center',
              cursor: 'pointer',
              transition: 'all 0.2s ease-in-out',
              fontSize: '13px',
              fontWeight: '300',
              letterSpacing: '0.2px',
            }}
            onMouseEnter={(e) => {
              e.target.style.backgroundColor = '#f9f9f9';
              e.target.style.border = '1px solid #e0e0e0';
            }}
            onMouseLeave={(e) => {
              e.target.style.backgroundColor = 'transparent';
              e.target.style.border = 'none';
            }}
          >
            <LogOut
              style={{
                fontSize: 14,
                marginRight: '10px',
                color: 'black',
              }}
            />
            Sign Out
          </button>
        </div>
      </div>

      {/* Main Content Area */}
      <div
        style={{
          flex: 1,
          backgroundColor: '#fafafa',
          transition: 'margin-left 0.3s ease',
          height: '100vh',
          overflow: 'auto'
        }}
      >
        <Outlet />
      </div>
    </div>
  );
}===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\Login.jsx =====  
import React, { useState } from 'react';

const Login = ({ onLogin }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const VALID_EMAIL = 'reception@gmail.com';
  const VALID_PASSWORD = 'reception@123';

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (error) {
      setError('');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    await new Promise(resolve => setTimeout(resolve, 1000));

    if (formData.email === VALID_EMAIL && formData.password === VALID_PASSWORD) {
      localStorage.setItem('isAuthenticated', 'true');
      localStorage.setItem('userEmail', formData.email);
      localStorage.setItem('loginTime', new Date().toISOString());
      
      if (onLogin) onLogin();
      
      alert('Login successful! You would be redirected to the dashboard.');
    } else {
      setError('Invalid email or password. Please try again.');
    }

    setLoading(false);
  };

  const handleForgotPassword = () => {
    alert('Please contact the system administrator for password reset.');
  };

  const styles = {
    container: {
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: '#fafafa',
      padding: '20px',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    },
    background: {
      width: '100%',
      maxWidth: '420px'
    },
    card: {
      background: 'white',
      borderRadius: '6px',
      border: '1px solid #e8e8e8',
      padding: '48px 40px',
      width: '100%',
      boxShadow: '0 2px 8px rgba(0,0,0,0.04)'
    },
    header: {
      textAlign: 'center',
      marginBottom: '32px'
    },
    logoSection: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      gap: '16px',
      marginBottom: '20px'
    },
    logoIcon: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '56px',
      height: '56px',
      background: '#1a1a1a',
      borderRadius: '6px'
    },
    appTitle: {
      fontSize: '22px',
      fontWeight: '500',
      color: '#1a1a1a',
      margin: 0,
      letterSpacing: '-0.02em'
    },
    subtitle: {
      color: '#999',
      fontSize: '14px',
      margin: 0,
      lineHeight: 1.5
    },
    formContainer: {
      display: 'flex',
      flexDirection: 'column',
      gap: '20px'
    },
    formGroup: {
      display: 'flex',
      flexDirection: 'column',
      gap: '6px'
    },
    label: {
      fontWeight: '500',
      color: '#4a4a4a',
      fontSize: '13px'
    },
    input: {
      padding: '11px 14px',
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      fontSize: '14px',
      transition: 'all 0.2s ease',
      background: '#ffffff',
      outline: 'none',
      color: '#1a1a1a',
      width: '100%',
      boxSizing: 'border-box'
    },
    inputError: {
      borderColor: '#991b1b'
    },
    errorMessage: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      color: '#991b1b',
      fontSize: '13px',
      fontWeight: '400',
      padding: '10px 12px',
      background: '#fef2f2',
      border: '1px solid #fee2e2',
      borderRadius: '4px',
      marginTop: '-8px'
    },
    button: {
      padding: '12px 24px',
      background: '#1a1a1a',
      color: 'white',
      border: 'none',
      borderRadius: '4px',
      fontSize: '14px',
      fontWeight: '500',
      cursor: 'pointer',
      transition: 'all 0.2s ease',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '8px',
      marginTop: '8px',
      width: '100%'
    },
    buttonDisabled: {
      opacity: 0.6,
      cursor: 'not-allowed'
    },
    footer: {
      marginTop: '32px',
      textAlign: 'center'
    },
    forgotLink: {
      background: 'none',
      border: 'none',
      color: '#1a1a1a',
      fontSize: '13px',
      fontWeight: '400',
      cursor: 'pointer',
      textDecoration: 'underline',
      marginBottom: '24px',
      padding: 0
    },
    demoCredentials: {
      background: '#fafafa',
      border: '1px solid #e8e8e8',
      borderRadius: '4px',
      padding: '16px',
      textAlign: 'left'
    },
    demoTitle: {
      margin: '0 0 10px 0',
      fontSize: '13px',
      fontWeight: '500',
      color: '#1a1a1a'
    },
    demoText: {
      margin: '4px 0',
      fontSize: '12px',
      color: '#666',
      fontFamily: '"SF Mono", Monaco, Menlo, monospace'
    }
  };

  return (
    <div style={styles.container}>
      <div style={styles.background}>
        <div style={styles.card}>
          <div style={styles.header}>
            <div style={styles.logoSection}>
              <div style={styles.logoIcon}>
                <svg width="32" height="32" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <rect x="8" y="8" width="24" height="24" rx="2" stroke="white" strokeWidth="2" fill="none"/>
                  <path d="M14 14h12M14 20h12M14 26h8" stroke="white" strokeWidth="2" strokeLinecap="round"/>
                </svg>
              </div>
              <h1 style={styles.appTitle}>StayOps Reception</h1>
            </div>
            <p style={styles.subtitle}>Welcome back! Please sign in to your account.</p>
          </div>

          <div style={styles.formContainer}>
            <div style={styles.formGroup}>
              <label htmlFor="email" style={styles.label}>
                Email Address
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                style={{
                  ...styles.input,
                  ...(error ? styles.inputError : {})
                }}
                placeholder="Enter your email"
                autoComplete="email"
                onFocus={(e) => {
                  if (!error) e.target.style.borderColor = '#1a1a1a';
                }}
                onBlur={(e) => {
                  if (!error) e.target.style.borderColor = '#e0e0e0';
                }}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') handleSubmit(e);
                }}
              />
            </div>

            <div style={styles.formGroup}>
              <label htmlFor="password" style={styles.label}>
                Password
              </label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                style={{
                  ...styles.input,
                  ...(error ? styles.inputError : {})
                }}
                placeholder="Enter your password"
                autoComplete="current-password"
                onFocus={(e) => {
                  if (!error) e.target.style.borderColor = '#1a1a1a';
                }}
                onBlur={(e) => {
                  if (!error) e.target.style.borderColor = '#e0e0e0';
                }}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') handleSubmit(e);
                }}
              />
            </div>

            {error && (
              <div style={styles.errorMessage}>
                <svg width="14" height="14" viewBox="0 0 16 16" fill="none">
                  <path d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm1 13H7v-2h2v2zm0-3H7V4h2v6z" fill="#991b1b"/>
                </svg>
                {error}
              </div>
            )}

            <button
              type="button"
              onClick={handleSubmit}
              disabled={loading}
              style={{
                ...styles.button,
                ...(loading ? styles.buttonDisabled : {})
              }}
              onMouseEnter={(e) => {
                if (!loading) e.target.style.backgroundColor = '#000';
              }}
              onMouseLeave={(e) => {
                if (!loading) e.target.style.backgroundColor = '#1a1a1a';
              }}
            >
              {loading ? (
                <>
                  <div style={{
                    width: '14px',
                    height: '14px',
                    border: '2px solid transparent',
                    borderTop: '2px solid currentColor',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite'
                  }}></div>
                  Signing in...
                </>
              ) : (
                'Sign In'
              )}
            </button>
          </div>

          <div style={styles.footer}>
            <button
              type="button"
              onClick={handleForgotPassword}
              style={styles.forgotLink}
              onMouseEnter={(e) => e.target.style.color = '#666'}
              onMouseLeave={(e) => e.target.style.color = '#1a1a1a'}
            >
              Forgot your password?
            </button>
            
            <div style={styles.demoCredentials}>
              <h3 style={styles.demoTitle}>Demo Credentials:</h3>
              <p style={styles.demoText}><strong style={{ color: '#1a1a1a' }}>Email:</strong> reception@gmail.com</p>
              <p style={styles.demoText}><strong style={{ color: '#1a1a1a' }}>Password:</strong> reception@123</p>
            </div>
          </div>
        </div>
      </div>

      <style>
        {`
          @keyframes spin {
            to {
              transform: rotate(360deg);
            }
          }

          @media (max-width: 480px) {
            .login-card {
              padding: 32px 24px !important;
            }
          }

          input::placeholder {
            color: #b8b8b8;
          }
        `}
      </style>
    </div>
  );
};

export default Login;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\ProtectedRoute.jsx =====  
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
  const location = useLocation();
  const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';

  if (!isAuthenticated) {
    // Redirect to login page with return url
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};

export default ProtectedRoute;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\QRScanner.jsx =====  
import React, { useEffect, useRef, useState } from "react";
import { BrowserQRCodeReader } from "@zxing/browser";

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

const QRScanner = () => {
  const [result, setResult] = useState("");
  const [guestData, setGuestData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [cameraError, setCameraError] = useState(null);
  const [scanning, setScanning] = useState(false);
  const videoRef = useRef(null);
  const codeReaderRef = useRef(null);
  const controlsRef = useRef(null);

  const fetchGuestData = async (guestId) => {
    try {
      setLoading(true);
      setError(null);
      setGuestData(null);

      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Guest not found (${response.status}): ${errorText}`);
      }

      const data = await response.json();
      setGuestData(data);
      stopCamera();
    } catch (err) {
      console.error("Error fetching guest data:", err);
      setError(err.message || "Failed to fetch guest data");
    } finally {
      setLoading(false);
    }
  };

  const startCamera = async () => {
    try {
      setError(null);
      setCameraError(null);
      setGuestData(null);
      setResult("");
      setScanning(true);

      const codeReader = new BrowserQRCodeReader();
      codeReaderRef.current = codeReader;

      let lastScannedCode = '';
      let lastScanTime = 0;
      const SCAN_COOLDOWN = 2000; // 2 seconds between scans

      controlsRef.current = await codeReader.decodeFromVideoDevice(
        null,
        videoRef.current,
        (res, err) => {
          if (res) {
            const qrValue = res.getText();
            const currentTime = Date.now();
            
            // Prevent rapid re-scanning of the same code
            if (qrValue === lastScannedCode && (currentTime - lastScanTime) < SCAN_COOLDOWN) {
              return;
            }
            
            console.log("QR Detected:", qrValue);
            setResult(qrValue);
            lastScannedCode = qrValue;
            lastScanTime = currentTime;
            
            // Add small delay before fetching for better UX
            setTimeout(() => {
              fetchGuestData(qrValue.trim());
            }, 500);
          }
          if (err && !(err.name === "NotFoundException")) {
            console.error("QR scan error:", err);
          }
        }
      );
    } catch (err) {
      console.error("Camera error:", err);
      setCameraError("Unable to access camera. Please check permissions.");
      setScanning(false);
    }
  };

  const stopCamera = () => {
    if (controlsRef.current) {
      controlsRef.current.stop();
      controlsRef.current = null;
    }
    setScanning(false);
  };

  const resetScanner = () => {
    stopCamera();
    setResult("");
    setGuestData(null);
    setError(null);
    setCameraError(null);
  };

  useEffect(() => {
    return () => stopCamera();
  }, []);

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-4xl mx-auto px-8 py-12">
        <div className="mb-16">
          <h1 className="text-5xl font-light tracking-tight text-black mb-3">
            QR Scanner
          </h1>
          <p className="text-gray-500 text-sm">
            Scan guest QR code to retrieve information
          </p>
        </div>

        {!guestData && (
          <div>
            <div className="border border-gray-200 p-8 text-center mb-8">
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                className="w-full max-w-md mx-auto border border-gray-200 bg-black mb-6"
              />
              
              {result && (
                <div className="mb-6 p-4 bg-black text-white text-sm">
                  ✓ QR Code Detected: {result}
                </div>
              )}
              
              <div className="flex gap-3 justify-center">
                {!scanning ? (
                  <button
                    onClick={startCamera}
                    className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
                  >
                    Start Camera
                  </button>
                ) : (
                  <button
                    onClick={stopCamera}
                    className="px-6 py-3 bg-gray-600 text-white text-sm hover:bg-gray-700 transition-colors"
                  >
                    Stop Camera
                  </button>
                )}
              </div>
            </div>

            {cameraError && (
              <div className="p-4 border border-gray-300 mb-4 text-sm">
                ⚠ {cameraError}
              </div>
            )}
            
            {error && (
              <div className="p-4 border border-gray-300 mb-4 text-sm">
                ⚠ {error}
              </div>
            )}
            
            {loading && (
              <div className="text-center py-8 text-sm text-gray-500">
                Loading guest data...
              </div>
            )}
          </div>
        )}

        {guestData && (
          <div className="border border-gray-200 p-8">
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-3xl font-light tracking-tight">
                Guest Details
              </h2>
              <button
                onClick={resetScanner}
                className="px-6 py-3 border border-gray-200 text-black text-sm hover:border-black transition-colors"
              >
                Scan Again
              </button>
            </div>
            
            <div className="flex gap-8 mb-8 justify-center flex-wrap">
              {guestData.imageUrl && (
                <div className="text-center">
                  <img
                    src={guestData.imageUrl}
                    alt="Guest"
                    className="w-40 h-40 object-cover border border-gray-200 grayscale"
                  />
                  <p className="mt-3 text-xs text-gray-500">Profile Image</p>
                </div>
              )}

              {guestData.qrCodeBase64 && (
                <div className="text-center">
                  <img
                    src={guestData.qrCodeBase64}
                    alt="QR Code"
                    className="w-40 h-40 border border-gray-200"
                  />
                  <p className="mt-3 text-xs text-gray-500">QR Code</p>
                </div>
              )}
            </div>

            <div className="space-y-4">
              <div className="pb-4 border-b border-gray-100">
                <div className="text-xs text-gray-500 mb-1">Name</div>
                <div className="text-black">{guestData.fullName}</div>
              </div>

              <div className="pb-4 border-b border-gray-100">
                <div className="text-xs text-gray-500 mb-1">Email</div>
                <div className="text-black">{guestData.email}</div>
              </div>

              <div className="pb-4 border-b border-gray-100">
                <div className="text-xs text-gray-500 mb-1">Phone</div>
                <div className="text-black">{guestData.phone}</div>
              </div>

              <div className="pb-4 border-b border-gray-100">
                <div className="text-xs text-gray-500 mb-1">Nationality</div>
                <div className="text-black">{guestData.nationality}</div>
              </div>

              <div className="pb-4 border-b border-gray-100">
                <div className="text-xs text-gray-500 mb-1">{guestData.identityType}</div>
                <div className="text-black">{guestData.identityNumber}</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default QRScanner;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\ReservationCalendar.jsx =====  
import React, { useEffect, useMemo, useState } from "react";
import {
  Box,
  Paper,
  Typography,
  Stack,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  List,
  ListItem,
  ListItemText,
  CircularProgress,
} from "@mui/material";

import {
  getMonthlyReservations,
  getDailyReservations,
} from "../api/reservation";

const DAY_NAMES = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

export default function ReservationCalendar({ year, month }) {
  const [summaries, setSummaries] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [selectedDate, setSelectedDate] = useState(null);
  const [dayDetails, setDayDetails] = useState([]);
  const [detailsLoading, setDetailsLoading] = useState(false);
  const [detailsError, setDetailsError] = useState(null);

  // Fetch calendar summaries
  useEffect(() => {
    let mounted = true;
    setLoading(true);
    setError(null);

    getMonthlyReservations(year, month)
      .then((json) => {
        if (mounted) setSummaries(json || []);
      })
      .catch((err) => {
        if (mounted) setError(err.message || "Failed to load");
      })
      .finally(() => {
        if (mounted) setLoading(false);
      });

    return () => (mounted = false);
  }, [year, month]);

  // Map summaries by date for quick lookup
  const summaryMap = useMemo(() => {
    const m = new Map();
    (summaries || []).forEach((s) => {
      const dateOnly = (s.date || "").slice(0, 10);
      if (dateOnly) m.set(dateOnly, s);
    });
    return m;
  }, [summaries]);

  // Calendar grid generation
  const firstDayIndex = new Date(year, month - 1, 1).getDay();
  const daysInMonth = new Date(year, month, 0).getDate();
  const totalCells = Math.ceil((firstDayIndex + daysInMonth) / 7) * 7;
  const cells = Array.from({ length: totalCells }).map((_, idx) => {
    const dayNumber = idx - firstDayIndex + 1;
    return dayNumber >= 1 && dayNumber <= daysInMonth ? dayNumber : null;
  });

  // Fetch reservations by date
  const handleOpenDay = async (dayNumber) => {
    const dateISO = `${year}-${String(month).padStart(2, "0")}-${String(
      dayNumber
    ).padStart(2, "0")}`;

    setSelectedDate(dateISO);
    setDayDetails([]);
    setDetailsError(null);
    setDetailsLoading(true);

    try {
      const details = await getDailyReservations(dateISO);
      setDayDetails(details || []);
    } catch (err) {
      setDetailsError(err.message || "Failed to load details");
    } finally {
      setDetailsLoading(false);
    }
  };

  const handleCloseDialog = () => {
    setSelectedDate(null);
    setDayDetails([]);
    setDetailsError(null);
  };

  return (
    <Box>
      {loading ? (
        <Box sx={{ py: 6, display: "flex", justifyContent: "center" }}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Box sx={{ py: 3, textAlign: "center" }}>
          <Typography color="error">Error: {error}</Typography>
        </Box>
      ) : (
        <>
          {/* Day headers */}
          <Box
            sx={{
              display: "grid",
              gridTemplateColumns: "repeat(7, 1fr)",
              gap: 1,
              mb: 1,
            }}
          >
            {DAY_NAMES.map((d) => (
              <Box key={d} sx={{ textAlign: "center", py: 1 }}>
                <Typography variant="subtitle2" sx={{ fontWeight: 700 }}>
                  {d}
                </Typography>
              </Box>
            ))}
          </Box>

          {/* Calendar grid */}
          <Box
            sx={{
              display: "grid",
              gridTemplateColumns: "repeat(7, 1fr)",
              gap: 2,
            }}
          >
            {cells.map((day, idx) => {
              if (!day) return <Box key={`empty-${idx}`} sx={{ minHeight: 120 }} />;

              const dateISO = `${year}-${String(month).padStart(2, "0")}-${String(
                day
              ).padStart(2, "0")}`;
              const summary = summaryMap.get(dateISO);

              return (
                <Paper
                  key={dateISO}
                  onClick={() => handleOpenDay(day)}
                  elevation={2}
                  sx={{
                    minHeight: 120,
                    p: 1.5,
                    position: "relative",
                    cursor: "pointer",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "space-between",
                    "&:hover": { boxShadow: 6, transform: "translateY(-2px)" },
                  }}
                >
                  {/* Day number */}
                  <Box
                    sx={{
                      position: "absolute",
                      top: 8,
                      right: 8,
                      width: 28,
                      height: 28,
                      borderRadius: "50%",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      fontWeight: 700,
                      backgroundColor: "rgba(0,0,0,0.06)",
                    }}
                  >
                    <Typography variant="caption">{day}</Typography>
                  </Box>

                  {/* Summary */}
                  <Box sx={{ mt: 1 }}>
                    {summary ? (
                      <Stack spacing={0.5}>
                        <Tooltip
                          title={`Check-ins: ${summary.checkIns}`}
                          placement="top"
                        >
                          <Box
                            sx={{
                              px: 0.75,
                              py: 0.4,
                              borderRadius: 999,
                              bgcolor: "rgba(76, 175, 80, 0.12)",
                              fontSize: 12,
                              fontWeight: 600,
                              width: "fit-content",
                            }}
                          >
                            Check-ins: {summary.checkIns}
                          </Box>
                        </Tooltip>
                        <Tooltip
                          title={`Check-outs: ${summary.checkOuts}`}
                          placement="top"
                        >
                          <Box
                            sx={{
                              px: 0.75,
                              py: 0.4,
                              borderRadius: 999,
                              bgcolor: "rgba(244, 67, 54, 0.12)",
                              fontSize: 12,
                              fontWeight: 600,
                              width: "fit-content",
                            }}
                          >
                            Check-outs: {summary.checkOuts}
                          </Box>
                        </Tooltip>
                        <Tooltip
                          title={`Total reservations: ${summary.totalReservations}`}
                          placement="top"
                        >
                          <Box
                            sx={{
                              px: 0.75,
                              py: 0.4,
                              borderRadius: 999,
                              bgcolor: "rgba(33, 150, 243, 0.12)",
                              fontSize: 12,
                              fontWeight: 600,
                              width: "fit-content",
                            }}
                          >
                            Total: {summary.totalReservations}
                          </Box>
                        </Tooltip>
                      </Stack>
                    ) : (
                      <Typography variant="caption" color="text.secondary">
                        No reservations
                      </Typography>
                    )}
                  </Box>

                  <Box sx={{ textAlign: "right" }}>
                    <Typography variant="caption" color="text.secondary">
                      View details
                    </Typography>
                  </Box>
                </Paper>
              );
            })}
          </Box>

          {/* Dialog for day details */}
          <Dialog
            open={!!selectedDate}
            onClose={handleCloseDialog}
            fullWidth
            maxWidth="sm"
          >
            <DialogTitle>
              {selectedDate
                ? `Reservations for ${selectedDate}`
                : "Reservations"}
            </DialogTitle>
            <DialogContent dividers>
              {detailsLoading ? (
                <Box sx={{ display: "flex", justifyContent: "center", p: 3 }}>
                  <CircularProgress />
                </Box>
              ) : detailsError ? (
                <Typography color="error">{detailsError}</Typography>
              ) : dayDetails && dayDetails.length ? (
                <List>
                  {dayDetails.map((r) => (
                    <ListItem key={r.id}>
                      <ListItemText
                        primary={`${r.guestName} — Room ${r.roomNumber}`}
                        secondary={
                          <>
                            {r.checkIn && <div>Check-in: {r.checkIn}</div>}
                            {r.checkOut && <div>Check-out: {r.checkOut}</div>}
                            {r.status && <div>Status: {r.status}</div>}
                          </>
                        }
                      />
                    </ListItem>
                  ))}
                </List>
              ) : (
                <Typography>No reservations found for this date.</Typography>
              )}
            </DialogContent>
          </Dialog>
        </>
      )}
    </Box>
  );
}
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\components\SideBar.jsx =====  
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, Users, Bed, Calendar, DollarSign, MessageSquare, 
  FileText, Shield, Settings, LogOut, ChevronDown, ChevronRight,
  Zap, TrendingUp, AlertTriangle, Briefcase, Globe, UserCheck
} from 'lucide-react';

const SideBar = ({ onLogout }) => {
  const location = useLocation();
  const [automationExpanded, setAutomationExpanded] = useState(false);

  const isActive = (path) => location.pathname === path;
  const isAutomationActive = () => location.pathname.startsWith('/dashboard/automation');

  const menuItems = [
    { path: '/dashboard/overview', icon: Home, label: 'Dashboard' },
    { path: '/dashboard/check-in-out', icon: UserCheck, label: 'Check In/Out' },
    { path: '/dashboard/reservations', icon: Calendar, label: 'Reservations' },
    { path: '/dashboard/guests', icon: Users, label: 'Guests' },
    { path: '/dashboard/rooms', icon: Bed, label: 'Rooms' },
    { path: '/dashboard/billing', icon: DollarSign, label: 'Billing' },
    { path: '/dashboard/guest-requests', icon: MessageSquare, label: 'Guest Requests' },
    { path: '/dashboard/communication', icon: MessageSquare, label: 'Communication' },
    { path: '/dashboard/reporting', icon: FileText, label: 'Reports' },
    { path: '/dashboard/security', icon: Shield, label: 'Security' },
  ];

  const automationItems = [
    { path: '/dashboard/automation', icon: Zap, label: 'Overview' },
    { path: '/dashboard/automation/pricing', icon: TrendingUp, label: 'Dynamic Pricing' },
    { path: '/dashboard/automation/fraud', icon: AlertTriangle, label: 'Fraud Detection' },
    { path: '/dashboard/automation/housekeeping', icon: Briefcase, label: 'Housekeeping' },
    { path: '/dashboard/automation/ota', icon: Globe, label: 'OTA Channels' },
  ];

  return (
    <div className="w-64 bg-black text-white min-h-screen flex flex-col">
      {/* Logo/Header */}
      <div className="p-6 border-b border-gray-800">
        <h1 className="text-2xl font-light tracking-tight">StayOps</h1>
        <p className="text-xs text-gray-400 mt-1">Hotel Management</p>
      </div>

      {/* Navigation */}
      <nav className="flex-1 py-6">
        <ul className="space-y-1 px-3">
          {menuItems.map((item) => (
            <li key={item.path}>
              <Link
                to={item.path}
                className={`flex items-center gap-3 px-3 py-2.5 rounded transition-colors ${
                  isActive(item.path)
                    ? 'bg-white text-black'
                    : 'text-gray-300 hover:bg-gray-900 hover:text-white'
                }`}
              >
                <item.icon size={18} />
                <span className="text-sm">{item.label}</span>
              </Link>
            </li>
          ))}

          {/* Automation Section */}
          <li className="pt-4">
            <button
              onClick={() => setAutomationExpanded(!automationExpanded)}
              className={`w-full flex items-center justify-between px-3 py-2.5 rounded transition-colors ${
                isAutomationActive()
                  ? 'bg-white text-black'
                  : 'text-gray-300 hover:bg-gray-900 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-3">
                <Zap size={18} />
                <span className="text-sm font-medium">Automation</span>
              </div>
              {automationExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
            </button>
            
            {automationExpanded && (
              <ul className="mt-1 ml-6 space-y-1">
                {automationItems.map((item) => (
                  <li key={item.path}>
                    <Link
                      to={item.path}
                      className={`flex items-center gap-3 px-3 py-2 rounded text-sm transition-colors ${
                        isActive(item.path)
                          ? 'bg-gray-800 text-white'
                          : 'text-gray-400 hover:bg-gray-900 hover:text-white'
                      }`}
                    >
                      <item.icon size={16} />
                      <span>{item.label}</span>
                    </Link>
                  </li>
                ))}
              </ul>
            )}
          </li>

          <li className="pt-4">
            <Link
              to="/dashboard/settings"
              className={`flex items-center gap-3 px-3 py-2.5 rounded transition-colors ${
                isActive('/dashboard/settings')
                  ? 'bg-white text-black'
                  : 'text-gray-300 hover:bg-gray-900 hover:text-white'
              }`}
            >
              <Settings size={18} />
              <span className="text-sm">Settings</span>
            </Link>
          </li>
        </ul>
      </nav>

      {/* Logout */}
      <div className="p-3 border-t border-gray-800">
        <button
          onClick={onLogout}
          className="w-full flex items-center gap-3 px-3 py-2.5 rounded text-gray-300 hover:bg-gray-900 hover:text-white transition-colors"
        >
          <LogOut size={18} />
          <span className="text-sm">Logout</span>
        </button>
      </div>
    </div>
  );
};

export default SideBar;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\AnalyticsAutomation.jsx =====  
import React, { useState, useEffect } from 'react';
import { BarChart3, TrendingUp, Calendar, Download, Mail, Clock } from 'lucide-react';
import { getDailyMetrics } from '../api/metrics';

const AnalyticsAutomation = () => {
  const [loading, setLoading] = useState(false);
  const [selectedReport, setSelectedReport] = useState('daily');
  const [dateRange, setDateRange] = useState({
    startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0]
  });
  const [scheduledReports, setScheduledReports] = useState([
    {
      id: 1,
      name: 'Daily Operations Summary',
      type: 'DAILY',
      schedule: 'Every day at 6:00 AM',
      recipients: ['manager@hotel.com'],
      status: 'ACTIVE'
    },
    {
      id: 2,
      name: 'Weekly Revenue Report',
      type: 'WEEKLY',
      schedule: 'Every Monday at 9:00 AM',
      recipients: ['finance@hotel.com', 'director@hotel.com'],
      status: 'ACTIVE'
    }
  ]);

  const reportTypes = [
    { value: 'daily', label: 'Daily Summary', icon: Calendar },
    { value: 'occupancy', label: 'Occupancy Report', icon: TrendingUp },
    { value: 'revenue', label: 'Revenue Analysis', icon: BarChart3 },
    { value: 'automation', label: 'Automation Metrics', icon: Clock },
  ];

  const handleGenerateReport = async () => {
    try {
      setLoading(true);
      // This would connect to your analytics API
      alert(`Generating ${selectedReport} report for ${dateRange.startDate} to ${dateRange.endDate}`);
      // await generateReport(selectedReport, dateRange);
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report');
    } finally {
      setLoading(false);
    }
  };

  const handleScheduleReport = () => {
    alert('Report scheduling dialog would open here');
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Analytics & Reporting
          </h1>
          <p className="text-sm text-gray-500">
            Automated report generation and scheduling
          </p>
        </div>

        {/* Report Generation */}
        <div className="mb-12">
          <h2 className="text-2xl font-light mb-6">Generate Report</h2>
          
          <div className="border border-gray-200 p-8">
            <div className="grid grid-cols-4 gap-4 mb-6">
              {reportTypes.map(type => (
                <button
                  key={type.value}
                  onClick={() => setSelectedReport(type.value)}
                  className={`p-6 border transition-colors ${
                    selectedReport === type.value
                      ? 'border-black bg-gray-50'
                      : 'border-gray-200 hover:border-black'
                  }`}
                >
                  <type.icon size={24} className="mx-auto mb-3" />
                  <div className="text-sm font-medium">{type.label}</div>
                </button>
              ))}
            </div>

            <div className="grid grid-cols-2 gap-6 mb-6">
              <div>
                <label className="block text-sm font-medium mb-2">Start Date</label>
                <input
                  type="date"
                  value={dateRange.startDate}
                  onChange={(e) => setDateRange({...dateRange, startDate: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">End Date</label>
                <input
                  type="date"
                  value={dateRange.endDate}
                  onChange={(e) => setDateRange({...dateRange, endDate: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                />
              </div>
            </div>

            <div className="flex gap-3">
              <button
                onClick={handleGenerateReport}
                disabled={loading}
                className="flex-1 px-6 py-4 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300 flex items-center justify-center gap-2"
              >
                <Download size={18} />
                {loading ? 'Generating...' : 'Generate Report'}
              </button>
              <button
                onClick={handleScheduleReport}
                className="px-6 py-4 border border-gray-200 text-black text-sm hover:border-black transition-colors flex items-center gap-2"
              >
                <Clock size={18} />
                Schedule
              </button>
            </div>
          </div>
        </div>

        {/* Scheduled Reports */}
        <div className="mb-12">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-light">Scheduled Reports</h2>
            <button
              onClick={handleScheduleReport}
              className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
            >
              New Schedule
            </button>
          </div>

          <div className="space-y-4">
            {scheduledReports.map(report => (
              <div key={report.id} className="border border-gray-200 p-6">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      <BarChart3 size={20} />
                      <div>
                        <h3 className="font-medium">{report.name}</h3>
                        <div className="text-sm text-gray-500 mt-1">
                          {report.schedule}
                        </div>
                      </div>
                      <span className="px-3 py-1 text-xs bg-green-100 text-green-800">
                        {report.status}
                      </span>
                    </div>

                    <div className="flex items-center gap-2 text-sm">
                      <Mail size={16} className="text-gray-400" />
                      <span className="text-gray-600">
                        Recipients: {report.recipients.join(', ')}
                      </span>
                    </div>
                  </div>

                  <div className="flex gap-2">
                    <button className="px-4 py-2 border border-gray-200 hover:border-black transition-colors text-sm">
                      Edit
                    </button>
                    <button className="px-4 py-2 border border-gray-200 hover:border-red-500 hover:text-red-500 transition-colors text-sm">
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Report Templates */}
        <div>
          <h2 className="text-2xl font-light mb-6">Report Templates</h2>
          
          <div className="grid grid-cols-3 gap-6">
            <div className="border border-gray-200 p-6">
              <h3 className="font-medium mb-2">Daily Operations</h3>
              <p className="text-sm text-gray-600 mb-4">
                Arrivals, departures, occupancy, and revenue summary
              </p>
              <ul className="text-xs text-gray-500 space-y-1 mb-4">
                <li>✓ Arrival/Departure counts</li>
                <li>✓ Occupancy percentage</li>
                <li>✓ Daily revenue</li>
                <li>✓ Outstanding tasks</li>
              </ul>
              <button className="w-full px-4 py-2 border border-gray-200 hover:border-black transition-colors text-sm">
                Use Template
              </button>
            </div>

            <div className="border border-gray-200 p-6">
              <h3 className="font-medium mb-2">Revenue Analysis</h3>
              <p className="text-sm text-gray-600 mb-4">
                Detailed breakdown of revenue by source and room type
              </p>
              <ul className="text-xs text-gray-500 space-y-1 mb-4">
                <li>✓ Revenue by room type</li>
                <li>✓ Channel performance</li>
                <li>✓ ADR & RevPAR</li>
                <li>✓ Comparison charts</li>
              </ul>
              <button className="w-full px-4 py-2 border border-gray-200 hover:border-black transition-colors text-sm">
                Use Template
              </button>
            </div>

            <div className="border border-gray-200 p-6">
              <h3 className="font-medium mb-2">Automation Metrics</h3>
              <p className="text-sm text-gray-600 mb-4">
                Performance summary of all automated processes
              </p>
              <ul className="text-xs text-gray-500 space-y-1 mb-4">
                <li>✓ Tasks automated</li>
                <li>✓ Time saved</li>
                <li>✓ Error rates</li>
                <li>✓ Cost savings</li>
              </ul>
              <button className="w-full px-4 py-2 border border-gray-200 hover:border-black transition-colors text-sm">
                Use Template
              </button>
            </div>
          </div>
        </div>

        {/* Export Options */}
        <div className="mt-12 border border-gray-200 p-6">
          <h3 className="font-medium mb-4">Export Settings</h3>
          <div className="grid grid-cols-3 gap-4">
            <div className="flex items-center gap-2">
              <input type="checkbox" id="pdf" defaultChecked className="w-4 h-4" />
              <label htmlFor="pdf" className="text-sm">PDF Format</label>
            </div>
            <div className="flex items-center gap-2">
              <input type="checkbox" id="excel" className="w-4 h-4" />
              <label htmlFor="excel" className="text-sm">Excel Format</label>
            </div>
            <div className="flex items-center gap-2">
              <input type="checkbox" id="csv" className="w-4 h-4" />
              <label htmlFor="csv" className="text-sm">CSV Format</label>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsAutomation;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\AutomationDashboard.jsx =====  
import React, { useState, useEffect } from 'react';
import { Settings, Zap, AlertTriangle, DollarSign, Calendar, Briefcase, RefreshCw } from 'lucide-react';
import {
  getAutomationStatus,
  getAutomationConfig,
  updateAutomationConfig,
  triggerNoShowProcessing,
  triggerNightlyAudit,
  triggerPriceUpdate
} from '../api/automation';
import { getTodayMetrics } from '../api/metrics';

const AutomationDashboard = () => {
  const [loading, setLoading] = useState(false);
  const [config, setConfig] = useState(null);
  const [status, setStatus] = useState(null);
  const [metrics, setMetrics] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const [configData, statusData, metricsData] = await Promise.all([
        getAutomationConfig(),
        getAutomationStatus(),
        getTodayMetrics()
      ]);
      setConfig(configData);
      setStatus(statusData);
      setMetrics(metricsData);
    } catch (error) {
      console.error('Error loading dashboard:', error);
      alert('Failed to load automation data');
    } finally {
      setLoading(false);
    }
  };

  const handleToggleAutomation = async (key, value) => {
    try {
      setLoading(true);
      const updates = { [key]: value };
      const updated = await updateAutomationConfig(updates);
      setConfig(updated);
      alert('Configuration updated successfully');
    } catch (error) {
      console.error('Error updating config:', error);
      alert('Failed to update configuration');
    } finally {
      setLoading(false);
    }
  };

  const handleManualTrigger = async (triggerType) => {
    if (!window.confirm(`Confirm manual trigger: ${triggerType}?`)) return;
    
    try {
      setLoading(true);
      let result;
      
      switch(triggerType) {
        case 'noshow':
          result = await triggerNoShowProcessing();
          break;
        case 'audit':
          result = await triggerNightlyAudit();
          break;
        case 'pricing':
          result = await triggerPriceUpdate();
          break;
        default:
          throw new Error('Unknown trigger type');
      }
      
      alert(result.message || 'Process completed successfully');
      loadDashboardData();
    } catch (error) {
      console.error('Error triggering process:', error);
      alert('Failed to trigger process');
    } finally {
      setLoading(false);
    }
  };

  if (loading && !config) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Loading automation dashboard...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Automation Control Center
          </h1>
          <p className="text-sm text-gray-500">
            Manage automated processes and workflows
          </p>
        </div>

        {/* Quick Stats */}
        {metrics && (
          <div className="grid grid-cols-4 gap-6 mb-12">
            <div className="border border-gray-200 p-6">
              <div className="flex items-center gap-3 mb-3">
                <Zap size={24} className="text-black" />
                <h3 className="text-sm font-medium">Tasks Automated</h3>
              </div>
              <div className="text-3xl font-light">{metrics.tasksAutomatedToday || 0}</div>
            </div>
            
            <div className="border border-gray-200 p-6">
              <div className="flex items-center gap-3 mb-3">
                <DollarSign size={24} className="text-black" />
                <h3 className="text-sm font-medium">Price Updates</h3>
              </div>
              <div className="text-3xl font-light">{metrics.priceUpdatesToday || 0}</div>
            </div>
            
            <div className="border border-gray-200 p-6">
              <div className="flex items-center gap-3 mb-3">
                <AlertTriangle size={24} className="text-black" />
                <h3 className="text-sm font-medium">Fraud Alerts</h3>
              </div>
              <div className="text-3xl font-light">{metrics.fraudAlertsToday || 0}</div>
            </div>
            
            <div className="border border-gray-200 p-6">
              <div className="flex items-center gap-3 mb-3">
                <Briefcase size={24} className="text-black" />
                <h3 className="text-sm font-medium">Housekeeping</h3>
              </div>
              <div className="text-3xl font-light">{metrics.housekeepingTasksToday || 0}</div>
            </div>
          </div>
        )}

        {/* Tabs */}
        <div className="flex mb-12 gap-0 flex-wrap">
          {[
            { key: 'overview', label: 'Overview', icon: Settings },
            { key: 'pricing', label: 'Dynamic Pricing', icon: DollarSign },
            { key: 'fraud', label: 'Fraud Detection', icon: AlertTriangle },
            { key: 'housekeeping', label: 'Housekeeping', icon: Briefcase },
            { key: 'triggers', label: 'Manual Triggers', icon: Zap }
          ].map(tab => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`px-6 py-3 text-sm border border-gray-200 transition-colors flex items-center gap-2 ${
                activeTab === tab.key 
                  ? 'bg-black text-white' 
                  : 'bg-white text-black hover:border-black'
              }`}
            >
              <tab.icon size={16} />
              {tab.label}
            </button>
          ))}
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && config && (
          <div>
            <h2 className="text-2xl font-light mb-8">Automation Configuration</h2>
            
            <div className="space-y-6">
              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">Dynamic Pricing</h3>
                    <p className="text-sm text-gray-500">Automatically adjust room rates based on demand</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('dynamicPricingEnabled', !config.dynamicPricingEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.dynamicPricingEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.dynamicPricingEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
                {config.dynamicPricingEnabled && (
                  <div className="text-sm text-gray-600">
                    Update Interval: Every {config.pricingUpdateIntervalHours || 1} hours
                  </div>
                )}
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">Fraud Detection</h3>
                    <p className="text-sm text-gray-500">Monitor suspicious activities and transactions</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('fraudDetectionEnabled', !config.fraudDetectionEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.fraudDetectionEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.fraudDetectionEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">Automated Housekeeping</h3>
                    <p className="text-sm text-gray-500">Auto-assign cleaning tasks after checkout</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('autoHousekeepingEnabled', !config.autoHousekeepingEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.autoHousekeepingEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.autoHousekeepingEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">OTA Channel Sync</h3>
                    <p className="text-sm text-gray-500">Sync availability and rates with booking channels</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('otaSyncEnabled', !config.otaSyncEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.otaSyncEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.otaSyncEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">Auto Room Assignment</h3>
                    <p className="text-sm text-gray-500">Automatically assign rooms to new reservations</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('autoRoomAssignmentEnabled', !config.autoRoomAssignmentEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.autoRoomAssignmentEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.autoRoomAssignmentEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="font-medium mb-1">Nightly Audit</h3>
                    <p className="text-sm text-gray-500">Run automated audit at end of day</p>
                  </div>
                  <button
                    onClick={() => handleToggleAutomation('nightlyAuditEnabled', !config.nightlyAuditEnabled)}
                    className={`px-6 py-2 text-sm transition-colors ${
                      config.nightlyAuditEnabled 
                        ? 'bg-black text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {config.nightlyAuditEnabled ? 'Enabled' : 'Disabled'}
                  </button>
                </div>
                {config.nightlyAuditEnabled && config.nightlyAuditTime && (
                  <div className="text-sm text-gray-600">
                    Scheduled at: {config.nightlyAuditTime}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Manual Triggers Tab */}
        {activeTab === 'triggers' && (
          <div>
            <h2 className="text-2xl font-light mb-8">Manual Process Triggers</h2>
            
            <div className="space-y-6">
              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium mb-2">No-Show Processing</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Process all no-show reservations and update room status
                    </p>
                  </div>
                  <button
                    onClick={() => handleManualTrigger('noshow')}
                    disabled={loading}
                    className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300"
                  >
                    <RefreshCw size={16} className="inline mr-2" />
                    Run Now
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium mb-2">Nightly Audit</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Run end-of-day audit and generate reports
                    </p>
                  </div>
                  <button
                    onClick={() => handleManualTrigger('audit')}
                    disabled={loading}
                    className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300"
                  >
                    <RefreshCw size={16} className="inline mr-2" />
                    Run Now
                  </button>
                </div>
              </div>

              <div className="border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium mb-2">Dynamic Price Update</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Recalculate and update all room prices based on current rules
                    </p>
                  </div>
                  <button
                    onClick={() => handleManualTrigger('pricing')}
                    disabled={loading}
                    className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300"
                  >
                    <RefreshCw size={16} className="inline mr-2" />
                    Run Now
                  </button>
                </div>
              </div>
            </div>

            {status && (
              <div className="mt-12 border border-gray-200 p-6">
                <h3 className="font-medium mb-4">System Status</h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-500">Last Audit Run:</span>
                    <div className="font-medium">{status.lastAuditRun || 'Never'}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">Last Price Update:</span>
                    <div className="font-medium">{status.lastPriceUpdate || 'Never'}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">Active Automations:</span>
                    <div className="font-medium">{status.activeAutomations || 0}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">System Status:</span>
                    <div className="font-medium text-green-600">{status.systemStatus || 'Operational'}</div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Other tabs content would go here */}
        {activeTab === 'pricing' && (
          <div className="text-center py-20 border border-dashed border-gray-300">
            <h3 className="text-lg font-medium mb-2">Dynamic Pricing Management</h3>
            <p className="text-sm text-gray-500">
              View and manage pricing rules (Feature in development)
            </p>
          </div>
        )}

        {activeTab === 'fraud' && (
          <div className="text-center py-20 border border-dashed border-gray-300">
            <h3 className="text-lg font-medium mb-2">Fraud Detection Alerts</h3>
            <p className="text-sm text-gray-500">
              View and review fraud alerts (Feature in development)
            </p>
          </div>
        )}

        {activeTab === 'housekeeping' && (
          <div className="text-center py-20 border border-dashed border-gray-300">
            <h3 className="text-lg font-medium mb-2">Housekeeping Task Management</h3>
            <p className="text-sm text-gray-500">
              Manage automated housekeeping tasks (Feature in development)
            </p>
          </div>
        )}

      </div>
    </div>
  );
};

export default AutomationDashboard;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Billing.jsx =====  
import React, { useState } from 'react';

const Billing = ({ bills = [] }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterType, setFilterType] = useState('all');

  const getBillIcon = (type) => {
    switch (type) {
      case 'room': return '🏨';
      case 'service': return '🛎️';
      case 'partial': return '📋';
      case 'restaurant': return '🍽️';
      default: return '💳';
    }
  };

  const handlePayNow = (billId) => {
    console.log(`Processing payment for bill ${billId}`);
  };

  const handleSendReminder = (billId) => {
    console.log(`Sending reminder for bill ${billId}`);
  };

  const handleViewDetails = (billId) => {
    console.log(`Viewing details for bill ${billId}`);
  };

  const handlePrintBill = (billId) => {
    console.log(`Printing bill ${billId}`);
  };

  const filteredBills = bills.filter(bill => {
    const matchesSearch = bill.guestName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         bill.roomNumber.includes(searchTerm) ||
                         bill.id.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = filterStatus === 'all' || bill.status === filterStatus;
    const matchesType = filterType === 'all' || bill.billType === filterType;
    return matchesSearch && matchesStatus && matchesType;
  });

  const totalRevenue = bills.filter(b => b.status === 'paid').reduce((sum, bill) => sum + bill.amount, 0);
  const pendingAmount = bills.filter(b => b.status === 'pending').reduce((sum, bill) => sum + bill.amount, 0);
  const overdueAmount = bills.filter(b => b.status === 'overdue').reduce((sum, bill) => sum + bill.amount, 0);

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="mb-16">
          <h1 className="text-5xl font-light tracking-tight text-black mb-3">
            Billing
          </h1>
          <p className="text-gray-500 text-sm">
            Manage payments and transactions
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-4 gap-6 mb-16">
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Revenue</div>
            <div className="text-3xl font-light">${totalRevenue.toFixed(2)}</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Pending</div>
            <div className="text-3xl font-light">${pendingAmount.toFixed(2)}</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Overdue</div>
            <div className="text-3xl font-light">${overdueAmount.toFixed(2)}</div>
          </div>

          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Total Bills</div>
            <div className="text-3xl font-light">{bills.length}</div>
          </div>
        </div>

        {/* Controls */}
        <div className="flex gap-4 mb-12">
          <input
            type="text"
            placeholder="Search bills..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
          />

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Status</option>
            <option value="paid">Paid</option>
            <option value="pending">Pending</option>
            <option value="partial">Partial</option>
            <option value="overdue">Overdue</option>
          </select>

          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Types</option>
            <option value="room">Room</option>
            <option value="service">Service</option>
            <option value="partial">Partial</option>
            <option value="restaurant">Restaurant</option>
          </select>

          <button className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors">
            New Bill
          </button>
        </div>

        {/* Bills List */}
        <div className="space-y-4">
          {filteredBills.length === 0 ? (
            <div className="py-24 text-center">
              <p className="text-gray-400 text-sm">No bills found</p>
            </div>
          ) : (
            filteredBills.map((bill) => (
              <div 
                key={bill.id} 
                className="border border-gray-200 hover:border-black transition-colors group"
              >
                <div className="p-8">
                  <div className="flex items-start justify-between mb-6">
                    <div className="flex-1">
                      <div className="flex items-center gap-4 mb-2">
                        <h3 className="text-xl font-light tracking-tight">
                          {bill.guestName}
                        </h3>
                        <span className="text-xs text-gray-400">
                          {bill.id}
                        </span>
                      </div>
                      <p className="text-sm text-gray-500">
                        Room {bill.roomNumber} · {bill.billType}
                      </p>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-3xl font-light mb-2">
                        ${bill.amount.toFixed(2)}
                      </div>
                      <span className={`inline-block px-3 py-1 text-xs ${
                        bill.status === 'paid' ? 'bg-black text-white' : 
                        bill.status === 'overdue' ? 'bg-gray-900 text-white' : 
                        bill.status === 'partial' ? 'bg-gray-300 text-black' : 
                        'border border-gray-300 text-black'
                      }`}>
                        {bill.status}
                      </span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-4 gap-8 text-sm mb-6 pb-6 border-b border-gray-100">
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Check In</div>
                      <div className="text-gray-900">{bill.checkIn}</div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Check Out</div>
                      <div className="text-gray-900">{bill.checkOut}</div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Created</div>
                      <div className="text-gray-900">{bill.createdDate}</div>
                    </div>
                    {bill.paymentMethod && (
                      <div>
                        <div className="text-xs text-gray-400 mb-1">Payment</div>
                        <div className="text-gray-900">{bill.paymentMethod}</div>
                      </div>
                    )}
                  </div>

                  {/* Bill Items */}
                  <div className="mb-6">
                    <div className="text-xs text-gray-400 mb-3 uppercase tracking-wider">Items</div>
                    <div className="space-y-2">
                      {bill.items.map((item, index) => (
                        <div key={index} className="flex justify-between text-sm">
                          <span className="text-gray-600">{item.description}</span>
                          <span className="text-gray-900">${item.amount.toFixed(2)}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Actions */}
                  <div className="flex gap-3">
                    {(bill.status === 'pending' || bill.status === 'partial') && (
                      <button 
                        onClick={() => handlePayNow(bill.id)}
                        className="px-4 py-2 bg-black text-white text-xs hover:bg-gray-900 transition-colors"
                      >
                        Pay Now
                      </button>
                    )}
                    {bill.status === 'overdue' && (
                      <button 
                        onClick={() => handleSendReminder(bill.id)}
                        className="px-4 py-2 bg-gray-900 text-white text-xs hover:bg-black transition-colors"
                      >
                        Send Reminder
                      </button>
                    )}
                    <button 
                      onClick={() => handlePrintBill(bill.id)}
                      className="px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
                    >
                      Print
                    </button>
                    <button 
                      onClick={() => handleViewDetails(bill.id)}
                      className="px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
                    >
                      Details
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

// Demo with sample data
const mockBills = [
  {
    id: 'BILL001',
    guestName: 'John Smith',
    roomNumber: '101',
    checkIn: '2024-01-10',
    checkOut: '2024-01-15',
    billType: 'room',
    amount: 750.00,
    status: 'paid',
    paymentMethod: 'Credit Card',
    createdDate: '2024-01-15 14:30',
    items: [
      { description: 'Room Charges (5 nights)', amount: 500.00 },
      { description: 'Room Service', amount: 150.00 },
      { description: 'Minibar', amount: 75.00 },
      { description: 'Tax', amount: 25.00 }
    ]
  },
  {
    id: 'BILL002',
    guestName: 'Emily Johnson',
    roomNumber: '205',
    checkIn: '2024-01-12',
    checkOut: '2024-01-18',
    billType: 'service',
    amount: 320.50,
    status: 'pending',
    paymentMethod: null,
    createdDate: '2024-01-18 11:15',
    items: [
      { description: 'Spa Services', amount: 200.00 },
      { description: 'Restaurant', amount: 95.50 },
      { description: 'Tax', amount: 25.00 }
    ]
  },
  {
    id: 'BILL003',
    guestName: 'Michael Brown',
    roomNumber: '301',
    checkIn: '2024-01-14',
    checkOut: '2024-01-16',
    billType: 'room',
    amount: 1250.00,
    status: 'overdue',
    paymentMethod: null,
    createdDate: '2024-01-16 16:45',
    items: [
      { description: 'Suite Charges (2 nights)', amount: 1000.00 },
      { description: 'Conference Room', amount: 150.00 },
      { description: 'Business Services', amount: 50.00 },
      { description: 'Tax', amount: 50.00 }
    ]
  },
  {
    id: 'BILL004',
    guestName: 'Sarah Davis',
    roomNumber: '102',
    checkIn: '2024-01-13',
    checkOut: '2024-01-20',
    billType: 'partial',
    amount: 450.25,
    status: 'partial',
    paymentMethod: 'Cash',
    createdDate: '2024-01-17 09:30',
    items: [
      { description: 'Additional Services', amount: 300.00 },
      { description: 'Laundry', amount: 125.25 },
      { description: 'Tax', amount: 25.00 }
    ]
  }
];

export default () => <Billing bills={mockBills} />;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\CheckInOut.jsx =====  
import React, { useState, useEffect } from 'react';
import { BrowserQRCodeReader } from '@zxing/browser';

// QR Scanner Component
const QRScanner = ({ onGuestDataReceived, onClose }) => {
  const [result, setResult] = useState("");
  const [guestData, setGuestData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [cameraError, setCameraError] = useState(null);
  const [scanning, setScanning] = useState(false);
  const videoRef = React.useRef(null);
  const codeReaderRef = React.useRef(null);
  const controlsRef = React.useRef(null);

  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8080";

  const fetchGuestData = async (guestId) => {
    try {
      setLoading(true);
      setError(null);
      setGuestData(null);

      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Guest not found (${response.status}): ${errorText}`);
      }

      const data = await response.json();
      setGuestData(data);
      
      if (onGuestDataReceived) {
        onGuestDataReceived(data);
      }
      
      stopCamera();
    } catch (err) {
      console.error("Error fetching guest data:", err);
      setError(err.message || "Failed to fetch guest data");
    } finally {
      setLoading(false);
    }
  };

  const startCamera = async () => {
    try {
      setError(null);
      setCameraError(null);
      setGuestData(null);
      setResult("");
      setScanning(true);

      const codeReader = new BrowserQRCodeReader();
      codeReaderRef.current = codeReader;

      let lastScannedCode = '';
      let lastScanTime = 0;
      const SCAN_COOLDOWN = 2000;

      controlsRef.current = await codeReader.decodeFromVideoDevice(
        null,
        videoRef.current,
        (res, err) => {
          if (res) {
            const qrValue = res.getText();
            const currentTime = Date.now();
            
            if (qrValue === lastScannedCode && (currentTime - lastScanTime) < SCAN_COOLDOWN) {
              return;
            }
            
            console.log("QR Detected:", qrValue);
            setResult(qrValue);
            lastScannedCode = qrValue;
            lastScanTime = currentTime;
            
            setTimeout(() => {
              fetchGuestData(qrValue.trim());
            }, 500);
          }
          if (err && !(err.name === "NotFoundException")) {
            console.error("QR scan error:", err);
          }
        }
      );
    } catch (err) {
      console.error("Camera error:", err);
      setCameraError("Unable to access camera. Please check permissions.");
      setScanning(false);
    }
  };

  const stopCamera = () => {
    if (controlsRef.current) {
      controlsRef.current.stop();
      controlsRef.current = null;
    }
    setScanning(false);
  };

  React.useEffect(() => {
    return () => stopCamera();
  }, []);

  return (
    <div className="w-full max-w-lg">
      {!guestData && (
        <div>
          <div className="border-2 border-black p-6 text-center mb-6 bg-white">
            {!result ? (
              <div>
                <video
                  ref={videoRef}
                  autoPlay
                  playsInline
                  muted
                  className="w-full max-w-sm max-h-80 border-2 border-black bg-gray-100 mb-4"
                />
                <div className="flex gap-3 justify-center">
                  <button
                    onClick={startCamera}
                    className="px-6 py-3 bg-black text-white text-sm font-semibold uppercase tracking-wide hover:bg-gray-900 transition-colors"
                  >
                    Start Camera
                  </button>
                  <button
                    onClick={stopCamera}
                    className="px-6 py-3 border-2 border-black bg-white text-black text-sm font-semibold uppercase tracking-wide hover:bg-gray-100 transition-colors"
                  >
                    Stop Camera
                  </button>
                </div>
              </div>
            ) : (
              <div className="py-5">
                <div className="text-base font-semibold text-black mb-2">
                  ✓ QR Code Detected
                </div>
                <div className="text-sm font-mono">
                  {result}
                </div>
              </div>
            )}
          </div>

          {cameraError && (
            <div className="p-4 border-2 border-red-600 bg-red-50 mb-4 text-sm text-red-900">
              ⚠ {cameraError}
            </div>
          )}
          
          {error && (
            <div className="p-4 border-2 border-red-600 bg-red-50 mb-4 text-sm text-red-900">
              ⚠ {error}
            </div>
          )}
          
          {loading && (
            <div className="text-center py-5 text-base font-semibold">
              Loading guest data...
            </div>
          )}
        </div>
      )}

      {guestData && (
        <div className="border-2 border-black p-6 bg-gray-50 mb-5">
          <h3 className="mb-4 text-lg font-semibold uppercase tracking-wide">
            Guest Details Found
          </h3>
          
          {(guestData.imageUrl || guestData.qrCodeBase64) && (
            <div className="flex gap-5 mb-5 justify-center">
              {guestData.imageUrl && (
                <div className="text-center">
                  <img
                    src={guestData.imageUrl}
                    alt="Guest"
                    className="w-24 h-24 object-cover border-2 border-black"
                  />
                  <div className="mt-2 text-xs font-semibold">Profile</div>
                </div>
              )}

              {guestData.qrCodeBase64 && (
                <div className="text-center">
                  <img
                    src={guestData.qrCodeBase64}
                    alt="QR Code"
                    className="w-24 h-24 border-2 border-black"
                  />
                  <div className="mt-2 text-xs font-semibold">QR Code</div>
                </div>
              )}
            </div>
          )}

          <div className="text-sm space-y-2">
            <div><strong>Name:</strong> {guestData.fullName}</div>
            <div><strong>Email:</strong> {guestData.email}</div>
            <div><strong>Phone:</strong> {guestData.phone}</div>
            <div><strong>Nationality:</strong> {guestData.nationality}</div>
            <div><strong>{guestData.identityType}:</strong> {guestData.identityNumber}</div>
          </div>

          <button
            onClick={() => {
              stopCamera();
              if (onClose) onClose();
            }}
            className="w-full mt-4 px-6 py-3 text-sm font-semibold border-2 border-black bg-black text-white uppercase tracking-wide hover:bg-gray-900 transition-colors"
          >
            Use This Guest Data
          </button>
        </div>
      )}
    </div>
  );
};

// QR Scanner Modal Component
const QRScannerModal = ({ isOpen, onClose, onGuestDataReceived, title }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50">
      <div className="bg-white p-8 border-4 border-black max-w-2xl w-11/12 max-h-screen overflow-auto text-center">
        <h3 className="text-xl font-semibold mb-6 uppercase tracking-wide">
          {title}
        </h3>
        
        <QRScanner 
          onGuestDataReceived={onGuestDataReceived}
          onClose={onClose}
        />
        
        <button
          onClick={onClose}
          className="px-6 py-3 text-sm font-semibold border-2 border-black bg-white text-black uppercase tracking-wide hover:bg-gray-100 transition-colors mt-4"
        >
          Cancel
        </button>
      </div>
    </div>
  );
};

const CheckInOut = () => {
  const [loading, setLoading] = useState(false);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [scanningFor, setScanningFor] = useState('');
  
  const [formData, setFormData] = useState({
    roomNumber: '',
    guestName: '',
    reservationId: '',
    action: 'guest-checkin'
  });

  const [recentActivity, setRecentActivity] = useState([]);

  useEffect(() => {
    loadRecentActivity();
  }, []);

  const loadRecentActivity = async () => {
    try {
      const response = await fetch('/api/activity/recent');
      const data = await response.json();
      setRecentActivity(data);
    } catch (error) {
      console.error('Failed to load recent activity:', error);
    }
  };

  const handleQRScan = (guestData) => {
    if (guestData) {
      setFormData({
        ...formData,
        guestName: guestData.fullName,
      });

      alert(`Guest details loaded: ${guestData.fullName}`);
      setShowQRScanner(false);
      setScanningFor('');
    }
  };

  const startQRScan = (type) => {
    setScanningFor(type);
    setShowQRScanner(true);
  };

  const stayOpsAPI = {
    processAction: async (actionData) => {
      const endpoint = `/api/${actionData.action.replace('-', '/')}`;
      
      const payload = {
        roomNumber: actionData.roomNumber,
        guestName: actionData.guestName || null,
        reservationId: actionData.reservationId || null,
        timestamp: new Date().toISOString(),
        staff: 'Current User'
      };

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status} ${response.statusText}`);
      }

      return await response.json();
    }
  };

  const handleSubmit = async () => {
    if (!formData.roomNumber.trim()) {
      alert('Room number is required');
      return;
    }

    if (formData.action.includes('guest') && !formData.guestName.trim()) {
      alert('Guest name is required for guest operations');
      return;
    }

    setLoading(true);
    
    try {
      const response = await stayOpsAPI.processAction(formData);
      
      if (response.success) {
        await loadRecentActivity();
        
        setFormData({
          roomNumber: '',
          guestName: '',
          reservationId: '',
          action: 'guest-checkin'
        });
        
        alert(response.message || 'Operation completed successfully');
      }
    } catch (error) {
      console.error('Operation failed:', error);
      alert('Operation failed. Please try again.');
    }
    
    setLoading(false);
  };

  const getStatusIndicator = (status) => {
    return status === 'completed' ? '●' : '○';
  };

  return (
    <div className="min-h-screen bg-white text-black">
      <div className="max-w-7xl mx-auto px-8 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          
          {/* Left Column - Operation Form */}
          <div>
            {/* Header */}
            <div className="border-b-4 border-black pb-6 mb-12">
              <h1 className="text-5xl font-light tracking-tight mb-3">
                Check-In/Out
              </h1>
              <p className="text-sm text-gray-500">
                Terminal Operations
              </p>
            </div>

            {/* Operation Selection */}
            <div className="mb-12">
              <label className="block text-xs text-gray-500 mb-4 uppercase tracking-wide">
                Operation Type
              </label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  { value: 'guest-checkin', label: 'Check In' },
                  { value: 'guest-checkout', label: 'Check Out' },
                  { value: 'room-cleaning', label: 'Cleaning' },
                  { value: 'room-maintenance', label: 'Maintenance' }
                ].map(option => (
                  <label 
                    key={option.value}
                    className={`flex items-center justify-center gap-2 cursor-pointer px-4 py-3 border-2 border-black transition-colors ${
                      formData.action === option.value 
                        ? 'bg-black text-white' 
                        : 'bg-white text-black hover:bg-gray-50'
                    }`}
                  >
                    <input
                      type="radio"
                      name="action"
                      value={option.value}
                      checked={formData.action === option.value}
                      onChange={(e) => setFormData({...formData, action: e.target.value})}
                      className="hidden"
                    />
                    <span className="text-sm font-semibold uppercase tracking-wide">
                      {option.label}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            {/* Form Fields */}
            <div className="mb-12">
              <div className="mb-6">
                <label className="block text-xs text-gray-500 mb-2 uppercase tracking-wide">
                  Room Number *
                </label>
                <input
                  type="text"
                  value={formData.roomNumber}
                  onChange={(e) => setFormData({...formData, roomNumber: e.target.value.toUpperCase()})}
                  className="w-full px-4 py-4 border-2 border-black bg-white text-black text-center text-2xl font-semibold font-mono focus:outline-none focus:border-gray-600"
                  placeholder="301"
                  maxLength="10"
                />
              </div>

              {formData.action.includes('guest') && (
                <>
                  <div className="mb-6">
                    <label className="block text-xs text-gray-500 mb-2 uppercase tracking-wide">
                      Guest Name *
                    </label>
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value={formData.guestName}
                        onChange={(e) => setFormData({...formData, guestName: e.target.value})}
                        className="flex-1 px-4 py-3 border-2 border-black bg-white text-black text-sm focus:outline-none focus:border-gray-600"
                        placeholder="John Smith"
                      />
                      <button
                        type="button"
                        onClick={() => startQRScan('guest')}
                        className="px-6 py-3 text-sm font-semibold border-2 border-black bg-white text-black uppercase tracking-wide hover:bg-black hover:text-white transition-colors"
                      >
                        Scan
                      </button>
                    </div>
                  </div>

                  <div className="mb-6">
                    <label className="block text-xs text-gray-500 mb-2 uppercase tracking-wide">
                      Reservation ID
                    </label>
                    <input
                      type="text"
                      value={formData.reservationId}
                      onChange={(e) => setFormData({...formData, reservationId: e.target.value.toUpperCase()})}
                      className="w-full px-4 py-3 border-2 border-black bg-white text-black font-mono text-sm focus:outline-none focus:border-gray-600"
                      placeholder="RES001"
                    />
                  </div>
                </>
              )}
            </div>

            {/* Submit Button */}
            <button
              onClick={handleSubmit}
              disabled={loading}
              className={`w-full px-6 py-4 text-sm font-semibold uppercase tracking-wide transition-colors ${
                loading
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-black text-white hover:bg-gray-900'
              }`}
            >
              {loading ? 'Processing...' : 'Execute Operation'}
            </button>
          </div>

          {/* Right Column - Activity Log */}
          <div>
            <div className="border-b-4 border-black pb-4 mb-6">
              <h2 className="text-2xl font-light tracking-tight">
                Activity Log
              </h2>
            </div>

            <div className="border-2 border-black max-h-96 overflow-y-auto">
              {recentActivity.length === 0 ? (
                <div className="p-12 text-center text-gray-400 italic text-sm">
                  No recent activity
                </div>
              ) : (
                recentActivity.map((activity, index) => (
                  <div 
                    key={activity.id} 
                    className={`p-4 ${
                      index < recentActivity.length - 1 ? 'border-b border-gray-200' : ''
                    } ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}
                  >
                    <div className="flex justify-between items-start mb-2">
                      <div className="flex items-center gap-2">
                        <span className={`text-xs ${
                          activity.status === 'completed' ? 'text-black' : 'text-gray-400'
                        }`}>
                          {getStatusIndicator(activity.status)}
                        </span>
                        <span className="font-semibold text-sm uppercase tracking-wide">
                          {activity.type}
                        </span>
                      </div>
                      <span className="text-xs font-mono text-gray-500">
                        {activity.time}
                      </span>
                    </div>
                    
                    <div className="text-sm text-gray-700 space-y-1">
                      <div><strong>Room:</strong> {activity.room}</div>
                      {activity.guest && (
                        <div><strong>Guest:</strong> {activity.guest}</div>
                      )}
                      {activity.staff && (
                        <div><strong>Staff:</strong> {activity.staff}</div>
                      )}
                      <div className={`text-xs font-semibold uppercase tracking-wide ${
                        activity.status === 'completed' ? 'text-black' : 'text-gray-500'
                      }`}>
                        {activity.status}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* API Documentation */}
            <div className="mt-12 border-2 border-black bg-gray-50">
              <div className="p-4 border-b border-black bg-black text-white">
                <h3 className="text-sm font-semibold uppercase tracking-wide">
                  API Endpoints
                </h3>
              </div>
              <div className="p-4">
                <div className="text-xs font-mono leading-relaxed space-y-2">
                  <div><strong>POST</strong> /api/guest/checkin</div>
                  <div><strong>POST</strong> /api/guest/checkout</div>
                  <div><strong>POST</strong> /api/room/cleaning</div>
                  <div><strong>POST</strong> /api/room/maintenance</div>
                  
                  <div className="bg-white border border-gray-300 p-3 mt-4 text-xs">
{`{
  "roomNumber": "301",
  "guestName": "John Smith",
  "reservationId": "RES001",
  "timestamp": "2025-09-25T14:30:00Z",
  "staff": "Current User"
}`}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* QR Scanner Modal */}
      {showQRScanner && (
        <QRScannerModal
          isOpen={showQRScanner}
          title={scanningFor === 'guest' ? 'Scan Guest QR Code' : 'Scan Reservation QR Code'}
          onClose={() => {
            setShowQRScanner(false);
            setScanningFor('');
          }}
          onGuestDataReceived={scanningFor === 'guest' ? handleQRScan : null}
        />
      )}
    </div>
  );
};

export default CheckInOut;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Communication.jsx =====  
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\DynamicPricing.jsx =====  
import React, { useState, useEffect } from 'react';
import { DollarSign, Plus, Edit2, Trash2, TrendingUp, Calendar } from 'lucide-react';
import {
  getAllPricingRules,
  createPricingRule,
  updatePricingRule,
  deletePricingRule,
  triggerPriceUpdate
} from '../api/automation';

const DynamicPricing = () => {
  const [loading, setLoading] = useState(false);
  const [rules, setRules] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingRule, setEditingRule] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    roomType: '',
    ruleType: 'OCCUPANCY_BASED',
    minOccupancy: 0,
    maxOccupancy: 100,
    priceAdjustmentPercent: 0,
    startDate: '',
    endDate: '',
    daysOfWeek: [],
    isActive: true,
    priority: 1
  });

  useEffect(() => {
    loadPricingRules();
  }, []);

  const loadPricingRules = async () => {
    try {
      setLoading(true);
      const data = await getAllPricingRules();
      setRules(data);
    } catch (error) {
      console.error('Error loading pricing rules:', error);
      alert('Failed to load pricing rules');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      
      const ruleData = {
        ...formData,
        daysOfWeek: formData.daysOfWeek.length > 0 ? formData.daysOfWeek.join(',') : null
      };

      if (editingRule) {
        await updatePricingRule(editingRule.id, ruleData);
        alert('Pricing rule updated successfully');
      } else {
        await createPricingRule(ruleData);
        alert('Pricing rule created successfully');
      }
      
      resetForm();
      loadPricingRules();
    } catch (error) {
      console.error('Error saving pricing rule:', error);
      alert('Failed to save pricing rule');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (rule) => {
    setEditingRule(rule);
    setFormData({
      name: rule.name,
      roomType: rule.roomType || '',
      ruleType: rule.ruleType,
      minOccupancy: rule.minOccupancy || 0,
      maxOccupancy: rule.maxOccupancy || 100,
      priceAdjustmentPercent: rule.priceAdjustmentPercent,
      startDate: rule.startDate || '',
      endDate: rule.endDate || '',
      daysOfWeek: rule.daysOfWeek ? rule.daysOfWeek.split(',') : [],
      isActive: rule.isActive,
      priority: rule.priority || 1
    });
    setShowForm(true);
  };

  const handleDelete = async (ruleId) => {
    if (!window.confirm('Are you sure you want to delete this pricing rule?')) return;
    
    try {
      setLoading(true);
      await deletePricingRule(ruleId);
      alert('Pricing rule deleted successfully');
      loadPricingRules();
    } catch (error) {
      console.error('Error deleting rule:', error);
      alert('Failed to delete pricing rule');
    } finally {
      setLoading(false);
    }
  };

  const handleTriggerUpdate = async () => {
    if (!window.confirm('Trigger immediate price update for all rooms?')) return;
    
    try {
      setLoading(true);
      const result = await triggerPriceUpdate();
      alert(result.message || 'Price update completed successfully');
      loadPricingRules();
    } catch (error) {
      console.error('Error triggering price update:', error);
      alert('Failed to trigger price update');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      roomType: '',
      ruleType: 'OCCUPANCY_BASED',
      minOccupancy: 0,
      maxOccupancy: 100,
      priceAdjustmentPercent: 0,
      startDate: '',
      endDate: '',
      daysOfWeek: [],
      isActive: true,
      priority: 1
    });
    setEditingRule(null);
    setShowForm(false);
  };

  const toggleDayOfWeek = (day) => {
    setFormData(prev => ({
      ...prev,
      daysOfWeek: prev.daysOfWeek.includes(day)
        ? prev.daysOfWeek.filter(d => d !== day)
        : [...prev.daysOfWeek, day]
    }));
  };

  const daysOfWeek = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-5xl font-light tracking-tight text-black mb-2">
                Dynamic Pricing
              </h1>
              <p className="text-sm text-gray-500">
                Manage automated pricing rules and adjustments
              </p>
            </div>
            <div className="flex gap-3">
              <button
                onClick={handleTriggerUpdate}
                disabled={loading}
                className="px-6 py-3 bg-gray-600 text-white text-sm hover:bg-gray-700 transition-colors flex items-center gap-2"
              >
                <TrendingUp size={18} />
                Update Prices Now
              </button>
              <button
                onClick={() => setShowForm(true)}
                className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors flex items-center gap-2"
              >
                <Plus size={18} />
                New Pricing Rule
              </button>
            </div>
          </div>
        </div>

        {/* Form Modal */}
        {showForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white border-2 border-black p-8 max-w-2xl w-11/12 max-h-screen overflow-y-auto">
              <h2 className="text-2xl font-light mb-6">
                {editingRule ? 'Edit Pricing Rule' : 'Create Pricing Rule'}
              </h2>
              
              <form onSubmit={handleSubmit}>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium mb-2">Rule Name *</label>
                    <input
                      type="text"
                      value={formData.name}
                      onChange={(e) => setFormData({...formData, name: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      required
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium mb-2">Rule Type *</label>
                      <select
                        value={formData.ruleType}
                        onChange={(e) => setFormData({...formData, ruleType: e.target.value})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black bg-white"
                        required
                      >
                        <option value="OCCUPANCY_BASED">Occupancy Based</option>
                        <option value="DATE_BASED">Date Based</option>
                        <option value="DAY_OF_WEEK">Day of Week</option>
                        <option value="SEASONAL">Seasonal</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2">Room Type</label>
                      <input
                        type="text"
                        value={formData.roomType}
                        onChange={(e) => setFormData({...formData, roomType: e.target.value})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                        placeholder="Leave empty for all types"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium mb-2">Min Occupancy %</label>
                      <input
                        type="number"
                        min="0"
                        max="100"
                        value={formData.minOccupancy}
                        onChange={(e) => setFormData({...formData, minOccupancy: parseInt(e.target.value)})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2">Max Occupancy %</label>
                      <input
                        type="number"
                        min="0"
                        max="100"
                        value={formData.maxOccupancy}
                        onChange={(e) => setFormData({...formData, maxOccupancy: parseInt(e.target.value)})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Price Adjustment % *</label>
                    <input
                      type="number"
                      step="0.1"
                      value={formData.priceAdjustmentPercent}
                      onChange={(e) => setFormData({...formData, priceAdjustmentPercent: parseFloat(e.target.value)})}
                      className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      placeholder="e.g., 15 for +15%, -10 for -10%"
                      required
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Positive for increase, negative for decrease
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium mb-2">Start Date</label>
                      <input
                        type="date"
                        value={formData.startDate}
                        onChange={(e) => setFormData({...formData, startDate: e.target.value})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2">End Date</label>
                      <input
                        type="date"
                        value={formData.endDate}
                        onChange={(e) => setFormData({...formData, endDate: e.target.value})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Days of Week</label>
                    <div className="grid grid-cols-4 gap-2">
                      {daysOfWeek.map(day => (
                        <button
                          key={day}
                          type="button"
                          onClick={() => toggleDayOfWeek(day)}
                          className={`px-3 py-2 text-xs border transition-colors ${
                            formData.daysOfWeek.includes(day)
                              ? 'bg-black text-white border-black'
                              : 'bg-white text-black border-gray-200 hover:border-black'
                          }`}
                        >
                          {day.slice(0, 3)}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium mb-2">Priority</label>
                      <input
                        type="number"
                        min="1"
                        value={formData.priority}
                        onChange={(e) => setFormData({...formData, priority: parseInt(e.target.value)})}
                        className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Higher priority rules are applied first
                      </p>
                    </div>

                    <div className="flex items-center pt-6">
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={formData.isActive}
                          onChange={(e) => setFormData({...formData, isActive: e.target.checked})}
                          className="w-5 h-5"
                        />
                        <span className="text-sm font-medium">Active</span>
                      </label>
                    </div>
                  </div>
                </div>

                <div className="flex gap-3 mt-8">
                  <button
                    type="submit"
                    disabled={loading}
                    className="flex-1 px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300"
                  >
                    {loading ? 'Saving...' : (editingRule ? 'Update Rule' : 'Create Rule')}
                  </button>
                  <button
                    type="button"
                    onClick={resetForm}
                    className="px-6 py-3 border border-gray-200 text-black text-sm hover:border-black transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Pricing Rules List */}
        <div>
          <h2 className="text-2xl font-light mb-6">Active Pricing Rules</h2>
          
          {loading && rules.length === 0 ? (
            <div className="text-center py-20 text-gray-400">
              Loading pricing rules...
            </div>
          ) : rules.length === 0 ? (
            <div className="text-center py-20 border border-dashed border-gray-300">
              <DollarSign size={48} className="mx-auto mb-4 text-gray-300" />
              <p className="text-sm text-gray-500">No pricing rules configured</p>
            </div>
          ) : (
            <div className="space-y-4">
              {rules.map(rule => (
                <div key={rule.id} className="border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-medium">{rule.name}</h3>
                        <span className={`px-3 py-1 text-xs ${
                          rule.isActive 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-gray-100 text-gray-600'
                        }`}>
                          {rule.isActive ? 'Active' : 'Inactive'}
                        </span>
                      </div>
                      <div className="text-sm text-gray-600 space-y-1">
                        <div>Type: {rule.ruleType}</div>
                        {rule.roomType && <div>Room Type: {rule.roomType}</div>}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEdit(rule)}
                        className="p-2 border border-gray-200 hover:border-black transition-colors"
                      >
                        <Edit2 size={16} />
                      </button>
                      <button
                        onClick={() => handleDelete(rule.id)}
                        className="p-2 border border-gray-200 hover:border-red-500 hover:text-red-500 transition-colors"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Adjustment:</span>
                      <div className={`font-medium ${
                        rule.priceAdjustmentPercent >= 0 ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {rule.priceAdjustmentPercent > 0 ? '+' : ''}{rule.priceAdjustmentPercent}%
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-500">Occupancy:</span>
                      <div className="font-medium">{rule.minOccupancy}% - {rule.maxOccupancy}%</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Priority:</span>
                      <div className="font-medium">{rule.priority}</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Period:</span>
                      <div className="font-medium">
                        {rule.startDate && rule.endDate 
                          ? `${rule.startDate} to ${rule.endDate}`
                          : 'Ongoing'}
                      </div>
                    </div>
                  </div>

                  {rule.daysOfWeek && (
                    <div className="mt-3 text-sm">
                      <span className="text-gray-500">Days: </span>
                      <span className="font-medium">{rule.daysOfWeek}</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DynamicPricing;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\FraudDetection.jsx =====  
import React, { useState, useEffect } from 'react';
import { AlertTriangle, CheckCircle, XCircle, Eye, Filter } from 'lucide-react';
import {
  getAllFraudAlerts,
  getPendingFraudAlerts,
  getHighRiskAlerts,
  reviewFraudAlert
} from '../api/automation';

const FraudDetection = () => {
  const [loading, setLoading] = useState(false);
  const [alerts, setAlerts] = useState([]);
  const [filterType, setFilterType] = useState('all');
  const [selectedAlert, setSelectedAlert] = useState(null);
  const [reviewNotes, setReviewNotes] = useState('');

  useEffect(() => {
    loadAlerts();
  }, [filterType]);

  const loadAlerts = async () => {
    try {
      setLoading(true);
      let data;
      
      switch(filterType) {
        case 'pending':
          data = await getPendingFraudAlerts();
          break;
        case 'high-risk':
          data = await getHighRiskAlerts();
          break;
        default:
          data = await getAllFraudAlerts();
      }
      
      setAlerts(data);
    } catch (error) {
      console.error('Error loading fraud alerts:', error);
      alert('Failed to load fraud alerts');
    } finally {
      setLoading(false);
    }
  };

  const handleReview = async (alertId, status) => {
    try {
      setLoading(true);
      await reviewFraudAlert(alertId, status, 'Current User', reviewNotes || null);
      alert(`Alert ${status.toLowerCase()} successfully`);
      setSelectedAlert(null);
      setReviewNotes('');
      loadAlerts();
    } catch (error) {
      console.error('Error reviewing alert:', error);
      alert('Failed to review alert');
    } finally {
      setLoading(false);
    }
  };

  const getRiskLevelColor = (level) => {
    switch(level?.toUpperCase()) {
      case 'HIGH':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'MEDIUM':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'LOW':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch(status?.toUpperCase()) {
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800';
      case 'CONFIRMED':
        return 'bg-red-100 text-red-800';
      case 'FALSE_POSITIVE':
        return 'bg-green-100 text-green-800';
      case 'INVESTIGATING':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Fraud Detection
          </h1>
          <p className="text-sm text-gray-500">
            Monitor and review suspicious activities
          </p>
        </div>

        {/* Filters */}
        <div className="flex items-center gap-4 mb-8">
          <Filter size={20} />
          <div className="flex gap-2">
            <button
              onClick={() => setFilterType('all')}
              className={`px-4 py-2 text-sm border transition-colors ${
                filterType === 'all'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              All Alerts
            </button>
            <button
              onClick={() => setFilterType('pending')}
              className={`px-4 py-2 text-sm border transition-colors ${
                filterType === 'pending'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              Pending Review
            </button>
            <button
              onClick={() => setFilterType('high-risk')}
              className={`px-4 py-2 text-sm border transition-colors ${
                filterType === 'high-risk'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              High Risk
            </button>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-4 gap-6 mb-12">
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {alerts.filter(a => a.status === 'PENDING').length}
            </div>
            <div className="text-sm text-gray-500">Pending Review</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {alerts.filter(a => a.riskLevel === 'HIGH').length}
            </div>
            <div className="text-sm text-gray-500">High Risk</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {alerts.filter(a => a.status === 'CONFIRMED').length}
            </div>
            <div className="text-sm text-gray-500">Confirmed Fraud</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {alerts.filter(a => a.status === 'FALSE_POSITIVE').length}
            </div>
            <div className="text-sm text-gray-500">False Positives</div>
          </div>
        </div>

        {/* Alerts List */}
        <div>
          {loading && alerts.length === 0 ? (
            <div className="text-center py-20 text-gray-400">
              Loading fraud alerts...
            </div>
          ) : alerts.length === 0 ? (
            <div className="text-center py-20 border border-dashed border-gray-300">
              <CheckCircle size={48} className="mx-auto mb-4 text-green-500" />
              <p className="text-sm text-gray-500">No fraud alerts found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {alerts.map(alert => (
                <div key={alert.id} className="border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-3">
                        <AlertTriangle size={20} className="text-red-500" />
                        <h3 className="font-medium">{alert.alertType || 'Fraud Alert'}</h3>
                        <span className={`px-3 py-1 text-xs border ${getRiskLevelColor(alert.riskLevel)}`}>
                          {alert.riskLevel} Risk
                        </span>
                        <span className={`px-3 py-1 text-xs ${getStatusColor(alert.status)}`}>
                          {alert.status}
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-700 mb-3">
                        {alert.description || 'Suspicious activity detected'}
                      </div>

                      <div className="grid grid-cols-3 gap-4 text-sm">
                        {alert.reservationId && (
                          <div>
                            <span className="text-gray-500">Reservation:</span>
                            <div className="font-medium">#{alert.reservationId}</div>
                          </div>
                        )}
                        {alert.guestId && (
                          <div>
                            <span className="text-gray-500">Guest ID:</span>
                            <div className="font-medium">{alert.guestId}</div>
                          </div>
                        )}
                        {alert.detectedAt && (
                          <div>
                            <span className="text-gray-500">Detected:</span>
                            <div className="font-medium">
                              {new Date(alert.detectedAt).toLocaleDateString()}
                            </div>
                          </div>
                        )}
                      </div>

                      {alert.details && (
                        <div className="mt-3 p-3 bg-gray-50 border border-gray-200">
                          <div className="text-xs font-medium mb-1">Alert Details:</div>
                          <div className="text-xs text-gray-700">{alert.details}</div>
                        </div>
                      )}

                      {alert.reviewedBy && (
                        <div className="mt-3 text-xs text-gray-600">
                          Reviewed by {alert.reviewedBy} on {new Date(alert.reviewedAt).toLocaleString()}
                          {alert.reviewNotes && (
                            <div className="mt-1 text-gray-500">Note: {alert.reviewNotes}</div>
                          )}
                        </div>
                      )}
                    </div>

                    {alert.status === 'PENDING' && (
                      <button
                        onClick={() => setSelectedAlert(alert)}
                        className="px-4 py-2 border border-gray-200 hover:border-black transition-colors flex items-center gap-2 text-sm"
                      >
                        <Eye size={16} />
                        Review
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Review Modal */}
        {selectedAlert && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white border-2 border-black p-8 max-w-2xl w-11/12">
              <h2 className="text-2xl font-light mb-6">Review Fraud Alert</h2>
              
              <div className="mb-6">
                <div className="flex items-center gap-3 mb-4">
                  <span className={`px-3 py-1 text-sm border ${getRiskLevelColor(selectedAlert.riskLevel)}`}>
                    {selectedAlert.riskLevel} Risk
                  </span>
                  <h3 className="text-lg font-medium">{selectedAlert.alertType}</h3>
                </div>
                
                <div className="text-sm text-gray-700 mb-4">
                  {selectedAlert.description}
                </div>

                {selectedAlert.details && (
                  <div className="p-4 bg-gray-50 border border-gray-200 mb-4">
                    <div className="font-medium mb-2">Details:</div>
                    <div className="text-sm text-gray-700">{selectedAlert.details}</div>
                  </div>
                )}

                <div className="grid grid-cols-2 gap-4 text-sm mb-6">
                  {selectedAlert.reservationId && (
                    <div>
                      <span className="text-gray-500">Reservation:</span>
                      <div className="font-medium">#{selectedAlert.reservationId}</div>
                    </div>
                  )}
                  {selectedAlert.guestId && (
                    <div>
                      <span className="text-gray-500">Guest ID:</span>
                      <div className="font-medium">{selectedAlert.guestId}</div>
                    </div>
                  )}
                </div>

                <div className="mb-6">
                  <label className="block text-sm font-medium mb-2">Review Notes (Optional)</label>
                  <textarea
                    value={reviewNotes}
                    onChange={(e) => setReviewNotes(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black resize-vertical"
                    rows="3"
                    placeholder="Add notes about this review..."
                  />
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => handleReview(selectedAlert.id, 'CONFIRMED')}
                  disabled={loading}
                  className="flex-1 px-6 py-3 bg-red-600 text-white text-sm hover:bg-red-700 transition-colors flex items-center justify-center gap-2"
                >
                  <XCircle size={18} />
                  Confirm Fraud
                </button>
                <button
                  onClick={() => handleReview(selectedAlert.id, 'FALSE_POSITIVE')}
                  disabled={loading}
                  className="flex-1 px-6 py-3 bg-green-600 text-white text-sm hover:bg-green-700 transition-colors flex items-center justify-center gap-2"
                >
                  <CheckCircle size={18} />
                  Mark Safe
                </button>
                <button
                  onClick={() => {
                    setSelectedAlert(null);
                    setReviewNotes('');
                  }}
                  className="px-6 py-3 border border-gray-200 text-black text-sm hover:border-black transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default FraudDetection;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\GuestRegistrationForm.jsx =====  
import React, { useState } from "react";
import { receptionAPI } from "../api/reception";

const GuestRegistration = () => {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    nationality: "",
    identityType: "Passport",
    identityNumber: "",
    identityImage: null,
  });

  const [response, setResponse] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    
    if (error) {
      setError(null);
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    
    if (file && file.size > 5 * 1024 * 1024) {
      setError("Image file size must be less than 5MB");
      e.target.value = "";
      return;
    }
    
    setFormData((prev) => ({
      ...prev,
      identityImage: file,
    }));
    
    if (error) {
      setError(null);
    }
  };

  const isValidEmail = (email) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const isValidPhone = (phone) => {
    return /^[+]?[\d\s\-()]{7,15}$/.test(phone);
  };

  const handleSubmit = async () => {
    setError(null);
    
    const missingFields = [];
    if (!formData.firstName.trim()) missingFields.push("First Name");
    if (!formData.lastName.trim()) missingFields.push("Last Name");
    if (!formData.email.trim()) missingFields.push("Email");
    if (!formData.phone.trim()) missingFields.push("Phone");
    if (!formData.nationality.trim()) missingFields.push("Nationality");
    if (!formData.identityNumber.trim()) missingFields.push("Identity Number");

    if (missingFields.length > 0) {
      setError(`Please fill in the following required fields: ${missingFields.join(", ")}`);
      return;
    }

    if (!isValidEmail(formData.email)) {
      setError("Please enter a valid email address");
      return;
    }

    if (!isValidPhone(formData.phone)) {
      setError("Please enter a valid phone number");
      return;
    }

    setLoading(true);

    try {
      const guestData = {
        firstName: formData.firstName.trim(),
        lastName: formData.lastName.trim(),
        email: formData.email.trim().toLowerCase(),
        phone: formData.phone.trim(),
        nationality: formData.nationality.trim(),
        identityType: formData.identityType,
        identityNumber: formData.identityNumber.trim(),
      };

      const result = await receptionAPI.registerGuest(
        guestData,
        formData.identityImage
      );

      setResponse(result);
      
      setFormData({
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        nationality: "",
        identityType: "Passport",
        identityNumber: "",
        identityImage: null,
      });
      
      const fileInput = document.querySelector('input[type="file"]');
      if (fileInput) fileInput.value = "";
      
    } catch (err) {
      console.error("Registration failed:", err);
      setError(err.message || "Registration failed. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      nationality: "",
      identityType: "Passport",
      identityNumber: "",
      identityImage: null,
    });
    setResponse(null);
    setError(null);

    const fileInput = document.querySelector('input[type="file"]');
    if (fileInput) fileInput.value = "";
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Guest Registration
          </h1>
          <p className="text-sm text-gray-500">
            Register new guests to the system
          </p>
        </div>

        {/* Form */}
        <div className="border border-gray-200 p-8">
          {/* Name Fields */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-xs text-gray-500 mb-2">
                First Name *
              </label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter first name"
                disabled={loading}
              />
            </div>

            <div>
              <label className="block text-xs text-gray-500 mb-2">
                Last Name *
              </label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter last name"
                disabled={loading}
              />
            </div>
          </div>

          {/* Email */}
          <div className="mb-6">
            <label className="block text-xs text-gray-500 mb-2">
              Email Address *
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
              placeholder="Enter email address"
              disabled={loading}
            />
          </div>

          {/* Phone & Nationality */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-xs text-gray-500 mb-2">
                Phone Number *
              </label>
              <input
                type="text"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter phone number"
                disabled={loading}
              />
            </div>

            <div>
              <label className="block text-xs text-gray-500 mb-2">
                Nationality *
              </label>
              <input
                type="text"
                name="nationality"
                value={formData.nationality}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter nationality"
                disabled={loading}
              />
            </div>
          </div>

          {/* Identity Type & Number */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-xs text-gray-500 mb-2">
                Identity Type *
              </label>
              <select
                name="identityType"
                value={formData.identityType}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
                disabled={loading}
              >
                <option value="Passport">Passport</option>
                <option value="NIC">National ID Card</option>
                <option value="License">Driving License</option>
              </select>
            </div>

            <div>
              <label className="block text-xs text-gray-500 mb-2">
                Identity Number *
              </label>
              <input
                type="text"
                name="identityNumber"
                value={formData.identityNumber}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter identity number"
                disabled={loading}
              />
            </div>
          </div>

          {/* Identity Document Upload */}
          <div className="mb-8">
            <label className="block text-xs text-gray-500 mb-2">
              Identity Document Image
            </label>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors cursor-pointer"
              disabled={loading}
            />
            <p className="text-xs text-gray-400 mt-2">
              Upload a clear image of your identity document (JPG, PNG, max 5MB)
            </p>
            {formData.identityImage && (
              <p className="text-xs text-black mt-2">
                Selected: {formData.identityImage.name}
              </p>
            )}
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-6 p-4 border border-gray-900 bg-gray-50">
              <p className="text-sm text-black">
                {error}
              </p>
            </div>
          )}

          {/* Success Message */}
          {response && (
            <div className="mb-6 p-4 border border-black bg-black text-white">
              <p className="text-sm">
                Guest registration completed successfully
              </p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3 justify-end">
            <button
              onClick={resetForm}
              disabled={loading}
              className={`px-6 py-3 border border-gray-200 text-black text-sm hover:border-black transition-colors ${
                loading ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              Reset Form
            </button>
            
            <button
              onClick={handleSubmit}
              disabled={loading}
              className={`px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors ${
                loading ? 'opacity-70 cursor-not-allowed' : ''
              }`}
            >
              {loading ? "Processing..." : "Register Guest"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GuestRegistration;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\GuestRequests.jsx =====  
import React, { useState } from 'react';

const GuestRequests = ({ requests = [] }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterType, setFilterType] = useState('all');

  const getRequestIcon = (type) => {
    switch (type) {
      case 'housekeeping': return '🏠';
      case 'maintenance': return '🔧';
      case 'room-service': return '🍽️';
      case 'laundry': return '👕';
      case 'spa': return '💆';
      default: return '📋';
    }
  };

  const handleAssign = (requestId) => {
    console.log(`Assigning request ${requestId}`);
  };

  const handleComplete = (requestId) => {
    console.log(`Completing request ${requestId}`);
  };

  const handleDetails = (requestId) => {
    console.log(`Viewing details for request ${requestId}`);
  };

  const filteredRequests = requests.filter(request => {
    const matchesSearch = request.guestName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         request.roomNumber.includes(searchTerm) ||
                         request.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = filterStatus === 'all' || request.status === filterStatus;
    const matchesType = filterType === 'all' || request.requestType === filterType;
    return matchesSearch && matchesStatus && matchesType;
  });

  const pendingCount = requests.filter(r => r.status === 'pending').length;
  const inProgressCount = requests.filter(r => r.status === 'in-progress').length;
  const completedCount = requests.filter(r => r.status === 'completed').length;

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Guest Requests
          </h1>
          <p className="text-sm text-gray-500">
            Manage and track all service requests
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Pending</div>
            <div className="text-3xl font-light">{pendingCount}</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">In Progress</div>
            <div className="text-3xl font-light">{inProgressCount}</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Completed</div>
            <div className="text-3xl font-light">{completedCount}</div>
          </div>
        </div>

        {/* Filters */}
        <div className="flex gap-4 mb-12 flex-wrap">
          <input
            type="text"
            placeholder="Search requests..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 min-w-64 px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
          />

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
          </select>

          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Types</option>
            <option value="housekeeping">Housekeeping</option>
            <option value="maintenance">Maintenance</option>
            <option value="room-service">Room Service</option>
            <option value="laundry">Laundry</option>
            <option value="spa">Spa Services</option>
          </select>
        </div>

        {/* Requests List */}
        <div className="space-y-4">
          {filteredRequests.length === 0 ? (
            <div className="py-24 text-center">
              <p className="text-gray-400 text-sm">No requests found</p>
            </div>
          ) : (
            filteredRequests.map((request) => (
              <div 
                key={request.id} 
                className="border border-gray-200 hover:border-black transition-colors"
              >
                <div className="p-8">
                  <div className="flex items-start justify-between mb-6">
                    <div className="flex-1">
                      <div className="flex items-center gap-4 mb-2">
                        <h3 className="text-xl font-light tracking-tight">
                          {request.guestName}
                        </h3>
                        <span className="text-xs text-gray-400">
                          Room {request.roomNumber}
                        </span>
                      </div>
                      <p className="text-sm text-gray-500 mb-4">
                        {request.requestType.replace('-', ' ')}
                      </p>
                      <p className="text-black mb-6">
                        {request.description}
                      </p>
                    </div>
                    
                    <div className="flex gap-2">
                      <span className={`px-3 py-1 text-xs ${
                        request.priority === 'high' ? 'bg-black text-white' : 
                        request.priority === 'medium' ? 'bg-gray-300 text-black' : 
                        'border border-gray-300 text-black'
                      }`}>
                        {request.priority}
                      </span>
                      <span className={`px-3 py-1 text-xs ${
                        request.status === 'completed' ? 'bg-black text-white' : 
                        request.status === 'in-progress' ? 'bg-gray-300 text-black' : 
                        'border border-gray-300 text-black'
                      }`}>
                        {request.status.replace('-', ' ')}
                      </span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-6 pb-6 border-b border-gray-100">
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Request Time</div>
                      <div className="text-gray-900">{request.requestTime}</div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-400 mb-1">Estimated</div>
                      <div className="text-gray-900">{request.estimatedTime}</div>
                    </div>
                    {request.assignedTo && (
                      <div>
                        <div className="text-xs text-gray-400 mb-1">Assigned To</div>
                        <div className="text-gray-900">{request.assignedTo}</div>
                      </div>
                    )}
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex gap-3">
                    {request.status === 'pending' && (
                      <button 
                        onClick={() => handleAssign(request.id)}
                        className="px-4 py-2 bg-black text-white text-xs hover:bg-gray-900 transition-colors"
                      >
                        Assign
                      </button>
                    )}
                    {request.status === 'in-progress' && (
                      <button 
                        onClick={() => handleComplete(request.id)}
                        className="px-4 py-2 bg-black text-white text-xs hover:bg-gray-900 transition-colors"
                      >
                        Complete
                      </button>
                    )}
                    <button 
                      onClick={() => handleDetails(request.id)}
                      className="px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
                    >
                      Details
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

// Demo with sample data
const mockRequests = [
  {
    id: 'REQ001',
    guestName: 'John Smith',
    roomNumber: '101',
    requestType: 'housekeeping',
    description: 'Extra towels and toiletries needed',
    priority: 'medium',
    status: 'pending',
    requestTime: '2024-01-15 10:30',
    assignedTo: 'Maria Garcia',
    estimatedTime: '30 mins'
  },
  {
    id: 'REQ002',
    guestName: 'Emily Johnson',
    roomNumber: '205',
    requestType: 'maintenance',
    description: 'Air conditioning not working properly',
    priority: 'high',
    status: 'in-progress',
    requestTime: '2024-01-15 09:15',
    assignedTo: 'Mike Wilson',
    estimatedTime: '2 hours'
  },
  {
    id: 'REQ003',
    guestName: 'Michael Brown',
    roomNumber: '301',
    requestType: 'room-service',
    description: 'Room service - Dinner for 2',
    priority: 'medium',
    status: 'completed',
    requestTime: '2024-01-15 19:00',
    assignedTo: 'James Lee',
    estimatedTime: '45 mins'
  },
  {
    id: 'REQ004',
    guestName: 'Sarah Davis',
    roomNumber: '102',
    requestType: 'laundry',
    description: 'Laundry pickup and delivery',
    priority: 'low',
    status: 'pending',
    requestTime: '2024-01-15 11:45',
    assignedTo: null,
    estimatedTime: '24 hours'
  }
];

export default () => <GuestRequests requests={mockRequests} />;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Guests.jsx =====  
import React, { useState, useEffect } from 'react';
import { guestAPI } from '../api/guest';

const Guests = () => {
  const [activeView, setActiveView] = useState('grid');
  const [guests, setGuests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedGuest, setSelectedGuest] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [editData, setEditData] = useState({});

  useEffect(() => {
    fetchGuests();
  }, []);

  const fetchGuests = async () => {
    setLoading(true);
    try {
      const data = await guestAPI.getAllGuests();
      setGuests(data);
    } catch (error) {
      console.error('Error fetching guests:', error);
      alert('Failed to fetch guests: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleViewDetails = async (guestId) => {
    setLoading(true);
    try {
      const data = await guestAPI.getGuestById(guestId);
      setSelectedGuest(data);
      setEditData({
        fullName: data.fullName,
        email: data.email,
        phone: data.phone,
        nationality: data.nationality,
        identityType: data.identityType,
        identityNumber: data.identityNumber
      });
      setActiveView('details');
      setEditMode(false);
    } catch (error) {
      console.error('Error fetching guest details:', error);
      alert('Failed to fetch guest details: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateGuest = async () => {
    setLoading(true);
    try {
      const completeUpdateData = {
        ...selectedGuest,
        ...editData,
        guestId: undefined,
        qrCodeBase64: undefined,
        imageUrl: undefined
      };
      
      Object.keys(completeUpdateData).forEach(key => {
        if (completeUpdateData[key] === undefined) {
          delete completeUpdateData[key];
        }
      });
      
      await guestAPI.updateGuest(selectedGuest.guestId, completeUpdateData);
      alert('Guest updated successfully');
      
      await handleViewDetails(selectedGuest.guestId);
      await fetchGuests();
      setEditMode(false);
    } catch (error) {
      console.error('Error updating guest:', error);
      alert('Failed to update guest: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const filteredGuests = guests.filter(guest =>
    guest.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    guest.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    guest.phone?.includes(searchTerm) ||
    guest.guestId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    guest.identityNumber?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="flex justify-between items-center mb-16 border-b border-black pb-6">
          <div>
            <h1 className="text-5xl font-light tracking-tight text-black mb-2">
              Guests
            </h1>
            <p className="text-sm text-gray-500">
              Total: {guests.length}
            </p>
          </div>
          
          {activeView === 'details' && (
            <button
              onClick={() => {
                setActiveView('grid');
                setSelectedGuest(null);
                setEditMode(false);
              }}
              className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
            >
              Back to List
            </button>
          )}
        </div>

        {/* Grid View */}
        {activeView === 'grid' && (
          <div>
            <div className="mb-12">
              <input
                type="text"
                placeholder="Search guests..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
              />
            </div>

            {loading ? (
              <div className="py-24 text-center">
                <p className="text-gray-400 text-sm">Loading...</p>
              </div>
            ) : filteredGuests.length === 0 ? (
              <div className="py-24 text-center">
                <p className="text-gray-400 text-sm">
                  {searchTerm ? 'No guests found matching your search' : 'No guests found'}
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredGuests.map(guest => (
                  <div 
                    key={guest.guestId} 
                    onClick={() => handleViewDetails(guest.guestId)}
                    className="border border-gray-200 hover:border-black transition-colors cursor-pointer"
                  >
                    <div className="p-6">
                      <div className="mb-6">
                        <h3 className="text-xl font-light tracking-tight mb-1">
                          {guest.fullName}
                        </h3>
                        <p className="text-xs text-gray-400">
                          ID: {guest.guestId}
                        </p>
                      </div>
                      
                      <div className="space-y-2 text-sm mb-6 pb-6 border-b border-gray-100">
                        <div className="flex justify-between">
                          <span className="text-gray-500">Email</span>
                          <span className="text-black truncate ml-2">{guest.email}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">Phone</span>
                          <span className="text-black">{guest.phone}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">Nationality</span>
                          <span className="text-black">{guest.nationality || 'N/A'}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">{guest.identityType}</span>
                          <span className="text-black">{guest.identityNumber}</span>
                        </div>
                      </div>
                      
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleViewDetails(guest.guestId);
                        }}
                        className="w-full px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
                      >
                        View Details
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Details View */}
        {activeView === 'details' && selectedGuest && (
          <div>
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-3xl font-light tracking-tight">
                Guest Details
              </h2>
              
              {!editMode ? (
                <button
                  onClick={() => setEditMode(true)}
                  className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
                >
                  Edit Information
                </button>
              ) : (
                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      setEditMode(false);
                      setEditData({
                        fullName: selectedGuest.fullName,
                        email: selectedGuest.email,
                        phone: selectedGuest.phone,
                        nationality: selectedGuest.nationality,
                        identityType: selectedGuest.identityType,
                        identityNumber: selectedGuest.identityNumber
                      });
                    }}
                    className="px-6 py-3 border border-gray-200 text-black text-sm hover:border-black transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleUpdateGuest}
                    disabled={loading}
                    className={`px-6 py-3 text-sm transition-colors ${
                      loading 
                        ? 'bg-gray-200 text-gray-400 cursor-not-allowed' 
                        : 'bg-black text-white hover:bg-gray-900'
                    }`}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </button>
                </div>
              )}
            </div>

            <div className="border border-gray-200">
              <div className="p-8">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12">
                  {/* Personal Information */}
                  <div>
                    <h3 className="text-sm font-medium mb-6 pb-3 border-b border-gray-200">
                      Personal Information
                    </h3>
                    
                    {editMode ? (
                      <div className="space-y-6">
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Full Name
                          </label>
                          <input
                            type="text"
                            value={editData.fullName}
                            onChange={(e) => setEditData({...editData, fullName: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Email
                          </label>
                          <input
                            type="email"
                            value={editData.email}
                            onChange={(e) => setEditData({...editData, email: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Phone
                          </label>
                          <input
                            type="tel"
                            value={editData.phone}
                            onChange={(e) => setEditData({...editData, phone: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Nationality
                          </label>
                          <input
                            type="text"
                            value={editData.nationality}
                            onChange={(e) => setEditData({...editData, nationality: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                          />
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Full Name</div>
                          <div className="text-black">{selectedGuest.fullName}</div>
                        </div>
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Email</div>
                          <div className="text-black">{selectedGuest.email}</div>
                        </div>
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Phone</div>
                          <div className="text-black">{selectedGuest.phone}</div>
                        </div>
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Nationality</div>
                          <div className="text-black">{selectedGuest.nationality || 'Not specified'}</div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Identity Information */}
                  <div>
                    <h3 className="text-sm font-medium mb-6 pb-3 border-b border-gray-200">
                      Identity Information
                    </h3>
                    
                    {editMode ? (
                      <div className="space-y-6">
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Identity Type
                          </label>
                          <select
                            value={editData.identityType}
                            onChange={(e) => setEditData({...editData, identityType: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
                          >
                            <option value="NIC">NIC</option>
                            <option value="Passport">Passport</option>
                            <option value="Driver License">Driver License</option>
                          </select>
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-2">
                            Identity Number
                          </label>
                          <input
                            type="text"
                            value={editData.identityNumber}
                            onChange={(e) => setEditData({...editData, identityNumber: e.target.value})}
                            className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-400 mb-2">
                            Guest ID (Read Only)
                          </label>
                          <input
                            type="text"
                            value={selectedGuest.guestId}
                            disabled
                            className="w-full px-4 py-3 border border-gray-200 text-sm bg-gray-50 cursor-not-allowed"
                          />
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Guest ID</div>
                          <div className="text-black">{selectedGuest.guestId}</div>
                        </div>
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Identity Type</div>
                          <div className="text-black">{selectedGuest.identityType}</div>
                        </div>
                        <div className="pb-4 border-b border-gray-100">
                          <div className="text-xs text-gray-500 mb-1">Identity Number</div>
                          <div className="text-black">{selectedGuest.identityNumber}</div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Documents & QR Code */}
                <div className="border-t border-gray-200 pt-8">
                  <h3 className="text-sm font-medium mb-6">
                    Documents & QR Code
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    {selectedGuest.qrCodeBase64 && (
                      <div>
                        <h4 className="text-xs text-gray-500 mb-3">
                          QR Code
                        </h4>
                        <img 
                          src={selectedGuest.qrCodeBase64} 
                          alt="Guest QR Code"
                          className="w-full max-w-xs border border-gray-200"
                          onError={(e) => {
                            console.error('Failed to load QR code image');
                            e.target.style.display = 'none';
                          }}
                        />
                      </div>
                    )}
                    
                    {selectedGuest.imageUrl && (
                      <div>
                        <h4 className="text-xs text-gray-500 mb-3">
                          Identity Document
                        </h4>
                        <img 
                          src={selectedGuest.imageUrl} 
                          alt="Guest Identity"
                          className="w-full max-w-xs border border-gray-200"
                          onError={(e) => {
                            console.error('Failed to load identity document image');
                            e.target.style.display = 'none';
                          }}
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Guests;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\HousekeepingTasks.jsx =====  
import React, { useState, useEffect } from 'react';
import { Briefcase, CheckCircle, Clock, AlertCircle, Calendar } from 'lucide-react';
import {
  getPendingHousekeepingTasks,
  getUrgentHousekeepingTasks,
  getTasksByDate,
  completeHousekeepingTask
} from '../api/automation';

const HousekeepingTasks = () => {
  const [loading, setLoading] = useState(false);
  const [tasks, setTasks] = useState([]);
  const [viewType, setViewType] = useState('pending');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [completingTaskId, setCompletingTaskId] = useState(null);

  useEffect(() => {
    loadTasks();
  }, [viewType, selectedDate]);

  const loadTasks = async () => {
    try {
      setLoading(true);
      let data;
      
      switch(viewType) {
        case 'urgent':
          data = await getUrgentHousekeepingTasks();
          break;
        case 'date':
          data = await getTasksByDate(selectedDate);
          break;
        default:
          data = await getPendingHousekeepingTasks();
      }
      
      setTasks(data);
    } catch (error) {
      console.error('Error loading housekeeping tasks:', error);
      alert('Failed to load housekeeping tasks');
    } finally {
      setLoading(false);
    }
  };

  const handleCompleteTask = async (taskId) => {
    if (!window.confirm('Mark this task as completed?')) return;
    
    try {
      setCompletingTaskId(taskId);
      await completeHousekeepingTask(taskId, 'Current User');
      alert('Task completed successfully');
      loadTasks();
    } catch (error) {
      console.error('Error completing task:', error);
      alert('Failed to complete task');
    } finally {
      setCompletingTaskId(null);
    }
  };

  const getPriorityColor = (priority) => {
    switch(priority?.toUpperCase()) {
      case 'URGENT':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'HIGH':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'MEDIUM':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'LOW':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getTaskTypeIcon = (type) => {
    switch(type?.toUpperCase()) {
      case 'CHECKOUT_CLEANING':
        return '🧹';
      case 'TURNDOWN_SERVICE':
        return '🛏️';
      case 'DEEP_CLEANING':
        return '🧽';
      case 'MAINTENANCE':
        return '🔧';
      case 'INSPECTION':
        return '🔍';
      default:
        return '📋';
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Housekeeping Tasks
          </h1>
          <p className="text-sm text-gray-500">
            Automated task assignment and tracking
          </p>
        </div>

        {/* View Filters */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex gap-2">
            <button
              onClick={() => setViewType('pending')}
              className={`px-6 py-3 text-sm border transition-colors flex items-center gap-2 ${
                viewType === 'pending'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              <Clock size={16} />
              Pending
            </button>
            <button
              onClick={() => setViewType('urgent')}
              className={`px-6 py-3 text-sm border transition-colors flex items-center gap-2 ${
                viewType === 'urgent'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              <AlertCircle size={16} />
              Urgent
            </button>
            <button
              onClick={() => setViewType('date')}
              className={`px-6 py-3 text-sm border transition-colors flex items-center gap-2 ${
                viewType === 'date'
                  ? 'bg-black text-white border-black'
                  : 'bg-white text-black border-gray-200 hover:border-black'
              }`}
            >
              <Calendar size={16} />
              By Date
            </button>
          </div>

          {viewType === 'date' && (
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="px-4 py-2 border border-gray-200 text-sm focus:outline-none focus:border-black"
            />
          )}
        </div>

        {/* Stats */}
        <div className="grid grid-cols-4 gap-6 mb-12">
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {tasks.filter(t => t.status === 'PENDING').length}
            </div>
            <div className="text-sm text-gray-500">Pending Tasks</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {tasks.filter(t => t.priority === 'URGENT').length}
            </div>
            <div className="text-sm text-gray-500">Urgent</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {tasks.filter(t => t.status === 'COMPLETED').length}
            </div>
            <div className="text-sm text-gray-500">Completed</div>
          </div>
          <div className="border border-gray-200 p-6">
            <div className="text-2xl font-light mb-1">
              {tasks.filter(t => t.assignedStaffId).length}
            </div>
            <div className="text-sm text-gray-500">Assigned</div>
          </div>
        </div>

        {/* Tasks List */}
        <div>
          {loading && tasks.length === 0 ? (
            <div className="text-center py-20 text-gray-400">
              Loading housekeeping tasks...
            </div>
          ) : tasks.length === 0 ? (
            <div className="text-center py-20 border border-dashed border-gray-300">
              <Briefcase size={48} className="mx-auto mb-4 text-gray-300" />
              <p className="text-sm text-gray-500">No tasks found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {tasks.map(task => (
                <div 
                  key={task.id} 
                  className={`border p-6 ${
                    task.status === 'COMPLETED' 
                      ? 'border-gray-200 bg-gray-50' 
                      : 'border-gray-200'
                  }`}
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-3">
                        <span className="text-2xl">{getTaskTypeIcon(task.taskType)}</span>
                        <div>
                          <h3 className="font-medium">
                            Room {task.roomNumber || task.roomId}
                          </h3>
                          <div className="text-sm text-gray-500">
                            {task.taskType?.replace(/_/g, ' ')}
                          </div>
                        </div>
                        <span className={`px-3 py-1 text-xs border ${getPriorityColor(task.priority)}`}>
                          {task.priority}
                        </span>
                        {task.status === 'COMPLETED' && (
                          <span className="px-3 py-1 text-xs bg-green-100 text-green-800">
                            Completed
                          </span>
                        )}
                      </div>

                      {task.description && (
                        <div className="text-sm text-gray-700 mb-3">
                          {task.description}
                        </div>
                      )}

                      <div className="grid grid-cols-4 gap-4 text-sm">
                        {task.scheduledTime && (
                          <div>
                            <span className="text-gray-500">Scheduled:</span>
                            <div className="font-medium">
                              {new Date(task.scheduledTime).toLocaleTimeString([], { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </div>
                          </div>
                        )}
                        {task.assignedStaffId && (
                          <div>
                            <span className="text-gray-500">Assigned To:</span>
                            <div className="font-medium">Staff #{task.assignedStaffId}</div>
                          </div>
                        )}
                        {task.estimatedDuration && (
                          <div>
                            <span className="text-gray-500">Duration:</span>
                            <div className="font-medium">{task.estimatedDuration} min</div>
                          </div>
                        )}
                        {task.createdAt && (
                          <div>
                            <span className="text-gray-500">Created:</span>
                            <div className="font-medium">
                              {new Date(task.createdAt).toLocaleDateString()}
                            </div>
                          </div>
                        )}
                      </div>

                      {task.status === 'COMPLETED' && task.completedBy && (
                        <div className="mt-3 p-3 bg-green-50 border border-green-200">
                          <div className="text-xs text-green-800">
                            Completed by {task.completedBy} on {new Date(task.completedAt).toLocaleString()}
                          </div>
                        </div>
                      )}

                      {task.notes && (
                        <div className="mt-3 p-3 bg-gray-50 border border-gray-200">
                          <div className="text-xs font-medium mb-1">Notes:</div>
                          <div className="text-xs text-gray-700">{task.notes}</div>
                        </div>
                      )}
                    </div>

                    {task.status !== 'COMPLETED' && (
                      <button
                        onClick={() => handleCompleteTask(task.id)}
                        disabled={completingTaskId === task.id}
                        className="ml-4 px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300 flex items-center gap-2"
                      >
                        <CheckCircle size={18} />
                        {completingTaskId === task.id ? 'Completing...' : 'Complete'}
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Task Distribution Chart (Placeholder) */}
        {tasks.length > 0 && (
          <div className="mt-12 border border-gray-200 p-6">
            <h3 className="font-medium mb-6">Task Distribution</h3>
            <div className="grid grid-cols-5 gap-4">
              {['CHECKOUT_CLEANING', 'TURNDOWN_SERVICE', 'DEEP_CLEANING', 'MAINTENANCE', 'INSPECTION'].map(type => {
                const count = tasks.filter(t => t.taskType === type).length;
                const percentage = tasks.length > 0 ? (count / tasks.length * 100).toFixed(0) : 0;
                
                return (
                  <div key={type} className="text-center">
                    <div className="text-2xl mb-2">{getTaskTypeIcon(type)}</div>
                    <div className="font-medium text-lg">{count}</div>
                    <div className="text-xs text-gray-500 mb-2">
                      {type.replace(/_/g, ' ')}
                    </div>
                    <div className="w-full bg-gray-200 h-2">
                      <div 
                        className="bg-black h-2" 
                        style={{ width: `${percentage}%` }}
                      />
                    </div>
                    <div className="text-xs text-gray-500 mt-1">{percentage}%</div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default HousekeepingTasks;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\OTAChannelManagement.jsx =====  
import React, { useState, useEffect } from 'react';
import { Globe, RefreshCw, Calendar, DollarSign, CheckCircle, AlertTriangle } from 'lucide-react';
import {
  syncAvailabilityToOTA,
  syncRatesToOTA,
  getAutomationConfig
} from '../api/automation';
import { getAllRooms } from '../api/room';

const OTAChannelManagement = () => {
  const [loading, setLoading] = useState(false);
  const [config, setConfig] = useState(null);
  const [rooms, setRooms] = useState([]);
  const [syncType, setSyncType] = useState('availability');
  
  // Availability Sync
  const [availabilityData, setAvailabilityData] = useState({
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  });

  // Rate Sync
  const [rateData, setRateData] = useState({});
  const [lastSyncStatus, setLastSyncStatus] = useState(null);

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      const [configData, roomsData] = await Promise.all([
        getAutomationConfig(),
        getAllRooms()
      ]);
      
      setConfig(configData);
      setRooms(roomsData);
      
      // Initialize rate data for each room type
      const uniqueTypes = [...new Set(roomsData.map(r => r.type))];
      const initialRates = {};
      uniqueTypes.forEach(type => {
        const room = roomsData.find(r => r.type === type);
        initialRates[type] = room?.pricePerNight || 0;
      });
      setRateData(initialRates);
    } catch (error) {
      console.error('Error loading data:', error);
      alert('Failed to load OTA configuration');
    } finally {
      setLoading(false);
    }
  };

  const handleSyncAvailability = async () => {
    if (!window.confirm(`Sync availability from ${availabilityData.startDate} to ${availabilityData.endDate}?`)) {
      return;
    }

    try {
      setLoading(true);
      const result = await syncAvailabilityToOTA(
        availabilityData.startDate,
        availabilityData.endDate
      );
      
      setLastSyncStatus({
        type: 'availability',
        success: true,
        message: result.message || 'Availability synced successfully',
        timestamp: new Date().toISOString(),
        details: result
      });
      
      alert('Availability synced to OTA channels successfully');
    } catch (error) {
      console.error('Error syncing availability:', error);
      setLastSyncStatus({
        type: 'availability',
        success: false,
        message: error.message || 'Failed to sync availability',
        timestamp: new Date().toISOString()
      });
      alert('Failed to sync availability');
    } finally {
      setLoading(false);
    }
  };

  const handleSyncRates = async () => {
    if (!window.confirm('Sync current room rates to all OTA channels?')) {
      return;
    }

    try {
      setLoading(true);
      const result = await syncRatesToOTA(rateData);
      
      setLastSyncStatus({
        type: 'rates',
        success: true,
        message: result.message || 'Rates synced successfully',
        timestamp: new Date().toISOString(),
        details: result
      });
      
      alert('Rates synced to OTA channels successfully');
    } catch (error) {
      console.error('Error syncing rates:', error);
      setLastSyncStatus({
        type: 'rates',
        success: false,
        message: error.message || 'Failed to sync rates',
        timestamp: new Date().toISOString()
      });
      alert('Failed to sync rates');
    } finally {
      setLoading(false);
    }
  };

  const handleRateChange = (roomType, value) => {
    setRateData(prev => ({
      ...prev,
      [roomType]: parseFloat(value) || 0
    }));
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            OTA Channel Management
          </h1>
          <p className="text-sm text-gray-500">
            Synchronize availability and rates with booking channels
          </p>
        </div>

        {/* Status Banner */}
        {config && (
          <div className={`mb-8 p-6 border ${
            config.otaSyncEnabled 
              ? 'border-green-200 bg-green-50' 
              : 'border-yellow-200 bg-yellow-50'
          }`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Globe size={24} />
                <div>
                  <div className="font-medium">
                    OTA Sync Status: {config.otaSyncEnabled ? 'Enabled' : 'Disabled'}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">
                    {config.otaSyncEnabled 
                      ? 'Automatic synchronization is active' 
                      : 'Enable in automation settings to activate auto-sync'}
                  </div>
                </div>
              </div>
              {config.otaLastSyncTime && (
                <div className="text-sm text-gray-600">
                  Last sync: {new Date(config.otaLastSyncTime).toLocaleString()}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Last Sync Status */}
        {lastSyncStatus && (
          <div className={`mb-8 p-6 border ${
            lastSyncStatus.success 
              ? 'border-green-200 bg-green-50' 
              : 'border-red-200 bg-red-50'
          }`}>
            <div className="flex items-center gap-3 mb-2">
              {lastSyncStatus.success ? (
                <CheckCircle size={20} className="text-green-600" />
              ) : (
                <AlertTriangle size={20} className="text-red-600" />
              )}
              <div className={`font-medium ${
                lastSyncStatus.success ? 'text-green-800' : 'text-red-800'
              }`}>
                {lastSyncStatus.message}
              </div>
            </div>
            <div className="text-sm text-gray-600">
              {new Date(lastSyncStatus.timestamp).toLocaleString()}
            </div>
            {lastSyncStatus.details && (
              <div className="mt-3 text-sm">
                <div className="font-medium mb-1">Sync Details:</div>
                <div className="space-y-1">
                  {lastSyncStatus.details.channelsSynced && (
                    <div>Channels synced: {lastSyncStatus.details.channelsSynced}</div>
                  )}
                  {lastSyncStatus.details.roomsUpdated && (
                    <div>Rooms updated: {lastSyncStatus.details.roomsUpdated}</div>
                  )}
                  {lastSyncStatus.details.datesUpdated && (
                    <div>Dates updated: {lastSyncStatus.details.datesUpdated}</div>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Sync Type Tabs */}
        <div className="flex mb-12 gap-0">
          <button
            onClick={() => setSyncType('availability')}
            className={`px-6 py-3 text-sm border border-gray-200 transition-colors flex items-center gap-2 ${
              syncType === 'availability' 
                ? 'bg-black text-white' 
                : 'bg-white text-black hover:border-black'
            }`}
          >
            <Calendar size={16} />
            Availability Sync
          </button>
          <button
            onClick={() => setSyncType('rates')}
            className={`px-6 py-3 text-sm border border-gray-200 border-l-0 transition-colors flex items-center gap-2 ${
              syncType === 'rates' 
                ? 'bg-black text-white' 
                : 'bg-white text-black hover:border-black'
            }`}
          >
            <DollarSign size={16} />
            Rate Sync
          </button>
        </div>

        {/* Availability Sync Tab */}
        {syncType === 'availability' && (
          <div>
            <h2 className="text-2xl font-light mb-8">Sync Availability</h2>
            
            <div className="border border-gray-200 p-8">
              <div className="mb-8">
                <p className="text-sm text-gray-600 mb-6">
                  Synchronize room availability across all connected OTA channels. 
                  This will update booking availability based on your current reservations.
                </p>

                <div className="grid grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium mb-2">Start Date *</label>
                    <input
                      type="date"
                      value={availabilityData.startDate}
                      onChange={(e) => setAvailabilityData({
                        ...availabilityData,
                        startDate: e.target.value
                      })}
                      className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      min={new Date().toISOString().split('T')[0]}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">End Date *</label>
                    <input
                      type="date"
                      value={availabilityData.endDate}
                      onChange={(e) => setAvailabilityData({
                        ...availabilityData,
                        endDate: e.target.value
                      })}
                      className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                      min={availabilityData.startDate}
                    />
                  </div>
                </div>
              </div>

              <button
                onClick={handleSyncAvailability}
                disabled={loading || !availabilityData.startDate || !availabilityData.endDate}
                className="w-full px-6 py-4 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300 flex items-center justify-center gap-2"
              >
                <RefreshCw size={18} className={loading ? 'animate-spin' : ''} />
                {loading ? 'Syncing...' : 'Sync Availability to OTA Channels'}
              </button>

              <div className="mt-6 p-4 bg-gray-50 border border-gray-200">
                <div className="text-sm font-medium mb-2">Connected Channels:</div>
                <div className="text-sm text-gray-600 space-y-1">
                  <div>• Booking.com</div>
                  <div>• Expedia</div>
                  <div>• Airbnb</div>
                  <div>• Hotels.com</div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Rate Sync Tab */}
        {syncType === 'rates' && (
          <div>
            <h2 className="text-2xl font-light mb-8">Sync Room Rates</h2>
            
            <div className="border border-gray-200 p-8">
              <p className="text-sm text-gray-600 mb-6">
                Update room rates across all OTA channels. Current rates will be synchronized 
                to all connected booking platforms.
              </p>

              <div className="space-y-6 mb-8">
                {Object.entries(rateData).map(([roomType, rate]) => (
                  <div key={roomType} className="grid grid-cols-3 gap-6 items-center p-4 border border-gray-200">
                    <div>
                      <div className="font-medium">{roomType}</div>
                      <div className="text-sm text-gray-500">
                        {rooms.filter(r => r.type === roomType).length} rooms
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">Rate per Night</label>
                      <div className="flex items-center">
                        <span className="px-3 py-3 border border-r-0 border-gray-200 text-sm">$</span>
                        <input
                          type="number"
                          step="0.01"
                          value={rate}
                          onChange={(e) => handleRateChange(roomType, e.target.value)}
                          className="flex-1 px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black"
                        />
                      </div>
                    </div>
                    <div className="text-sm text-gray-600">
                      Will be synced to all channels
                    </div>
                  </div>
                ))}
              </div>

              <button
                onClick={handleSyncRates}
                disabled={loading}
                className="w-full px-6 py-4 bg-black text-white text-sm hover:bg-gray-900 transition-colors disabled:bg-gray-300 flex items-center justify-center gap-2"
              >
                <RefreshCw size={18} className={loading ? 'animate-spin' : ''} />
                {loading ? 'Syncing...' : 'Sync Rates to OTA Channels'}
              </button>

              <div className="mt-6 p-4 bg-blue-50 border border-blue-200">
                <div className="text-sm font-medium text-blue-800 mb-2">Note:</div>
                <div className="text-sm text-blue-700">
                  Rate changes may take 5-15 minutes to reflect on all OTA platforms. 
                  Some channels may require manual confirmation.
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Sync History (Placeholder) */}
        <div className="mt-12 border border-gray-200 p-6">
          <h3 className="font-medium mb-4">Recent Sync History</h3>
          <div className="text-sm text-gray-500 text-center py-8">
            Sync history tracking coming soon
          </div>
        </div>
      </div>
    </div>
  );
};

export default OTAChannelManagement;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\PaymentAutomation.jsx =====  
import React, { useState, useEffect } from 'react';
import { CreditCard, CheckCircle, XCircle, Clock, DollarSign, AlertTriangle } from 'lucide-react';

const PaymentAutomation = () => {
  const [loading, setLoading] = useState(false);
  const [payments, setPayments] = useState([]);
  const [filterStatus, setFilterStatus] = useState('all');
  const [stats, setStats] = useState({
    pending: 0,
    completed: 0,
    failed: 0,
    totalAmount: 0
  });

  useEffect(() => {
    loadPayments();
  }, [filterStatus]);

  const loadPayments = async () => {
    try {
      setLoading(true);
      // This would connect to your payment API
      // const data = await getPaymentTransactions(filterStatus);
      // setPayments(data);
      
      // Placeholder data
      const placeholderData = [
        {
          id: 1,
          reservationId: 'RES001',
          guestName: 'John Doe',
          amount: 250.00,
          status: 'COMPLETED',
          paymentMethod: 'CREDIT_CARD',
          processedAt: new Date().toISOString(),
          transactionId: 'TXN123456'
        },
        {
          id: 2,
          reservationId: 'RES002',
          guestName: 'Jane Smith',
          amount: 180.00,
          status: 'PENDING',
          paymentMethod: 'DEBIT_CARD',
          scheduledAt: new Date().toISOString()
        }
      ];
      
      setPayments(placeholderData);
      
      // Calculate stats
      const completed = placeholderData.filter(p => p.status === 'COMPLETED');
      const pending = placeholderData.filter(p => p.status === 'PENDING');
      const failed = placeholderData.filter(p => p.status === 'FAILED');
      
      setStats({
        completed: completed.length,
        pending: pending.length,
        failed: failed.length,
        totalAmount: completed.reduce((sum, p) => sum + p.amount, 0)
      });
      
    } catch (error) {
      console.error('Error loading payments:', error);
      alert('Failed to load payment transactions');
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch(status?.toUpperCase()) {
      case 'COMPLETED':
        return 'bg-green-100 text-green-800';
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800';
      case 'FAILED':
        return 'bg-red-100 text-red-800';
      case 'REFUNDED':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status) => {
    switch(status?.toUpperCase()) {
      case 'COMPLETED':
        return <CheckCircle size={20} className="text-green-600" />;
      case 'PENDING':
        return <Clock size={20} className="text-yellow-600" />;
      case 'FAILED':
        return <XCircle size={20} className="text-red-600" />;
      default:
        return <AlertTriangle size={20} className="text-gray-600" />;
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Payment Automation
          </h1>
          <p className="text-sm text-gray-500">
            Automated payment processing and tracking
          </p>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-4 gap-6 mb-12">
          <div className="border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-3">
              <CheckCircle size={24} className="text-green-600" />
              <h3 className="text-sm font-medium">Completed</h3>
            </div>
            <div className="text-3xl font-light">{stats.completed}</div>
          </div>

          <div className="border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-3">
              <Clock size={24} className="text-yellow-600" />
              <h3 className="text-sm font-medium">Pending</h3>
            </div>
            <div className="text-3xl font-light">{stats.pending}</div>
          </div>

          <div className="border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-3">
              <XCircle size={24} className="text-red-600" />
              <h3 className="text-sm font-medium">Failed</h3>
            </div>
            <div className="text-3xl font-light">{stats.failed}</div>
          </div>

          <div className="border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-3">
              <DollarSign size={24} className="text-black" />
              <h3 className="text-sm font-medium">Total Processed</h3>
            </div>
            <div className="text-3xl font-light">${stats.totalAmount.toFixed(2)}</div>
          </div>
        </div>

        {/* Filters */}
        <div className="flex gap-2 mb-8">
          <button
            onClick={() => setFilterStatus('all')}
            className={`px-4 py-2 text-sm border transition-colors ${
              filterStatus === 'all'
                ? 'bg-black text-white border-black'
                : 'bg-white text-black border-gray-200 hover:border-black'
            }`}
          >
            All Payments
          </button>
          <button
            onClick={() => setFilterStatus('pending')}
            className={`px-4 py-2 text-sm border transition-colors ${
              filterStatus === 'pending'
                ? 'bg-black text-white border-black'
                : 'bg-white text-black border-gray-200 hover:border-black'
            }`}
          >
            Pending
          </button>
          <button
            onClick={() => setFilterStatus('completed')}
            className={`px-4 py-2 text-sm border transition-colors ${
              filterStatus === 'completed'
                ? 'bg-black text-white border-black'
                : 'bg-white text-black border-gray-200 hover:border-black'
            }`}
          >
            Completed
          </button>
          <button
            onClick={() => setFilterStatus('failed')}
            className={`px-4 py-2 text-sm border transition-colors ${
              filterStatus === 'failed'
                ? 'bg-black text-white border-black'
                : 'bg-white text-black border-gray-200 hover:border-black'
            }`}
          >
            Failed
          </button>
        </div>

        {/* Payment List */}
        <div>
          {loading && payments.length === 0 ? (
            <div className="text-center py-20 text-gray-400">
              Loading payments...
            </div>
          ) : payments.length === 0 ? (
            <div className="text-center py-20 border border-dashed border-gray-300">
              <CreditCard size={48} className="mx-auto mb-4 text-gray-300" />
              <p className="text-sm text-gray-500">No payment transactions found</p>
            </div>
          ) : (
            <div className="space-y-4">
              {payments.map(payment => (
                <div key={payment.id} className="border border-gray-200 p-6">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-3">
                        {getStatusIcon(payment.status)}
                        <div>
                          <h3 className="font-medium">
                            {payment.guestName}
                          </h3>
                          <div className="text-sm text-gray-500">
                            Reservation: {payment.reservationId}
                          </div>
                        </div>
                        <span className={`px-3 py-1 text-xs ${getStatusColor(payment.status)}`}>
                          {payment.status}
                        </span>
                      </div>

                      <div className="grid grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="text-gray-500">Amount:</span>
                          <div className="font-medium text-lg">
                            ${payment.amount.toFixed(2)}
                          </div>
                        </div>
                        <div>
                          <span className="text-gray-500">Method:</span>
                          <div className="font-medium">
                            {payment.paymentMethod?.replace(/_/g, ' ')}
                          </div>
                        </div>
                        {payment.transactionId && (
                          <div>
                            <span className="text-gray-500">Transaction ID:</span>
                            <div className="font-medium font-mono text-xs">
                              {payment.transactionId}
                            </div>
                          </div>
                        )}
                        <div>
                          <span className="text-gray-500">
                            {payment.status === 'COMPLETED' ? 'Processed:' : 'Scheduled:'}
                          </span>
                          <div className="font-medium text-xs">
                            {new Date(payment.processedAt || payment.scheduledAt).toLocaleString()}
                          </div>
                        </div>
                      </div>

                      {payment.failureReason && (
                        <div className="mt-3 p-3 bg-red-50 border border-red-200">
                          <div className="text-sm text-red-800 font-medium">Failure Reason:</div>
                          <div className="text-sm text-red-700">{payment.failureReason}</div>
                        </div>
                      )}

                      {payment.notes && (
                        <div className="mt-3 p-3 bg-gray-50 border border-gray-200">
                          <div className="text-xs font-medium mb-1">Notes:</div>
                          <div className="text-xs text-gray-700">{payment.notes}</div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Automation Settings */}
        <div className="mt-12 border border-gray-200 p-6">
          <h3 className="font-medium mb-6">Automation Settings</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 border border-gray-200">
              <div>
                <div className="font-medium mb-1">Auto-charge at checkout</div>
                <div className="text-sm text-gray-500">
                  Automatically process payment when guest checks out
                </div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" className="sr-only peer" defaultChecked />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-black"></div>
              </label>
            </div>

            <div className="flex items-center justify-between p-4 border border-gray-200">
              <div>
                <div className="font-medium mb-1">Retry failed payments</div>
                <div className="text-sm text-gray-500">
                  Automatically retry failed transactions after 24 hours
                </div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-black"></div>
              </label>
            </div>

            <div className="flex items-center justify-between p-4 border border-gray-200">
              <div>
                <div className="font-medium mb-1">Send payment receipts</div>
                <div className="text-sm text-gray-500">
                  Email receipts automatically after successful payment
                </div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" className="sr-only peer" defaultChecked />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-black"></div>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentAutomation;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\ReceptionistDashboard.jsx =====  
import React, { useState, useEffect, useRef, useCallback } from "react";
import jsQR from "jsqr";
import {
  ChevronLeft,
  ChevronRight,
  Search,
  Add,
  Today,
  ExpandMore,
  Close,
  Save,
  ZoomIn,
  ZoomOut,
  DragIndicator,
  QrCodeScanner,
  Person,
  Refresh
} from "@mui/icons-material";

// API Configuration
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';

// API functions
const getAllRooms = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/rooms/getAll`, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      const text = await response.text();
      console.error('Response is not JSON:', text);
      throw new Error("Server returned non-JSON response");
    }

    const data = await response.json();
    
    const transformedData = data.map(room => ({
      id: room.id,
      roomNumber: room.roomNumber,
      roomType: room.type,
      floor: parseInt(room.floorNumber),
      status: room.availabilityStatus?.toLowerCase() || 'available',
      capacity: room.capacity,
      pricePerNight: room.pricePerNight,
      description: room.description
    }));
    
    console.log('Fetched rooms from API:', transformedData);
    return transformedData;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};

const getGuestDetails = async (guestId) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
      method: "GET",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('Fetched guest details:', data);
    return data;
  } catch (error) {
    console.error('Error fetching guest details:', error);
    throw error;
  }
};

const createReservation = async (reservationData) => {
  try {
    console.log('Sending reservation data:', reservationData);
    
    const response = await fetch(`${API_BASE_URL}/api/reservations/create`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(reservationData)
    });

    console.log('Reservation response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Reservation creation failed:', errorText);
      throw new Error(`Failed to create reservation: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Created reservation response:', data);
    return data;
  } catch (error) {
    console.error('Error creating reservation:', error);
    throw error;
  }
};

const createReservationDetails = async (reservationId, detailsData) => {
  try {
    console.log('Sending reservation details:', detailsData);
    
    const response = await fetch(`${API_BASE_URL}/api/reservation-details/create/${reservationId}`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(detailsData)
    });

    console.log('Reservation details response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Reservation details creation failed:', errorText);
      throw new Error(`Failed to create reservation details: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Created reservation details response:', data);
    return data;
  } catch (error) {
    console.error('Error creating reservation details:', error);
    throw error;
  }
};

// QR Scanner Component
const QRScanner = ({ isOpen, onClose, onScan, onError }) => {
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const debugCanvasRef = useRef(null);
  const [isScanning, setIsScanning] = useState(false);
  const [stream, setStream] = useState(null);
  const [scanError, setScanError] = useState(null);
  const [debugInfo, setDebugInfo] = useState('');
  const [showDebugCanvas, setShowDebugCanvas] = useState(false);
  const intervalRef = useRef(null);
  const lastScanTime = useRef(0);
  const scanAttempts = useRef(0);
  const lastSuccessfulScan = useRef(null);

  useEffect(() => {
    if (isOpen) {
      startCamera();
    } else {
      stopCamera();
    }

    return () => {
      stopCamera();
    };
  }, [isOpen]);

  const startCamera = async () => {
    try {
      setScanError(null);
      setDebugInfo('Initializing camera...');
      scanAttempts.current = 0;
      
      const constraints = {
        video: {
          facingMode: { ideal: 'environment' },
          width: { ideal: 1920, min: 1280, max: 4096 },
          height: { ideal: 1080, min: 720, max: 2160 },
          frameRate: { ideal: 30, min: 15, max: 60 },
          focusMode: 'continuous',
          exposureMode: 'continuous',
          whiteBalanceMode: 'continuous'
        }
      };

      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
      
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream;
        setStream(mediaStream);
        
        const video = videoRef.current;
        video.playsInline = true;
        video.setAttribute('playsinline', true);
        
        const handleVideoReady = () => {
          if (video.readyState >= 2) {
            setIsScanning(true);
            setDebugInfo('Camera ready - scanning for QR codes...');
            
            intervalRef.current = setInterval(scanQRCode, 100);
            
            video.removeEventListener('canplay', handleVideoReady);
            video.removeEventListener('loadedmetadata', handleVideoReady);
            video.removeEventListener('playing', handleVideoReady);
          }
        };
        
        video.addEventListener('canplay', handleVideoReady);
        video.addEventListener('loadedmetadata', handleVideoReady);
        video.addEventListener('playing', handleVideoReady);
        
        setTimeout(() => {
          if (!isScanning && video.readyState >= 2) {
            handleVideoReady();
          }
        }, 2000);
        
        try {
          await video.play();
        } catch (playError) {
          console.log('Video play error (may be normal):', playError);
        }
      }
    } catch (error) {
      console.error('Error accessing camera:', error);
      setScanError(`Camera error: ${error.message}`);
      setDebugInfo('Camera failed to start');
      if (onError) onError('Camera access denied or unavailable');
    }
  };

  const stopCamera = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    if (stream) {
      stream.getTracks().forEach(track => {
        track.stop();
        console.log('Stopped track:', track.kind);
      });
      setStream(null);
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
      videoRef.current.pause();
    }
    
    setIsScanning(false);
    setDebugInfo('');
    scanAttempts.current = 0;
  };

  const scanQRCode = () => {
    const now = Date.now();
    
    if (now - lastScanTime.current < 80) return;
    lastScanTime.current = now;

    if (!videoRef.current || !canvasRef.current || !isScanning) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');

    if (video.readyState < 2) {
      setDebugInfo('Video not ready...');
      return;
    }

    try {
      const { videoWidth, videoHeight } = video;
      
      if (videoWidth === 0 || videoHeight === 0) {
        setDebugInfo('Invalid video dimensions');
        return;
      }

      canvas.width = videoWidth;
      canvas.height = videoHeight;
      
      context.drawImage(video, 0, 0, videoWidth, videoHeight);
      const imageData = context.getImageData(0, 0, videoWidth, videoHeight);
      
      scanAttempts.current++;
      
      let code = null;
      const configs = [
        { inversionAttempts: "dontInvert" },
        { inversionAttempts: "attemptBoth" },
        { inversionAttempts: "invertFirst" },
        { inversionAttempts: "onlyInvert" }
      ];
      
      for (const config of configs) {
        try {
          code = jsQR(imageData.data, imageData.width, imageData.height, config);
          if (code && code.data && code.data.trim()) break;
        } catch (jsqrError) {
          console.log('jsQR config error:', jsqrError);
        }
      }
      
      if (!code) {
        const regions = [
          { 
            x: Math.floor(videoWidth * 0.2), 
            y: Math.floor(videoHeight * 0.2), 
            w: Math.floor(videoWidth * 0.6), 
            h: Math.floor(videoHeight * 0.6) 
          },
          { x: 0, y: 0, w: videoWidth, h: videoHeight },
          { x: 0, y: 0, w: videoWidth, h: Math.floor(videoHeight * 0.7) },
          { x: 0, y: Math.floor(videoHeight * 0.3), w: videoWidth, h: Math.floor(videoHeight * 0.7) }
        ];
        
        for (const region of regions) {
          try {
            if (region.x + region.w <= videoWidth && region.y + region.h <= videoHeight && region.w > 0 && region.h > 0) {
              const regionData = context.getImageData(region.x, region.y, region.w, region.h);
              code = jsQR(regionData.data, regionData.width, regionData.height, { inversionAttempts: "attemptBoth" });
              if (code && code.data && code.data.trim()) break;
            }
          } catch (regionError) {
            continue;
          }
        }
      }
      
      if (!code && scanAttempts.current > 20 && 'BarcodeDetector' in window) {
        tryBarcodeDetectorScan();
        return;
      }
      
      if (code && code.data && code.data.trim()) {
        const scannedData = code.data.trim();
        
        if (lastSuccessfulScan.current === scannedData && (now - lastScanTime.current) < 2000) {
          return;
        }
        
        lastSuccessfulScan.current = scannedData;
        console.log('QR Code detected:', scannedData);
        setDebugInfo(`✓ QR Code found: ${scannedData.substring(0, 30)}...`);
        
        setIsScanning(false);
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
        
        setTimeout(() => {
          if (onScan) onScan(scannedData);
          stopCamera();
          onClose();
        }, 500);
        
        return;
      }
      
      if (scanAttempts.current % 10 === 0) {
        const seconds = Math.floor(scanAttempts.current / 10);
        setDebugInfo(`Scanning... ${seconds}s (${scanAttempts.current} attempts) - ${videoWidth}x${videoHeight}`);
      }
      
      if (showDebugCanvas && debugCanvasRef.current && scanAttempts.current % 5 === 0) {
        const debugCanvas = debugCanvasRef.current;
        const debugContext = debugCanvas.getContext('2d');
        debugCanvas.width = 200;
        debugCanvas.height = 150;
        debugContext.drawImage(canvas, 0, 0, videoWidth, videoHeight, 0, 0, 200, 150);
        
        debugContext.fillStyle = 'red';
        debugContext.font = '10px Arial';
        debugContext.fillText(`${scanAttempts.current}`, 5, 15);
        debugContext.fillText(`${videoWidth}x${videoHeight}`, 5, 30);
      }
      
    } catch (error) {
      console.error('QR scanning error:', error);
      setDebugInfo(`Scan error: ${error.message}`);
    }
  };

  const tryBarcodeDetectorScan = async () => {
    if (!('BarcodeDetector' in window)) return;
    
    try {
      setDebugInfo('Trying BarcodeDetector API...');
      
      if (!videoRef.current || !canvasRef.current) return;
      
      const video = videoRef.current;
      const canvas = canvasRef.current;
      const context = canvas.getContext('2d');
      
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0);
      
      const barcodeDetector = new window.BarcodeDetector({ formats: ['qr_code'] });
      const imageBitmap = await createImageBitmap(canvas);
      const barcodes = await barcodeDetector.detect(imageBitmap);
      
      if (barcodes.length > 0) {
        const scannedData = barcodes[0].rawValue.trim();
        console.log('BarcodeDetector found QR:', scannedData);
        setDebugInfo(`✓ BarcodeDetector found: ${scannedData.substring(0, 30)}...`);
        
        if (onScan) onScan(scannedData);
        stopCamera();
        onClose();
      }
    } catch (error) {
      console.log('BarcodeDetector error:', error);
    }
  };

  const handleManualInput = (value) => {
    if (value && value.trim()) {
      setIsScanning(false);
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      if (onScan) onScan(value.trim());
      stopCamera();
      onClose();
    } else {
      setScanError('Please enter a valid Guest ID.');
    }
  };

  if (!isOpen) return null;

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0,0,0,0.4)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1002
    }}>
      <div style={{
        backgroundColor: '#fff',
        borderRadius: '8px',
        padding: '32px',
        width: '520px',
        maxHeight: '90vh',
        overflow: 'auto',
        boxShadow: '0 4px 20px rgba(0,0,0,0.08)'
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '24px',
          paddingBottom: '16px',
          borderBottom: '1px solid #f0f0f0'
        }}>
          <h2 style={{ margin: 0, fontSize: '18px', fontWeight: '500', color: '#1a1a1a' }}>
            Scan Guest QR Code
          </h2>
          <button
            onClick={() => {
              stopCamera();
              onClose();
            }}
            style={{
              border: 'none',
              background: 'none',
              cursor: 'pointer',
              padding: '6px',
              borderRadius: '4px',
              display: 'flex',
              alignItems: 'center',
              color: '#666'
            }}
          >
            <Close fontSize="small" />
          </button>
        </div>

        <div style={{ textAlign: 'center', marginBottom: '24px' }}>
          <div style={{
            position: 'relative',
            display: 'inline-block',
            borderRadius: '6px',
            overflow: 'hidden',
            backgroundColor: '#fafafa',
            border: '1px solid #e8e8e8'
          }}>
            <video
              ref={videoRef}
              autoPlay
              playsInline
              muted
              style={{
                width: '420px',
                height: '315px',
                objectFit: 'cover',
                display: 'block'
              }}
            />
            <canvas
              ref={canvasRef}
              style={{ display: 'none' }}
            />
            
            {showDebugCanvas && (
              <canvas
                ref={debugCanvasRef}
                style={{
                  position: 'absolute',
                  top: '10px',
                  right: '10px',
                  border: '1px solid #fff',
                  borderRadius: '4px',
                  backgroundColor: '#fff'
                }}
              />
            )}
            
            <div style={{
              position: 'absolute',
              top: '30px',
              left: '30px',
              right: '30px',
              bottom: '30px',
              border: '2px solid #1a1a1a',
              borderRadius: '8px',
              pointerEvents: 'none'
            }}>
              {[
                { top: '-2px', left: '-2px', borderRight: 'transparent', borderBottom: 'transparent' },
                { top: '-2px', right: '-2px', borderLeft: 'transparent', borderBottom: 'transparent' },
                { bottom: '-2px', left: '-2px', borderRight: 'transparent', borderTop: 'transparent' },
                { bottom: '-2px', right: '-2px', borderLeft: 'transparent', borderTop: 'transparent' }
              ].map((corner, index) => (
                <div key={index} style={{
                  position: 'absolute',
                  width: '32px',
                  height: '32px',
                  border: '3px solid #1a1a1a',
                  borderRadius: '4px',
                  ...corner
                }} />
              ))}
            </div>
            
            <div style={{
              position: 'absolute',
              bottom: '12px',
              left: '50%',
              transform: 'translateX(-50%)',
              backgroundColor: 'rgba(0,0,0,0.7)',
              color: '#fff',
              padding: '6px 14px',
              borderRadius: '4px',
              fontSize: '11px',
              fontWeight: '400',
              maxWidth: '380px',
              textAlign: 'center'
            }}>
              {debugInfo || (isScanning ? 'Scanning...' : 'Initializing...')}
            </div>
          </div>
        </div>

        {scanError && (
          <div style={{
            backgroundColor: '#fef2f2',
            color: '#991b1b',
            padding: '12px',
            borderRadius: '4px',
            marginBottom: '16px',
            fontSize: '13px',
            border: '1px solid #fee2e2'
          }}>
            {scanError}
          </div>
        )}

        <div style={{
          textAlign: 'center',
          fontSize: '13px',
          color: '#666',
          marginBottom: '24px',
          lineHeight: '1.6'
        }}>
          Hold the QR code steady within the frame
        </div>

        <div style={{
          borderTop: '1px solid #f0f0f0',
          paddingTop: '20px'
        }}>
          <label style={{
            display: 'block',
            marginBottom: '8px',
            fontSize: '13px',
            fontWeight: '500',
            color: '#4a4a4a'
          }}>
            Or enter Guest ID manually
          </label>
          <div style={{ display: 'flex', gap: '8px' }}>
            <input
              type="text"
              placeholder="Enter Guest ID"
              style={{
                flex: 1,
                padding: '10px 12px',
                border: '1px solid #e0e0e0',
                borderRadius: '4px',
                fontSize: '13px',
                outline: 'none'
              }}
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleManualInput(e.target.value);
                }
              }}
            />
            <button
              onClick={(e) => {
                const input = e.target.parentElement.querySelector('input');
                handleManualInput(input.value);
              }}
              style={{
                padding: '10px 20px',
                border: 'none',
                borderRadius: '4px',
                background: '#1a1a1a',
                color: '#fff',
                cursor: 'pointer',
                fontSize: '13px',
                fontWeight: '500'
              }}
            >
              Submit
            </button>
          </div>
        </div>

        <div style={{
          display: 'flex',
          justifyContent: 'center',
          gap: '8px',
          marginTop: '20px'
        }}>
          <button
            onClick={() => {
              stopCamera();
              setTimeout(() => startCamera(), 300);
            }}
            style={{
              padding: '8px 12px',
              border: '1px solid #e0e0e0',
              borderRadius: '4px',
              background: '#fff',
              color: '#666',
              cursor: 'pointer',
              fontSize: '12px',
              display: 'flex',
              alignItems: 'center',
              gap: '4px'
            }}
          >
            <Refresh fontSize="small" />
            Restart
          </button>
          
          <button
            onClick={() => setShowDebugCanvas(!showDebugCanvas)}
            style={{
              padding: '8px 12px',
              border: '1px solid #e0e0e0',
              borderRadius: '4px',
              background: showDebugCanvas ? '#1a1a1a' : '#fff',
              color: showDebugCanvas ? '#fff' : '#666',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            Debug
          </button>
          
          <button
            onClick={tryBarcodeDetectorScan}
            style={{
              padding: '8px 12px',
              border: '1px solid #e0e0e0',
              borderRadius: '4px',
              background: '#fff',
              color: '#666',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            Alt Method
          </button>
        </div>
      </div>
    </div>
  );
};

const BookingModal = ({ isOpen, onClose, selectedRoom, selectedDates, isMultiDay }) => {
  const [formData, setFormData] = useState({
    guestId: '',
    guestDetails: null,
    selectedRooms: [],
    preferredRoomType: '',
    checkIn: '',
    checkOut: '',
    adults: 2,
    kids: 0,
    mealPlan: '',
    specialRequests: '',
    amenities: '',
    additionalNotes: '',
    status: 'CONFIRMED'
  });
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [loadingGuest, setLoadingGuest] = useState(false);
  const [guestError, setGuestError] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState(null);
  const [availableRooms, setAvailableRooms] = useState([]);
  const [loadingRooms, setLoadingRooms] = useState(false);

  useEffect(() => {
    if (selectedRoom) {
      setFormData(prev => ({
        ...prev,
        selectedRooms: [selectedRoom],
        preferredRoomType: selectedRoom.roomType || ''
      }));
    }
  }, [selectedRoom]);

  useEffect(() => {
    if (isMultiDay && selectedDates && selectedDates.length > 0) {
      const sortedDates = [...selectedDates].sort((a, b) => a - b);
      const startDate = sortedDates[0];
      const endDate = new Date(sortedDates[sortedDates.length - 1]);
      endDate.setDate(endDate.getDate() + 1);
      
      setFormData(prev => ({
        ...prev,
        checkIn: startDate.toISOString().split('T')[0],
        checkOut: endDate.toISOString().split('T')[0]
      }));
    } else if (selectedDates && selectedDates.length === 1) {
      const checkInDate = selectedDates[0];
      const checkOutDate = new Date(checkInDate);
      checkOutDate.setDate(checkOutDate.getDate() + 1);
      
      setFormData(prev => ({
        ...prev,
        checkIn: checkInDate.toISOString().split('T')[0],
        checkOut: checkOutDate.toISOString().split('T')[0]
      }));
    }
  }, [isMultiDay, selectedDates]);

  useEffect(() => {
    if (formData.checkIn && formData.checkOut && !selectedRoom) {
      fetchAvailableRooms();
    }
  }, [formData.checkIn, formData.checkOut]);

  const fetchAvailableRooms = async () => {
    setLoadingRooms(true);
    try {
      const allRooms = await getAllRooms();
      let available = allRooms.filter(room => 
        room.status?.toLowerCase() === 'available'
      );
      
      if (formData.preferredRoomType) {
        available = available.filter(room => 
          room.roomType?.toLowerCase() === formData.preferredRoomType.toLowerCase()
        );
      }
      
      setAvailableRooms(available);
    } catch (error) {
      console.error('Error fetching available rooms:', error);
      setAvailableRooms([]);
    } finally {
      setLoadingRooms(false);
    }
  };

  useEffect(() => {
    if (formData.checkIn && formData.checkOut && !selectedRoom) {
      fetchAvailableRooms();
    }
  }, [formData.checkIn, formData.checkOut, formData.preferredRoomType]);

  const handleRoomSelection = (room, isSelected) => {
    setFormData(prev => ({
      ...prev,
      selectedRooms: isSelected 
        ? [...prev.selectedRooms, room]
        : prev.selectedRooms.filter(r => r.id !== room.id)
    }));
  };

  const handleQRScan = async (scannedData) => {
    setLoadingGuest(true);
    setGuestError(null);
    
    try {
      const guestId = scannedData;
      const guestDetails = await getGuestDetails(guestId);
      
      setFormData(prev => ({
        ...prev,
        guestId: guestId,
        guestDetails: guestDetails
      }));
      
      setShowQRScanner(false);
    } catch (error) {
      console.error('Error processing QR scan:', error);
      setGuestError(`Failed to load guest details: ${error.message}`);
    } finally {
      setLoadingGuest(false);
    }
  };

  const handleQRError = (error) => {
    setGuestError(error);
    setShowQRScanner(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    console.log('Form submission started');
    console.log('Form data:', formData);

    setGuestError(null);
    setSubmitError(null);
    
    if (!formData.guestDetails) {
      setGuestError('Please scan a guest QR code first');
      return;
    }

    if (!formData.checkIn || !formData.checkOut) {
      setGuestError('Please select check-in and check-out dates');
      return;
    }

    if (!formData.selectedRooms || formData.selectedRooms.length === 0) {
      setGuestError('Please select at least one room');
      return;
    }

    const checkInDate = new Date(formData.checkIn);
    const checkOutDate = new Date(formData.checkOut);
    
    if (checkOutDate <= checkInDate) {
      setGuestError('Check-out date must be after check-in date');
      return;
    }

    const totalCapacity = formData.selectedRooms.reduce((sum, room) => sum + (room.capacity || 0), 0);
    const totalGuests = formData.adults + formData.kids;
    
    if (totalGuests > totalCapacity) {
      setGuestError(`Selected rooms can accommodate maximum ${totalCapacity} guests, but you have ${totalGuests} guests`);
      return;
    }

    setSubmitting(true);
    
    try {
      console.log('Creating reservation...');
      
      const reservationRequestData = {
        guestId: formData.guestId.toString(),
        roomIds: formData.selectedRooms.map(room => parseInt(room.id)),
        checkInDate: formData.checkIn,
        checkOutDate: formData.checkOut,
        status: formData.status || 'CONFIRMED'
      };

      console.log('Prepared reservation data:', reservationRequestData);
      
      const reservationResponse = await createReservation(reservationRequestData);
      console.log('Reservation created successfully:', reservationResponse);

      let reservationId = null;
      if (reservationResponse.reservationId) {
        reservationId = reservationResponse.reservationId;
      } else if (reservationResponse.id) {
        reservationId = reservationResponse.id;
      } else {
        throw new Error('No reservation ID returned from server');
      }

      console.log('Using reservation ID:', reservationId);

      for (const room of formData.selectedRooms) {
        const detailsData = {
          reservationId: reservationId,
          guestId: formData.guestId.toString(),
          roomId: parseInt(room.id),
          adults: formData.adults || 2,
          kids: formData.kids || 0,
          roomType: room.roomType || '',
          mealPlan: formData.mealPlan || '',
          specialRequests: formData.specialRequests || '',
          amenities: formData.amenities || '',
          additionalNotes: formData.additionalNotes || ''
        };

        console.log('Creating reservation details for room:', room.roomNumber, detailsData);
        await createReservationDetails(reservationId, detailsData);
      }

      console.log('Booking created successfully!');
      
      const roomNumbers = formData.selectedRooms.map(room => room.roomNumber).join(', ');
      const guestName = formData.guestDetails.name || 
                       `${formData.guestDetails.firstName} ${formData.guestDetails.lastName}`;
      
      alert(`Booking created successfully!\nReservation ID: ${reservationId}\nRooms: ${roomNumbers}\nGuest: ${guestName}\nDates: ${formData.checkIn} to ${formData.checkOut}`);
      
      resetForm();
      onClose();
      
    } catch (error) {
      console.error('Booking creation error:', error);
      setSubmitError(`Failed to create booking: ${error.message}`);
      
      console.error('Full error details:', {
        message: error.message,
        stack: error.stack,
        formData
      });
    } finally {
      setSubmitting(false);
    }
  };

  const resetForm = () => {
    setFormData({
      guestId: '',
      guestDetails: null,
      selectedRooms: [],
      preferredRoomType: '',
      checkIn: '',
      checkOut: '',
      adults: 2,
      kids: 0,
      mealPlan: '',
      specialRequests: '',
      amenities: '',
      additionalNotes: '',
      status: 'CONFIRMED'
    });
    setGuestError(null);
    setSubmitError(null);
    setAvailableRooms([]);
  };

  if (!isOpen) return null;

  const formatDateRange = () => {
    if (!selectedDates || selectedDates.length === 0) return '';
    if (selectedDates.length === 1) return selectedDates[0].toDateString();
    
    const sortedDates = [...selectedDates].sort((a, b) => a - b);
    return `${sortedDates[0].toDateString()} - ${sortedDates[sortedDates.length - 1].toDateString()}`;
  };

  const getTotalCapacity = () => {
    return formData.selectedRooms.reduce((sum, room) => sum + (room.capacity || 0), 0);
  };

  const getTotalPrice = () => {
    const nights = formData.checkIn && formData.checkOut 
      ? Math.ceil((new Date(formData.checkOut) - new Date(formData.checkIn)) / (1000 * 60 * 60 * 24))
      : 1;
    return formData.selectedRooms.reduce((sum, room) => sum + ((room.pricePerNight || 0) * nights), 0);
  };

  const getUniqueRoomTypes = () => {
    try {
      const allRooms = JSON.parse(localStorage.getItem('allRooms') || '[]');
      return [...new Set(allRooms.map(room => room.roomType).filter(type => type))];
    } catch {
      return ['Standard', 'Deluxe', 'Suite', 'Presidential Suite', 'Family Room', 'Twin Room'];
    }
  };

  return (
    <>
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.4)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000
      }}>
        <div style={{
          backgroundColor: '#fff',
          borderRadius: '8px',
          padding: '32px',
          width: '700px',
          maxHeight: '90vh',
          overflow: 'auto',
          boxShadow: '0 4px 20px rgba(0,0,0,0.08)'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '24px',
            paddingBottom: '16px',
            borderBottom: '1px solid #f0f0f0'
          }}>
            <div>
              <h2 style={{ margin: 0, fontSize: '18px', fontWeight: '500', color: '#1a1a1a' }}>
                {isMultiDay ? 'Add Multi-Day Booking' : 'Add Booking'}
              </h2>
              {selectedDates && selectedDates.length > 0 && (
                <p style={{ margin: '6px 0 0 0', fontSize: '13px', color: '#666' }}>
                  {formatDateRange()} ({selectedDates.length} day{selectedDates.length !== 1 ? 's' : ''})
                </p>
              )}
              {formData.selectedRooms.length > 0 && (
                <p style={{ margin: '4px 0 0 0', fontSize: '13px', color: '#1a1a1a' }}>
                  {formData.selectedRooms.length} room{formData.selectedRooms.length !== 1 ? 's' : ''} • {getTotalCapacity()} guests • ${getTotalPrice().toFixed(2)}
                </p>
              )}
            </div>
            <button
              onClick={() => {
                resetForm();
                onClose();
              }}
              style={{
                border: 'none',
                background: 'none',
                cursor: 'pointer',
                padding: '6px',
                borderRadius: '4px',
                display: 'flex',
                alignItems: 'center',
                color: '#666'
              }}
            >
              <Close fontSize="small" />
            </button>
          </div>

          <form onSubmit={handleSubmit}>
            <div style={{ display: 'grid', gap: '20px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '10px', fontSize: '14px', fontWeight: '500', color: '#1a1a1a' }}>
                  Guest Information *
                </label>
                
                {!formData.guestDetails ? (
                  <div>
                    <button
                      type="button"
                      onClick={() => setShowQRScanner(true)}
                      disabled={loadingGuest}
                      style={{
                        width: '100%',
                        padding: '14px 20px',
                        border: '1px dashed #d0d0d0',
                        borderRadius: '6px',
                        background: loadingGuest ? '#fafafa' : '#fff',
                        color: loadingGuest ? '#999' : '#1a1a1a',
                        cursor: loadingGuest ? 'not-allowed' : 'pointer',
                        fontSize: '14px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '10px',
                        fontWeight: '500'
                      }}
                    >
                      {loadingGuest ? (
                        <>Loading...</>
                      ) : (
                        <>
                          <QrCodeScanner style={{ fontSize: '20px' }} />
                          Scan Guest QR Code
                        </>
                      )}
                    </button>
                    
                    {guestError && (
                      <div style={{
                        marginTop: '10px',
                        padding: '10px 12px',
                        backgroundColor: '#fef2f2',
                        color: '#991b1b',
                        borderRadius: '4px',
                        fontSize: '13px',
                        border: '1px solid #fee2e2'
                      }}>
                        {guestError}
                      </div>
                    )}
                  </div>
                ) : (
                  <div style={{
                    border: '1px solid #e8e8e8',
                    borderRadius: '6px',
                    padding: '14px',
                    backgroundColor: '#fafafa'
                  }}>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      marginBottom: '10px'
                    }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <Person style={{ color: '#1a1a1a', fontSize: '18px' }} />
                        <span style={{ fontWeight: '500', color: '#1a1a1a', fontSize: '14px' }}>Guest Selected</span>
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          setFormData(prev => ({
                            ...prev,
                            guestId: '',
                            guestDetails: null
                          }));
                          setGuestError(null);
                        }}
                        style={{
                          padding: '5px 10px',
                          border: '1px solid #e0e0e0',
                          borderRadius: '4px',
                          background: '#fff',
                          color: '#666',
                          cursor: 'pointer',
                          fontSize: '12px',
                          fontWeight: '500'
                        }}
                      >
                        Change
                      </button>
                    </div>
                    <div style={{ fontSize: '13px', color: '#4a4a4a', lineHeight: '1.6' }}>
                      <div style={{ marginBottom: '3px' }}>
                        <strong>Name:</strong> {formData.guestDetails.name || `${formData.guestDetails.firstName} ${formData.guestDetails.lastName}`}
                      </div>
                      <div style={{ marginBottom: '3px' }}>
                        <strong>ID:</strong> {formData.guestId}
                      </div>
                      {formData.guestDetails.email && (
                        <div style={{ marginBottom: '3px' }}>
                          <strong>Email:</strong> {formData.guestDetails.email}
                        </div>
                      )}
                      {formData.guestDetails.phone && (
                        <div>
                          <strong>Phone:</strong> {formData.guestDetails.phone}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '10px', fontSize: '14px', fontWeight: '500', color: '#1a1a1a' }}>
                  Room Selection *
                </label>
                
                <div style={{ marginBottom: '12px' }}>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Preferred Room Type
                  </label>
                  <select
                    value={formData.preferredRoomType}
                    onChange={(e) => setFormData({...formData, preferredRoomType: e.target.value})}
                    disabled={!!selectedRoom}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none',
                      background: selectedRoom ? '#fafafa' : '#fff',
                      color: selectedRoom ? '#666' : '#1a1a1a',
                      cursor: selectedRoom ? 'not-allowed' : 'pointer'
                    }}
                  >
                    <option value="">All Room Types</option>
                    {getUniqueRoomTypes().map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
                
                {selectedRoom ? (
                  <div style={{
                    border: '1px solid #e8e8e8',
                    borderRadius: '6px',
                    padding: '14px',
                    backgroundColor: '#fafafa'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>
                      <span style={{ fontWeight: '500', color: '#1a1a1a', fontSize: '13px' }}>
                        Pre-selected from Calendar
                      </span>
                      <button
                        type="button"
                        onClick={() => {
                          setFormData(prev => ({ 
                            ...prev, 
                            selectedRooms: [],
                            preferredRoomType: ''
                          }));
                          fetchAvailableRooms();
                        }}
                        style={{
                          padding: '5px 10px',
                          border: '1px solid #e0e0e0',
                          borderRadius: '4px',
                          background: '#fff',
                          color: '#666',
                          cursor: 'pointer',
                          fontSize: '12px',
                          fontWeight: '500'
                        }}
                      >
                        Change
                      </button>
                    </div>
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '10px',
                      padding: '10px',
                      backgroundColor: '#fff',
                      borderRadius: '4px'
                    }}>
                      <div style={{
                        width: '8px',
                        height: '8px',
                        borderRadius: '50%',
                        backgroundColor: '#1a1a1a'
                      }}></div>
                      <div>
                        <div style={{ fontWeight: '500', fontSize: '14px' }}>
                          Room {selectedRoom.roomNumber}
                        </div>
                        <div style={{ fontSize: '12px', color: '#666' }}>
                          {selectedRoom.roomType} • {selectedRoom.capacity} guests • ${selectedRoom.pricePerNight}/night
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div>
                    {loadingRooms ? (
                      <div style={{ textAlign: 'center', padding: '16px', color: '#666', fontSize: '13px' }}>
                        Loading available rooms...
                      </div>
                    ) : availableRooms.length > 0 ? (
                      <div style={{
                        border: '1px solid #e8e8e8',
                        borderRadius: '6px',
                        padding: '12px',
                        maxHeight: '300px',
                        overflowY: 'auto'
                      }}>
                        <div style={{ marginBottom: '10px', fontSize: '13px', color: '#666' }}>
                          {formData.preferredRoomType 
                            ? `Available ${formData.preferredRoomType} rooms:`
                            : 'Available rooms:'
                          }
                          <span style={{ color: '#1a1a1a', fontWeight: '500', marginLeft: '6px' }}>
                            ({availableRooms.length})
                          </span>
                        </div>
                        <div style={{ display: 'grid', gap: '6px' }}>
                          {availableRooms.map(room => {
                            const isSelected = formData.selectedRooms.some(r => r.id === room.id);
                            return (
                              <div
                                key={room.id}
                                onClick={() => handleRoomSelection(room, !isSelected)}
                                style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  gap: '10px',
                                  padding: '10px',
                                  border: `1px solid ${isSelected ? '#1a1a1a' : '#e8e8e8'}`,
                                  borderRadius: '4px',
                                  cursor: 'pointer',
                                  backgroundColor: isSelected ? '#fafafa' : '#fff'
                                }}
                              >
                                <input
                                  type="checkbox"
                                  checked={isSelected}
                                  onChange={() => {}}
                                  style={{ margin: 0 }}
                                />
                                <div style={{
                                  width: '8px',
                                  height: '8px',
                                  borderRadius: '50%',
                                  backgroundColor: '#1a1a1a'
                                }}></div>
                                <div style={{ flex: 1 }}>
                                  <div style={{ fontWeight: '500', fontSize: '13px' }}>
                                    Room {room.roomNumber}
                                  </div>
                                  <div style={{ fontSize: '12px', color: '#666' }}>
                                    {room.roomType} • {room.capacity} guests • Floor {room.floor}
                                  </div>
                                </div>
                                <div style={{ fontSize: '13px', color: '#1a1a1a', fontWeight: '500' }}>
                                  ${room.pricePerNight}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : (
                      <div style={{
                        border: '1px dashed #d0d0d0',
                        borderRadius: '6px',
                        padding: '16px',
                        textAlign: 'center',
                        color: '#666',
                        fontSize: '13px'
                      }}>
                        {formData.checkIn && formData.checkOut 
                          ? (formData.preferredRoomType 
                              ? `No ${formData.preferredRoomType} rooms available`
                              : 'No rooms available'
                            )
                          : 'Select dates to view available rooms'
                        }
                      </div>
                    )}
                  </div>
                )}
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr', gap: '12px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Check-in *
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.checkIn}
                    onChange={(e) => setFormData({...formData, checkIn: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none'
                    }}
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Check-out *
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.checkOut}
                    onChange={(e) => setFormData({...formData, checkOut: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none'
                    }}
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Adults
                  </label>
                  <select
                    value={formData.adults}
                    onChange={(e) => setFormData({...formData, adults: parseInt(e.target.value)})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none',
                      background: '#fff'
                    }}
                  >
                    {[1,2,3,4,5,6,7,8].map(num => (
                      <option key={num} value={num}>{num}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Kids
                  </label>
                  <select
                    value={formData.kids}
                    onChange={(e) => setFormData({...formData, kids: parseInt(e.target.value)})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none',
                      background: '#fff'
                    }}
                  >
                    {[0,1,2,3,4,5,6].map(num => (
                      <option key={num} value={num}>{num}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Status
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData({...formData, status: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none',
                      background: '#fff'
                    }}
                  >
                    <option value="CONFIRMED">Confirmed</option>
                    <option value="PENDING">Pending</option>
                    <option value="CHECKED_IN">Checked In</option>
                    <option value="CHECKED_OUT">Checked Out</option>
                    <option value="CANCELLED">Cancelled</option>
                  </select>
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Meal Plan
                  </label>
                  <select
                    value={formData.mealPlan}
                    onChange={(e) => setFormData({...formData, mealPlan: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none',
                      background: '#fff'
                    }}
                  >
                    <option value="">Select Meal Plan</option>
                    <option value="Room Only">Room Only</option>
                    <option value="Breakfast">Breakfast</option>
                    <option value="Half Board">Half Board</option>
                    <option value="Full Board">Full Board</option>
                    <option value="All Inclusive">All Inclusive</option>
                  </select>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                    Amenities
                  </label>
                  <input
                    type="text"
                    value={formData.amenities}
                    onChange={(e) => setFormData({...formData, amenities: e.target.value})}
                    placeholder="WiFi, Pool, Spa"
                    style={{
                      width: '100%',
                      padding: '8px 10px',
                      border: '1px solid #e0e0e0',
                      borderRadius: '4px',
                      fontSize: '13px',
                      outline: 'none'
                    }}
                  />
                </div>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                  Special Requests
                </label>
                <textarea
                  value={formData.specialRequests}
                  onChange={(e) => setFormData({...formData, specialRequests: e.target.value})}
                  rows="2"
                  placeholder="Late check-in, ground floor, extra pillows"
                  style={{
                    width: '100%',
                    padding: '8px 10px',
                    border: '1px solid #e0e0e0',
                    borderRadius: '4px',
                    fontSize: '13px',
                    resize: 'vertical',
                    outline: 'none'
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                  Additional Notes
                </label>
                <textarea
                  value={formData.additionalNotes}
                  onChange={(e) => setFormData({...formData, additionalNotes: e.target.value})}
                  rows="3"
                  placeholder="Any other important information"
                  style={{
                    width: '100%',
                    padding: '8px 10px',
                    border: '1px solid #e0e0e0',
                    borderRadius: '4px',
                    fontSize: '13px',
                    resize: 'vertical',
                    outline: 'none'
                  }}
                />
              </div>

              <div style={{ display: 'flex', gap: '10px', paddingTop: '8px' }}>
                <button
                  type="button"
                  onClick={() => {
                    resetForm();
                    onClose();
                  }}
                  style={{
                    flex: 1,
                    padding: '10px',
                    border: '1px solid #e0e0e0',
                    borderRadius: '4px',
                    background: '#fff',
                    color: '#666',
                    cursor: 'pointer',
                    fontSize: '14px',
                    fontWeight: '500'
                  }}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={submitting}
                  style={{
                    flex: 1,
                    padding: '10px',
                    border: 'none',
                    borderRadius: '4px',
                    background: submitting ? '#999' : '#1a1a1a',
                    color: '#fff',
                    cursor: submitting ? 'not-allowed' : 'pointer',
                    fontSize: '14px',
                    fontWeight: '500'
                  }}
                >
                  {submitting ? 'Creating...' : 'Create Booking'}
                </button>
              </div>
            </div>

            {(guestError || submitError) && (
              <div style={{
                marginTop: '16px',
                padding: '12px',
                backgroundColor: '#fef2f2',
                color: '#991b1b',
                borderRadius: '4px',
                fontSize: '13px',
                border: '1px solid #fee2e2',
                lineHeight: '1.5'
              }}>
                {guestError || submitError}
              </div>
            )}
          </form>
        </div>
      </div>

      <QRScanner
        isOpen={showQRScanner}
        onClose={() => setShowQRScanner(false)}
        onScan={handleQRScan}
        onError={handleQRError}
      />
    </>
  );
};

const ReceptionistDashboard = () => {
  const today = new Date();
  const [selectedYear, setSelectedYear] = useState(today.getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(today.getMonth());
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedFloor, setSelectedFloor] = useState('');
  const [selectedRoomType, setSelectedRoomType] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [selectedDates, setSelectedDates] = useState([]);
  const [isMultiDay, setIsMultiDay] = useState(false);
  const [isSelecting, setIsSelecting] = useState(false);
  const [selectionStart, setSelectionStart] = useState(null);
  const [roomColumnWidth, setRoomColumnWidth] = useState(280);
  const [zoomLevel, setZoomLevel] = useState(100);
  const [isResizing, setIsResizing] = useState(false);
  const containerRef = useRef(null);
  const [rooms, setRooms] = useState([]);
  const [expandedRoomTypes, setExpandedRoomTypes] = useState({});

  const fetchRooms = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('Fetching rooms from API...');
      const roomsData = await getAllRooms();
      
      if (!roomsData || roomsData.length === 0) {
        console.warn('No rooms returned from API');
        setRooms([]);
        setExpandedRoomTypes({});
        localStorage.removeItem('allRooms');
        return;
      }
      
      console.log('Successfully fetched rooms:', roomsData.length);
      setRooms(roomsData);
      
      localStorage.setItem('allRooms', JSON.stringify(roomsData));
      
      const roomTypes = [...new Set(roomsData.map(room => room.roomType).filter(type => type))];
      const expanded = {};
      roomTypes.forEach(type => {
        expanded[type] = true;
      });
      setExpandedRoomTypes(expanded);
      
    } catch (err) {
      console.error('Error fetching rooms:', err);
      setError(`Failed to load rooms: ${err.message}`);
      setRooms([]);
      setExpandedRoomTypes({});
      localStorage.removeItem('allRooms');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRooms();
  }, [selectedYear, selectedMonth]);

  const handleMouseDown = useCallback((e) => {
    e.preventDefault();
    setIsResizing(true);
    
    const startX = e.clientX;
    const startWidth = roomColumnWidth;
    
    const handleMouseMove = (moveEvent) => {
      const deltaX = moveEvent.clientX - startX;
      const newWidth = Math.max(200, Math.min(500, startWidth + deltaX));
      setRoomColumnWidth(newWidth);
    };
    
    const handleMouseUp = () => {
      setIsResizing(false);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = 'default';
      document.body.style.userSelect = 'auto';
    };
    
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  }, [roomColumnWidth]);

  const handleZoomIn = useCallback(() => {
    setZoomLevel(prev => Math.min(200, prev + 25));
  }, []);

  const handleZoomOut = useCallback(() => {
    setZoomLevel(prev => Math.max(50, prev - 25));
  }, []);

  const resetZoom = useCallback(() => {
    setZoomLevel(100);
  }, []);

  const years = [2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029];
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const getDaysInMonth = (year, month) => {
    return new Date(year, month + 1, 0).getDate();
  };

  const getCurrentMonthDays = () => {
    const daysInMonth = getDaysInMonth(selectedYear, selectedMonth);
    return Array.from({length: daysInMonth}, (_, i) => i + 1);
  };

  const getDateInfo = (day) => {
    const date = new Date(selectedYear, selectedMonth, day);
    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
    return { day, dayName };
  };

  const isCurrentDate = (day) => {
    const currentDate = new Date();
    return day === currentDate.getDate() && 
           selectedMonth === currentDate.getMonth() && 
           selectedYear === currentDate.getFullYear();
  };

  const getRoomStatusColor = (status) => {
    const normalizedStatus = status?.toLowerCase() || 'unknown';
    switch(normalizedStatus) {
      case 'available':
      case 'vacant': 
        return '#1a1a1a';
      case 'occupied': 
      case 'booked':
        return '#666';
      case 'checkout': 
      case 'check-out':
        return '#999';
      case 'checkin': 
      case 'check-in':
        return '#4a4a4a';
      case 'maintenance': 
      case 'out-of-order':
        return '#991b1b';
      case 'dirty': 
      case 'cleaning':
        return '#b45309';
      default: 
        return '#d0d0d0';
    }
  };

  const navigateMonth = (direction) => {
    if (direction === 'prev') {
      if (selectedMonth === 0) {
        setSelectedMonth(11);
        setSelectedYear(prev => prev - 1);
      } else {
        setSelectedMonth(prev => prev - 1);
      }
    } else {
      if (selectedMonth === 11) {
        setSelectedMonth(0);
        setSelectedYear(prev => prev + 1);
      } else {
        setSelectedMonth(prev => prev + 1);
      }
    }
  };

  const goToToday = () => {
    const today = new Date();
    setSelectedYear(today.getFullYear());
    setSelectedMonth(today.getMonth());
  };

  const handleAddBooking = (room = null, dates = []) => {
    setSelectedRoom(room);
    setSelectedDates(Array.isArray(dates) ? dates : []);
    setIsMultiDay(Array.isArray(dates) && dates.length > 1);
    setShowBookingModal(true);
  };

  const handleCellClick = useCallback((room, day) => {
    if (!room.status || room.status.toLowerCase() !== 'available') return;

    const clickedDate = new Date(selectedYear, selectedMonth, day);
    
    if (!isSelecting) {
      setSelectionStart({ room, day });
      setSelectedDates([clickedDate]);
      setSelectedRoom(room);
      setIsSelecting(true);
      setIsMultiDay(false);
    }
  }, [selectedYear, selectedMonth, isSelecting]);

  const handleCellMouseEnter = useCallback((room, day) => {
    if (!isSelecting || !selectionStart || room.id !== selectionStart.room.id) return;
    if (!room.status || room.status.toLowerCase() !== 'available') return;

    const startDay = Math.min(selectionStart.day, day);
    const endDay = Math.max(selectionStart.day, day);
    
    const dates = [];
    for (let d = startDay; d <= endDay; d++) {
      dates.push(new Date(selectedYear, selectedMonth, d));
    }
    
    setSelectedDates(dates);
    setIsMultiDay(dates.length > 1);
  }, [isSelecting, selectionStart, selectedYear, selectedMonth]);

  const handleMouseUp = useCallback(() => {
    if (isSelecting && selectedDates.length > 0) {
      if (selectedDates.length > 1) {
        setTimeout(() => handleAddBooking(selectedRoom, selectedDates), 100);
      }
      setIsSelecting(false);
      setSelectionStart(null);
    }
  }, [isSelecting, selectedDates, selectedRoom]);

  const handleClearSelection = useCallback(() => {
    setSelectedDates([]);
    setSelectedRoom(null);
    setIsSelecting(false);
    setSelectionStart(null);
    setIsMultiDay(false);
  }, []);

  const isDateSelected = useCallback((room, day) => {
    if (!selectedDates.length || !selectedRoom || selectedRoom.id !== room.id) return false;
    return selectedDates.some(date => 
      date.getDate() === day && 
      date.getMonth() === selectedMonth && 
      date.getFullYear() === selectedYear
    );
  }, [selectedDates, selectedRoom, selectedMonth, selectedYear]);

  const toggleRoomType = useCallback((roomType) => {
    setExpandedRoomTypes(prev => ({
      ...prev,
      [roomType]: !prev[roomType]
    }));
  }, []);

  const filteredRooms = rooms.filter(room => {
    const matchesSearch = (room.roomNumber?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
                         (room.roomType?.toLowerCase() || '').includes(searchTerm.toLowerCase());
    const matchesFloor = !selectedFloor || room.floor?.toString() === selectedFloor;
    const matchesType = !selectedRoomType || room.roomType?.toLowerCase().includes(selectedRoomType.toLowerCase());
    const matchesStatus = !selectedStatus || (room.status?.toLowerCase() || 'unknown') === selectedStatus.toLowerCase();
    
    return matchesSearch && matchesFloor && matchesType && matchesStatus;
  });

  const groupedRooms = filteredRooms.reduce((acc, room) => {
    const roomType = room.roomType || 'Unknown';
    if (!acc[roomType]) {
      acc[roomType] = [];
    }
    acc[roomType].push(room);
    return acc;
  }, {});

  const uniqueFloors = [...new Set(rooms.map(room => room.floor).filter(floor => floor != null))].sort((a, b) => a - b);
  const uniqueRoomTypes = [...new Set(rooms.map(room => room.roomType).filter(type => type != null))];
  const uniqueStatuses = [...new Set(rooms.map(room => room.status?.toLowerCase()).filter(status => status != null))];
  const commonStatuses = ['available', 'occupied', 'checkout', 'checkin', 'maintenance', 'dirty'];
  const roomStatuses = [...new Set([...uniqueStatuses, ...commonStatuses])];

  const dayColumnWidth = Math.max(50, 70 * (zoomLevel / 100));

  const styles = {
    container: {
      backgroundColor: '#fafafa',
      minHeight: '100vh',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
      userSelect: isResizing ? 'none' : 'auto'
    },
    header: {
      backgroundColor: '#fff',
      borderBottom: '1px solid #f0f0f0',
      padding: '20px 32px',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    title: {
      fontSize: '20px',
      fontWeight: '500',
      color: '#1a1a1a',
      margin: 0
    },
    breadcrumb: {
      fontSize: '13px',
      color: '#999',
      marginLeft: '12px'
    },
    addButton: {
      backgroundColor: '#1a1a1a',
      color: '#fff',
      border: 'none',
      borderRadius: '4px',
      padding: '10px 16px',
      display: 'flex',
      alignItems: 'center',
      gap: '6px',
      cursor: 'pointer',
      fontSize: '13px',
      fontWeight: '500'
    },
    controlsContainer: {
      backgroundColor: '#fff',
      borderBottom: '1px solid #f0f0f0',
      padding: '20px 32px'
    },
    yearTabs: {
      display: 'flex',
      gap: '16px',
      marginBottom: '16px',
      borderBottom: '1px solid #f0f0f0',
      paddingBottom: '12px'
    },
    yearTab: {
      background: 'none',
      border: 'none',
      padding: '6px 10px',
      cursor: 'pointer',
      fontSize: '13px',
      color: '#999',
      borderRadius: '4px',
      fontWeight: '400'
    },
    activeYear: {
      color: '#1a1a1a',
      backgroundColor: '#fafafa',
      fontWeight: '500'
    },
    monthControlsWrapper: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'flex-start',
      gap: '20px',
      flexWrap: 'wrap'
    },
    monthTabs: {
      display: 'flex',
      gap: '12px',
      flexWrap: 'wrap',
      marginBottom: '12px'
    },
    monthTab: {
      background: 'none',
      border: 'none',
      padding: '6px 10px',
      cursor: 'pointer',
      fontSize: '13px',
      color: '#999',
      borderRadius: '4px',
      fontWeight: '400'
    },
    activeMonth: {
      color: '#1a1a1a',
      backgroundColor: '#fafafa',
      fontWeight: '500'
    },
    controls: {
      display: 'flex',
      alignItems: 'center',
      gap: '10px',
      flexWrap: 'wrap'
    },
    searchContainer: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center'
    },
    searchInput: {
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      padding: '8px 12px 8px 36px',
      fontSize: '13px',
      outline: 'none',
      width: '200px',
      backgroundColor: '#fff'
    },
    searchIcon: {
      position: 'absolute',
      left: '12px',
      color: '#999',
      fontSize: '16px'
    },
    select: {
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      padding: '8px 12px',
      fontSize: '13px',
      outline: 'none',
      background: '#fff',
      minWidth: '120px',
      color: '#1a1a1a'
    },
    navigationControls: {
      display: 'flex',
      alignItems: 'center',
      gap: '4px'
    },
    navButton: {
      border: '1px solid #e0e0e0',
      background: '#fff',
      cursor: 'pointer',
      padding: '6px',
      borderRadius: '4px',
      display: 'flex',
      alignItems: 'center',
      color: '#666'
    },
    zoomControls: {
      display: 'flex',
      alignItems: 'center',
      gap: '0',
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      backgroundColor: '#fff',
      overflow: 'hidden'
    },
    zoomButton: {
      border: 'none',
      background: 'none',
      cursor: 'pointer',
      padding: '8px',
      display: 'flex',
      alignItems: 'center',
      color: '#666'
    },
    zoomLevel: {
      padding: '8px 12px',
      fontSize: '12px',
      color: '#666',
      cursor: 'pointer',
      minWidth: '50px',
      textAlign: 'center',
      borderLeft: '1px solid #e0e0e0',
      borderRight: '1px solid #e0e0e0',
      backgroundColor: '#fff'
    },
    selectionControls: {
      backgroundColor: '#fafafa',
      border: '1px solid #e8e8e8',
      borderRadius: '4px',
      padding: '12px 16px',
      marginTop: '16px'
    },
    clearSelectionButton: {
      padding: '6px 12px',
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      background: '#fff',
      color: '#666',
      cursor: 'pointer',
      fontSize: '12px',
      fontWeight: '500'
    },
    bookSelectedButton: {
      padding: '6px 12px',
      border: 'none',
      borderRadius: '4px',
      background: '#1a1a1a',
      color: '#fff',
      cursor: 'pointer',
      fontSize: '12px',
      fontWeight: '500'
    },
    calendarWrapper: {
      margin: '24px 32px',
      border: '1px solid #e8e8e8',
      borderRadius: '6px',
      overflow: 'hidden',
      backgroundColor: '#fff'
    },
    calendarContainer: {
      overflow: 'auto',
      maxHeight: 'calc(100vh - 300px)',
      transform: `scale(${zoomLevel / 100})`,
      transformOrigin: 'top left'
    },
    calendarHeader: {
      display: 'flex',
      borderBottom: '1px solid #e8e8e8',
      backgroundColor: '#fafafa',
      position: 'sticky',
      top: 0,
      zIndex: 10
    },
    roomsColumn: {
      width: `${roomColumnWidth}px`,
      minWidth: `${roomColumnWidth}px`,
      padding: '12px 16px',
      fontWeight: '500',
      fontSize: '13px',
      borderRight: '1px solid #e8e8e8',
      backgroundColor: '#fafafa',
      display: 'flex',
      alignItems: 'center',
      position: 'relative'
    },
    resizeHandle: {
      position: 'absolute',
      right: '-2px',
      top: 0,
      bottom: 0,
      width: '4px',
      cursor: 'col-resize',
      backgroundColor: isResizing ? 'rgba(26, 26, 26, 0.1)' : 'transparent',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 11
    },
    dayColumn: {
      minWidth: `${dayColumnWidth}px`,
      width: `${dayColumnWidth}px`,
      padding: '8px 4px',
      textAlign: 'center',
      borderRight: '1px solid #f0f0f0',
      fontSize: '11px',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      color: '#666'
    },
    currentDay: {
      backgroundColor: '#fafafa',
      color: '#1a1a1a',
      fontWeight: '500'
    },
    roomTypeRow: {
      display: 'flex',
      borderBottom: '1px solid #f0f0f0',
      backgroundColor: '#fafafa'
    },
    roomTypeHeader: {
      width: `${roomColumnWidth}px`,
      minWidth: `${roomColumnWidth}px`,
      padding: '12px 16px',
      fontWeight: '500',
      fontSize: '13px',
      borderRight: '1px solid #e8e8e8',
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      cursor: 'pointer',
      backgroundColor: '#fafafa',
      color: '#1a1a1a'
    },
    roomRow: {
      display: 'flex',
      borderBottom: '1px solid #f0f0f0',
      backgroundColor: '#fff'
    },
    roomCell: {
      width: `${roomColumnWidth}px`,
      minWidth: `${roomColumnWidth}px`,
      padding: '10px 16px',
      fontSize: '13px',
      borderRight: '1px solid #e8e8e8',
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      backgroundColor: '#fff'
    },
    statusIndicator: {
      width: '8px',
      height: '8px',
      borderRadius: '50%',
      flexShrink: 0
    },
    dayCell: {
      minWidth: `${dayColumnWidth}px`,
      width: `${dayColumnWidth}px`,
      minHeight: '50px',
      borderRight: '1px solid #f0f0f0',
      position: 'relative',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      userSelect: 'none'
    },
    todayButton: {
      position: 'fixed',
      bottom: '24px',
      right: '32px',
      display: 'flex',
      alignItems: 'center',
      gap: '6px',
      border: '1px solid #e0e0e0',
      borderRadius: '4px',
      padding: '10px 14px',
      background: '#fff',
      cursor: 'pointer',
      fontSize: '13px',
      fontWeight: '500',
      boxShadow: '0 2px 8px rgba(0,0,0,0.06)',
      color: '#1a1a1a'
    }
  };

  return (
    <div style={styles.container} onMouseUp={handleMouseUp}>
      <div style={styles.header}>
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <h1 style={styles.title}>Front Desk</h1>
          <span style={styles.breadcrumb}>Home / Front Desk</span>
        </div>
        <button style={styles.addButton} onClick={() => handleAddBooking()}>
          <Add fontSize="small" />
          Add Booking
        </button>
      </div>

      <div style={styles.controlsContainer}>
        <div style={styles.yearTabs}>
          {years.map(year => (
            <button
              key={year}
              style={{
                ...styles.yearTab,
                ...(year === selectedYear ? styles.activeYear : {})
              }}
              onClick={() => setSelectedYear(year)}
            >
              {year}
            </button>
          ))}
        </div>

        <div style={styles.monthControlsWrapper}>
          <div>
            <div style={styles.monthTabs}>
              {months.map((monthName, index) => (
                <button
                  key={index}
                  style={{
                    ...styles.monthTab,
                    ...(index === selectedMonth ? styles.activeMonth : {})
                  }}
                  onClick={() => setSelectedMonth(index)}
                >
                  {monthName}
                </button>
              ))}
            </div>
          </div>

          <div style={styles.controls}>
            <div style={styles.searchContainer}>
              <Search style={styles.searchIcon} />
              <input
                type="text"
                placeholder="Search rooms"
                style={styles.searchInput}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <select style={styles.select} value={selectedFloor} onChange={(e) => setSelectedFloor(e.target.value)}>
              <option value="">All Floors</option>
              {uniqueFloors.map(floor => (
                <option key={floor} value={floor}>Floor {floor}</option>
              ))}
            </select>

            <select style={styles.select} value={selectedRoomType} onChange={(e) => setSelectedRoomType(e.target.value)}>
              <option value="">All Types</option>
              {uniqueRoomTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>

            <select style={styles.select} value={selectedStatus} onChange={(e) => setSelectedStatus(e.target.value)}>
              <option value="">All Statuses</option>
              {roomStatuses.map(status => (
                <option key={status} value={status}>{status.charAt(0).toUpperCase() + status.slice(1)}</option>
              ))}
            </select>

            <div style={styles.navigationControls}>
              <button style={styles.navButton} onClick={() => navigateMonth('prev')}>
                <ChevronLeft fontSize="small" />
              </button>
              <button style={styles.navButton} onClick={() => navigateMonth('next')}>
                <ChevronRight fontSize="small" />
              </button>
            </div>

            <div style={styles.zoomControls}>
              <button 
                style={styles.zoomButton} 
                onClick={handleZoomOut} 
                disabled={zoomLevel <= 50}
              >
                <ZoomOut fontSize="small" />
              </button>
              <div style={styles.zoomLevel} onClick={resetZoom}>
                {zoomLevel}%
              </div>
              <button 
                style={styles.zoomButton} 
                onClick={handleZoomIn} 
                disabled={zoomLevel >= 200}
              >
                <ZoomIn fontSize="small" />
              </button>
            </div>
          </div>
        </div>

        {(isSelecting || selectedDates.length > 0) && (
          <div style={styles.selectionControls}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px', flexWrap: 'wrap' }}>
              <span style={{ fontSize: '13px', color: '#1a1a1a', fontWeight: '500' }}>
                {isSelecting 
                  ? `Selecting dates... (${selectedDates.length} day${selectedDates.length !== 1 ? 's' : ''})`
                  : `${selectedDates.length} day${selectedDates.length !== 1 ? 's' : ''} selected for Room ${selectedRoom?.roomNumber}`
                }
              </span>
              <div style={{ display: 'flex', gap: '8px' }}>
                <button style={styles.clearSelectionButton} onClick={handleClearSelection}>
                  Clear
                </button>
                {!isSelecting && selectedDates.length > 0 && (
                  <button
                    style={styles.bookSelectedButton}
                    onClick={() => handleAddBooking(selectedRoom, selectedDates)}
                  >
                    Book Selected Dates
                  </button>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {loading && (
        <div style={{ textAlign: 'center', padding: '40px', color: '#999', fontSize: '13px' }}>
          Loading rooms...
        </div>
      )}

      {!loading && (
        <div style={styles.calendarWrapper}>
          <div ref={containerRef} style={styles.calendarContainer}>
            <div style={styles.calendarHeader}>
              <div style={styles.roomsColumn}>
                <span>Rooms</span>
                <div style={styles.resizeHandle} onMouseDown={handleMouseDown}>
                  <DragIndicator style={{ fontSize: '14px', color: '#999' }} />
                </div>
              </div>
              {getCurrentMonthDays().map(day => {
                const { dayName } = getDateInfo(day);
                const isCurrent = isCurrentDate(day);
                return (
                  <div
                    key={day}
                    style={{
                      ...styles.dayColumn,
                      ...(isCurrent ? styles.currentDay : {})
                    }}
                  >
                    <div style={{ fontSize: '10px' }}>{dayName}</div>
                    <div style={{ fontSize: '11px' }}>{day}</div>
                  </div>
                );
              })}
            </div>

            {Object.entries(groupedRooms).map(([roomType, roomsOfType]) => (
              <div key={roomType}>
                <div style={styles.roomTypeRow}>
                  <div 
                    style={styles.roomTypeHeader}
                    onClick={() => toggleRoomType(roomType)}
                  >
                    <ExpandMore 
                      style={{ 
                        transform: expandedRoomTypes[roomType] ? 'rotate(0deg)' : 'rotate(-90deg)',
                        fontSize: '18px'
                      }} 
                    />
                    {roomType} ({roomsOfType.length})
                  </div>
                  {getCurrentMonthDays().map(day => (
                    <div key={day} style={styles.dayCell}></div>
                  ))}
                </div>

                {expandedRoomTypes[roomType] && roomsOfType.map(room => (
                  <div key={room.id} style={styles.roomRow}>
                    <div style={styles.roomCell}>
                      <div
                        style={{
                          ...styles.statusIndicator,
                          backgroundColor: getRoomStatusColor(room.status)
                        }}
                      ></div>
                      <div style={{ display: 'flex', flexDirection: 'column', gap: '2px', flex: 1, minWidth: 0 }}>
                        <div style={{ fontWeight: '500', fontSize: '13px', color: '#1a1a1a' }}>
                          Room {room.roomNumber}
                        </div>
                        <div style={{ fontSize: '11px', color: '#999', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                          {room.capacity} guests • ${room.pricePerNight}/nt • Floor {room.floor}
                        </div>
                        <div style={{ fontSize: '11px', color: '#b8b8b8' }}>
                          {room.status || 'Unknown'}
                        </div>
                      </div>
                    </div>
                    {getCurrentMonthDays().map(day => {
                      const isSelected = isDateSelected(room, day);
                      const isAvailable = room.status?.toLowerCase() === 'available';
                      
                      return (
                        <div 
                          key={day} 
                          style={{
                            ...styles.dayCell,
                            backgroundColor: isSelected 
                              ? '#e8e8e8'
                              : isAvailable 
                                ? (day % 7 === 0 || (day + 6) % 7 === 0 ? '#fafafa' : '#fff')
                                : '#f8f8f8',
                            cursor: isAvailable ? 'crosshair' : 'not-allowed',
                            border: isSelected ? '1px solid #1a1a1a' : '1px solid #f0f0f0',
                            boxSizing: 'border-box'
                          }}
                          onClick={() => handleCellClick(room, day)}
                          onMouseEnter={() => {
                            if (isAvailable) handleCellMouseEnter(room, day);
                          }}
                          onMouseDown={(e) => e.preventDefault()}
                        >
                          {!isAvailable && (
                            <div style={{
                              position: 'absolute',
                              top: '2px',
                              left: '2px',
                              right: '2px',
                              bottom: '2px',
                              borderRadius: '2px',
                              fontSize: '10px',
                              color: '#fff',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              fontWeight: '500',
                              backgroundColor: getRoomStatusColor(room.status)
                            }}>
                              {room.status?.toLowerCase() === 'occupied' && 'Booked'}
                              {room.status?.toLowerCase() === 'checkout' && 'C/O'}
                              {room.status?.toLowerCase() === 'checkin' && 'C/I'}
                              {room.status?.toLowerCase() === 'maintenance' && 'Maint'}
                              {room.status?.toLowerCase() === 'dirty' && 
                                <span style={{ color: '#fff' }}>Dirty</span>
                              }
                              {!room.status && <span style={{ color: '#666' }}>N/A</span>}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                ))}
              </div>
            ))}

            {Object.keys(groupedRooms).length === 0 && (
              <div style={{
                padding: '40px',
                textAlign: 'center',
                color: '#999',
                backgroundColor: '#fff',
                fontSize: '13px'
              }}>
                {rooms.length === 0 ? 'No rooms available. Please check your API connection.' : 'No rooms found matching your filters.'}
                {rooms.length === 0 && (
                  <button
                    onClick={fetchRooms}
                    style={{
                      marginTop: '16px',
                      padding: '8px 16px',
                      backgroundColor: '#1a1a1a',
                      color: '#fff',
                      border: 'none',
                      borderRadius: '4px',
                      cursor: 'pointer',
                      fontSize: '13px'
                    }}
                  >
                    Retry
                  </button>
                )}
              </div>
            )}
          </div>

          <div style={{
            backgroundColor: '#fafafa',
            padding: '16px',
            borderTop: '1px solid #f0f0f0'
          }}>
            <h3 style={{ margin: '0 0 12px 0', fontSize: '13px', fontWeight: '500', color: '#1a1a1a' }}>Room Status Legend</h3>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px' }}>
              {[
                { status: 'available', label: 'Available', color: '#1a1a1a' },
                { status: 'occupied', label: 'Occupied', color: '#666' },
                { status: 'checkout', label: 'Check Out', color: '#999' },
                { status: 'checkin', label: 'Check In', color: '#4a4a4a' },
                { status: 'maintenance', label: 'Maintenance', color: '#991b1b' },
                { status: 'dirty', label: 'Dirty', color: '#b45309' }
              ].map(({ status, label, color }) => (
                <div key={status} style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                  <div style={{
                    width: '8px',
                    height: '8px',
                    borderRadius: '50%',
                    backgroundColor: color
                  }}></div>
                  <span style={{ fontSize: '12px', color: '#666' }}>{label}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      <button 
        style={styles.todayButton} 
        onClick={goToToday}
      >
        <Today fontSize="small" />
        Today
      </button>

      <BookingModal
        isOpen={showBookingModal}
        onClose={() => {
          setShowBookingModal(false);
          handleClearSelection();
        }}
        selectedRoom={selectedRoom}
        selectedDates={selectedDates}
        isMultiDay={isMultiDay}
      />

      {error && (
        <div style={{
          position: 'fixed',
          bottom: '80px',
          left: '32px',
          backgroundColor: '#991b1b',
          color: '#fff',
          padding: '14px 18px',
          borderRadius: '4px',
          maxWidth: '400px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
          zIndex: 1001,
          display: 'flex',
          alignItems: 'center',
          gap: '12px',
          fontSize: '13px'
        }}>
          <div style={{ flex: 1 }}>{error}</div>
          <button
            onClick={() => setError(null)}
            style={{
              background: 'none',
              border: 'none',
              color: '#fff',
              cursor: 'pointer',
              fontSize: '16px',
              padding: '4px'
            }}
          >
            ×
          </button>
        </div>
      )}
    </div>
  );
};

export default ReceptionistDashboard;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Reporting.jsx =====  
===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Reservations.jsx =====  
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Camera, X, CheckCircle, AlertCircle } from 'lucide-react';
import { BrowserQRCodeReader } from '@zxing/browser';
import {
  getAllReservations,
  createReservation as createReservationAPI,
  checkInReservation,
  checkOutReservation,
  updateReservationStatus as updateReservationStatusAPI,
  getArrivals,
  getDepartures,
  getDailySummary,
  getRoomStatusForDate,
  searchReservations as searchReservationsAPI
} from '../api/reservation';
import { getAllRooms } from '../api/room';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';

// QR Scanner Modal Component
const QRScannerModal = ({ isOpen, onClose, onGuestScanned }) => {
  const [result, setResult] = useState('');
  const [guestData, setGuestData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [cameraError, setCameraError] = useState(null);
  const [scanning, setScanning] = useState(false);
  const videoRef = useRef(null);
  const codeReaderRef = useRef(null);
  const controlsRef = useRef(null);

  const fetchGuestData = async (guestId) => {
    try {
      setLoading(true);
      setError(null);
      setGuestData(null);

      const response = await fetch(`${API_BASE_URL}/api/v1/guests/${guestId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Guest not found (${response.status}): ${errorText}`);
      }

      const data = await response.json();
      setGuestData(data);
      stopCamera();
    } catch (err) {
      setError(err.message || 'Failed to fetch guest data');
    } finally {
      setLoading(false);
    }
  };

  const startCamera = async () => {
    try {
      setError(null);
      setCameraError(null);
      setGuestData(null);
      setResult('');
      setScanning(true);

      const codeReader = new BrowserQRCodeReader();
      codeReaderRef.current = codeReader;

      let lastScannedCode = '';
      let lastScanTime = 0;
      const SCAN_COOLDOWN = 2000;

      controlsRef.current = await codeReader.decodeFromVideoDevice(
        null,
        videoRef.current,
        (res, err) => {
          if (res) {
            const qrValue = res.getText();
            const currentTime = Date.now();
            
            if (qrValue === lastScannedCode && (currentTime - lastScanTime) < SCAN_COOLDOWN) {
              return;
            }
            
            setResult(qrValue);
            lastScannedCode = qrValue;
            lastScanTime = currentTime;
            
            setTimeout(() => {
              fetchGuestData(qrValue.trim());
            }, 500);
          }
          if (err && !(err.name === 'NotFoundException')) {
            console.error('QR scan error:', err);
          }
        }
      );
    } catch (err) {
      setCameraError('Unable to access camera. Please check permissions.');
      setScanning(false);
    }
  };

  const stopCamera = () => {
    if (controlsRef.current) {
      controlsRef.current.stop();
      controlsRef.current = null;
    }
    setScanning(false);
  };

  useEffect(() => {
    return () => stopCamera();
  }, []);

  useEffect(() => {
    if (!isOpen) {
      setTimeout(() => {
        stopCamera();
        setResult('');
        setGuestData(null);
        setError(null);
        setCameraError(null);
        setLoading(false);
      }, 200);
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50">
      <div className="bg-white border-2 border-black p-8 max-w-2xl w-11/12 max-h-screen overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-light tracking-tight">Scan Guest QR Code</h2>
          <button onClick={onClose} className="hover:opacity-70 transition-opacity">
            <X size={24} />
          </button>
        </div>

        {!guestData && (
          <div>
            <div className="border border-gray-200 p-6 text-center mb-6">
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                className="w-full max-w-md mx-auto border border-gray-200 bg-black"
              />
              
              {result && (
                <div className="mt-4 p-3 bg-black text-white flex items-center justify-center gap-2 text-sm">
                  <CheckCircle size={16} />
                  <span>QR Detected: {result}</span>
                </div>
              )}
              
              <div className="mt-4 flex gap-3 justify-center">
                {!scanning ? (
                  <button
                    onClick={startCamera}
                    className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors flex items-center gap-2"
                  >
                    <Camera size={18} /> Start Camera
                  </button>
                ) : (
                  <button
                    onClick={stopCamera}
                    className="px-6 py-3 bg-gray-600 text-white text-sm hover:bg-gray-700 transition-colors"
                  >
                    Stop Camera
                  </button>
                )}
              </div>
            </div>

            {cameraError && (
              <div className="p-4 border border-gray-300 mb-4 flex items-center gap-2 text-sm">
                <AlertCircle size={16} />
                <span>{cameraError}</span>
              </div>
            )}
            
            {error && (
              <div className="p-4 border border-gray-300 mb-4 flex items-center gap-2 text-sm">
                <AlertCircle size={16} />
                <span>{error}</span>
              </div>
            )}
            
            {loading && (
              <div className="text-center py-8 text-sm text-gray-500">
                Loading guest data...
              </div>
            )}
          </div>
        )}

        {guestData && (
          <div className="border border-gray-200 p-6">
            <h3 className="text-sm font-medium mb-6 pb-3 border-b border-gray-200">
              Guest Details Loaded
            </h3>
            
            <div className="flex gap-6 mb-6 justify-center flex-wrap">
              {guestData.imageUrl && (
                <div className="text-center">
                  <img
                    src={guestData.imageUrl}
                    alt="Guest"
                    className="w-24 h-24 object-cover border border-gray-200 grayscale"
                  />
                  <p className="mt-2 text-xs text-gray-500">Profile Photo</p>
                </div>
              )}

              {guestData.qrCodeBase64 && (
                <div className="text-center">
                  <img
                    src={guestData.qrCodeBase64}
                    alt="QR Code"
                    className="w-24 h-24 border border-gray-200"
                  />
                  <p className="mt-2 text-xs text-gray-500">QR Code</p>
                </div>
              )}
            </div>

            <div className="space-y-3 text-sm mb-6">
              <div className="p-3 border border-gray-200">
                <span className="font-medium">Guest ID:</span> {guestData.guestId}
              </div>
              <div className="p-3 border border-gray-200">
                <span className="font-medium">Name:</span> {guestData.fullName}
              </div>
              <div className="p-3 border border-gray-200">
                <span className="font-medium">Email:</span> {guestData.email}
              </div>
              <div className="p-3 border border-gray-200">
                <span className="font-medium">Phone:</span> {guestData.phone}
              </div>
              <div className="p-3 border border-gray-200">
                <span className="font-medium">Nationality:</span> {guestData.nationality}
              </div>
              <div className="p-3 border border-gray-200">
                <span className="font-medium">{guestData.identityType}:</span> {guestData.identityNumber}
              </div>
            </div>

            <button
              onClick={() => onGuestScanned(guestData)}
              className="w-full px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
            >
              Use This Guest
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

const Reservations = () => {
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('create');
  const [showScanner, setShowScanner] = useState(false);
  const [scannerTarget, setScannerTarget] = useState(null);

  const [reservationData, setReservationData] = useState({
    guestId: '',
    guestName: '',
    guestEmail: '',
    guestPhone: '',
    checkInDate: '',
    checkOutDate: '',
    roomType: '',
    roomId: '',
    adults: 1,
    kids: 0,
    mealPlan: 'Room Only',
    amenities: '',
    specialRequests: '',
    additionalNotes: '',
    status: 'PENDING'
  });

  const [searchData, setSearchData] = useState({
    searchBy: 'guestId',
    searchValue: ''
  });

  const [reservations, setReservations] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [availableRoomsByType, setAvailableRoomsByType] = useState({});
  const [roomTypes, setRoomTypes] = useState([]);
  const [todayArrivals, setTodayArrivals] = useState([]);
  const [todayDepartures, setTodayDepartures] = useState([]);
  const [dailySummary, setDailySummary] = useState(null);
  const [roomStatusLoading, setRoomStatusLoading] = useState(false);

  useEffect(() => {
    if (activeTab === 'manage') {
      fetchAllReservations();
    } else if (activeTab === 'checkin') {
      loadCheckInData();
    }
  }, [activeTab]);

  const fetchAvailableRoomsByType = useCallback(async (checkInDate, checkOutDate) => {
    if (!checkInDate || !checkOutDate) {
      setAvailableRoomsByType({});
      setRoomTypes([]);
      return;
    }

    try {
      setRoomStatusLoading(true);
      
      const allRooms = await getAllRooms();
      const unavailableRoomIds = new Set();
      
      const start = new Date(checkInDate);
      const end = new Date(checkOutDate);
      const daysBetween = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
      
      for (let i = 0; i < daysBetween; i++) {
        const currentDate = new Date(start);
        currentDate.setDate(start.getDate() + i);
        const dateStr = currentDate.toISOString().split('T')[0];
        
        try {
          const dailyStatus = await getRoomStatusForDate(dateStr);
          dailyStatus.forEach(roomStatus => {
            if (roomStatus.status === 'OCCUPIED' || 
                roomStatus.status === 'RESERVED' || 
                roomStatus.status === 'ARRIVING') {
              unavailableRoomIds.add(roomStatus.roomId);
            }
          });
        } catch (error) {
          console.warn(`Could not check status for ${dateStr}:`, error);
        }
      }
      
      const trulyAvailableRooms = allRooms.filter(room => {
        const roomId = room.id;
        return !unavailableRoomIds.has(roomId);
      });
      
      const roomsByType = {};
      const uniqueTypes = new Set();
      
      trulyAvailableRooms.forEach(room => {
        const roomType = room.type || 'Standard';
        uniqueTypes.add(roomType);
        
        if (!roomsByType[roomType]) {
          roomsByType[roomType] = [];
        }
        roomsByType[roomType].push(room);
      });
      
      setAvailableRoomsByType(roomsByType);
      setRoomTypes(Array.from(uniqueTypes).sort());
      
    } catch (error) {
      console.error('Error fetching available rooms:', error);
      alert(`Failed to check room availability: ${error.message}`);
      setAvailableRoomsByType({});
      setRoomTypes([]);
    } finally {
      setRoomStatusLoading(false);
    }
  }, []);

  useEffect(() => {
    if (reservationData.roomType && availableRoomsByType[reservationData.roomType]) {
      const roomsOfType = availableRoomsByType[reservationData.roomType];
      if (roomsOfType.length > 0) {
        const firstRoom = roomsOfType[0];
        setReservationData(prev => ({ 
          ...prev, 
          roomId: firstRoom.id.toString() 
        }));
      }
    }
  }, [reservationData.roomType, availableRoomsByType]);

  useEffect(() => {
    if (reservationData.checkInDate && reservationData.checkOutDate) {
      fetchAvailableRoomsByType(reservationData.checkInDate, reservationData.checkOutDate);
    } else {
      setAvailableRoomsByType({});
      setRoomTypes([]);
    }
  }, [reservationData.checkInDate, reservationData.checkOutDate, fetchAvailableRoomsByType]);

  const loadCheckInData = async () => {
    try {
      setLoading(true);
      const today = new Date().toISOString().split('T')[0];
      
      const [arrivals, departures, summary] = await Promise.all([
        getArrivals(today),
        getDepartures(today),
        getDailySummary(today)
      ]);
      
      setTodayArrivals(arrivals);
      setTodayDepartures(departures);
      setDailySummary(summary);
    } catch (error) {
      console.error('Error loading check-in data:', error);
    } finally {
      setLoading(false);
    }
  };

  const createReservation = async (data) => {
    if (!data.guestId || !data.checkInDate || !data.checkOutDate || !data.roomType || !data.roomId) {
      alert('Please fill in all required fields: Guest, Check-in, Check-out, and Room Type');
      return;
    }

    const checkIn = new Date(data.checkInDate);
    const checkOut = new Date(data.checkOutDate);

    if (checkOut <= checkIn) {
      alert('Check-out date must be after check-in date');
      return;
    }

    // Build reservation payload according to backend ReservationRequestDTO
    const reservationPayload = {
      guestId: data.guestId,
      roomIds: [parseInt(data.roomId)],
      checkInDate: data.checkInDate,
      checkOutDate: data.checkOutDate,
      status: data.status,
      adults: data.adults,
      kids: data.kids,
      mealPlan: data.mealPlan,
      amenities: data.amenities,
      specialRequests: data.specialRequests,
      additionalNotes: data.additionalNotes
    };

    try {
      setLoading(true);
      
      // Verify guest exists
      const guestResponse = await fetch(`${API_BASE_URL}/api/v1/guests/${data.guestId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
      });
      
      if (!guestResponse.ok) {
        throw new Error(`Guest not found. Please scan a valid guest QR code.`);
      }

      // Verify room availability
      const selectedRoomId = parseInt(reservationPayload.roomIds[0]);
      const roomsOfType = availableRoomsByType[data.roomType] || [];
      const roomExists = roomsOfType.find(room => room.id === selectedRoomId);
      
      if (!roomExists) {
        throw new Error(`Room validation failed: Room is not available for the selected dates.`);
      }

      const newReservation = await createReservationAPI(reservationPayload);
      
      alert(`Reservation created successfully!\n\nReservation ID: ${newReservation.reservationId}\nGuest: ${data.guestName}\nRoom Type: ${data.roomType}\nRoom Number: ${roomExists.roomNumber}`);
      
      // Reset form
      setReservationData({
        guestId: '',
        guestName: '',
        guestEmail: '',
        guestPhone: '',
        checkInDate: '',
        checkOutDate: '',
        roomType: '',
        roomId: '',
        adults: 1,
        kids: 0,
        mealPlan: 'Room Only',
        amenities: '',
        specialRequests: '',
        additionalNotes: '',
        status: 'PENDING'
      });
      setAvailableRoomsByType({});
      setRoomTypes([]);
      
    } catch (error) {
      console.error('Create reservation error:', error);
      alert(error.message || 'Failed to create reservation');
    } finally {
      setLoading(false);
    }
  };

  const fetchAllReservations = async () => {
    try {
      setLoading(true);
      const data = await getAllReservations();
      setReservations(data);
    } catch (error) {
      console.error('Error fetching reservations:', error);
      alert('Failed to fetch reservations');
    } finally {
      setLoading(false);
    }
  };

  const searchReservations = async () => {
    if (!searchData.searchValue.trim()) {
      alert('Please enter a search value');
      return;
    }

    try {
      setLoading(true);
      
      const criteria = {
        [searchData.searchBy]: searchData.searchValue
      };
      
      const results = await searchReservationsAPI(criteria);
      setSearchResults(results);
      
      if (results.length === 0) {
        alert('No reservations found');
      }
    } catch (error) {
      console.error('Search error:', error);
      alert('Search failed');
    } finally {
      setLoading(false);
    }
  };

  const handleCheckIn = async (reservationId) => {
    if (!window.confirm('Confirm check-in for this reservation?')) return;
    
    try {
      setLoading(true);
      await checkInReservation(reservationId);
      alert('Guest checked in successfully!');
      loadCheckInData();
    } catch (error) {
      console.error('Check-in error:', error);
      alert(`${error.message || 'Failed to check in'}`);
    } finally {
      setLoading(false);
    }
  };

  const handleCheckOut = async (reservationId) => {
    if (!window.confirm('Confirm check-out for this reservation?')) return;
    
    try {
      setLoading(true);
      await checkOutReservation(reservationId);
      alert('Guest checked out successfully!');
      loadCheckInData();
    } catch (error) {
      console.error('Check-out error:', error);
      alert(`${error.message || 'Failed to check out'}`);
    } finally {
      setLoading(false);
    }
  };

  const updateReservationStatus = async (reservationId, newStatus) => {
    try {
      setLoading(true);
      await updateReservationStatusAPI(reservationId, newStatus);
      alert('Status updated successfully');
      fetchAllReservations();
    } catch (error) {
      console.error('Update error:', error);
      alert(`${error.message || 'Failed to update status'}`);
    } finally {
      setLoading(false);
    }
  };

  const handleGuestScanned = async (guestData) => {
    const guestId = guestData.guestId || guestData.id;
    
    if (scannerTarget === 'create') {
      const newGuestData = {
        guestId: guestId,
        guestName: guestData.fullName || guestData.name,
        guestEmail: guestData.email,
        guestPhone: guestData.phone
      };
      
      setReservationData(prevData => ({
        ...prevData,
        ...newGuestData
      }));
      
      setTimeout(() => {
        setShowScanner(false);
        setScannerTarget(null);
        alert(`Guest loaded: ${newGuestData.guestName}`);
      }, 100);
      
    } else if (scannerTarget === 'checkin') {
      const reservation = todayArrivals.find(r => r.guestId === guestId);
      
      setShowScanner(false);
      setScannerTarget(null);
      
      if (reservation) {
        await handleCheckIn(reservation.reservationId);
      } else {
        alert('No arrival found for this guest today');
      }
    }
  };

  const openScanner = (target) => {
    setScannerTarget(target);
    setShowScanner(true);
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        
        <QRScannerModal 
          isOpen={showScanner}
          onClose={() => {
            setShowScanner(false);
            setScannerTarget(null);
          }}
          onGuestScanned={handleGuestScanned}
        />

        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Reservations
          </h1>
          <p className="text-sm text-gray-500">
            Manage bookings and check-ins
          </p>
        </div>

        {/* Tabs */}
        <div className="flex mb-12 gap-0 flex-wrap">
          {[
            { key: 'create', label: 'Create' },
            { key: 'search', label: 'Search' },
            { key: 'manage', label: 'Manage' },
            { key: 'checkin', label: 'Front Desk' }
          ].map(tab => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`px-6 py-3 text-sm border border-gray-200 transition-colors ${
                activeTab === tab.key 
                  ? 'bg-black text-white' 
                  : 'bg-white text-black hover:border-black'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Create Tab */}
        {activeTab === 'create' && (
          <div>
            <h2 className="text-3xl font-light tracking-tight mb-8">
              Create New Reservation
            </h2>
            
            <div className="mb-8 p-6 border border-gray-200">
              <div className="flex justify-between items-start gap-4 flex-wrap">
                <div className="flex-1 min-w-64">
                  <div className="text-xs text-gray-500 mb-3">Guest Information</div>
                  {reservationData.guestId ? (
                    <div className="text-sm space-y-2">
                      <div className="p-3 border border-gray-200">
                        <span className="font-medium">ID:</span> {reservationData.guestId}
                      </div>
                      <div className="p-3 border border-gray-200">
                        <span className="font-medium">Name:</span> {reservationData.guestName}
                      </div>
                      <div className="p-3 border border-gray-200">
                        <span className="font-medium">Email:</span> {reservationData.guestEmail}
                      </div>
                      <div className="p-3 border border-gray-200">
                        <span className="font-medium">Phone:</span> {reservationData.guestPhone}
                      </div>
                    </div>
                  ) : (
                    <div className="text-sm text-gray-500 p-4 border border-dashed border-gray-300">
                      No guest selected - Scan QR code to load guest
                    </div>
                  )}
                </div>
                <button
                  onClick={() => openScanner('create')}
                  className={`px-6 py-3 text-sm flex items-center gap-2 transition-colors ${
                    reservationData.guestId 
                      ? 'bg-gray-600 text-white hover:bg-gray-700' 
                      : 'bg-black text-white hover:bg-gray-900'
                  }`}
                >
                  <Camera size={18} /> {reservationData.guestId ? 'Re-scan' : 'Scan Guest QR'}
                </button>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6 mb-6">
              <div>
                <label className="block text-xs text-gray-500 mb-2">
                  Check-in Date *
                </label>
                <input
                  type="date"
                  value={reservationData.checkInDate}
                  onChange={(e) => setReservationData({...reservationData, checkInDate: e.target.value, roomType: '', roomId: ''})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                  min={new Date().toISOString().split('T')[0]}
                />
              </div>
              
              <div>
                <label className="block text-xs text-gray-500 mb-2">
                  Check-out Date *
                </label>
                <input
                  type="date"
                  value={reservationData.checkOutDate}
                  onChange={(e) => setReservationData({...reservationData, checkOutDate: e.target.value, roomType: '', roomId: ''})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                  min={reservationData.checkInDate || new Date().toISOString().split('T')[0]}
                />
              </div>

              <div className="col-span-2">
                <label className="block text-xs text-gray-500 mb-2">
                  Room Type * 
                  {roomStatusLoading && ' (Checking availability...)'}
                  {!roomStatusLoading && roomTypes.length > 0 && ` (${roomTypes.length} types available)`}
                </label>
                <select
                  value={reservationData.roomType}
                  onChange={(e) => setReservationData({...reservationData, roomType: e.target.value, roomId: ''})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
                  disabled={roomStatusLoading || roomTypes.length === 0}
                >
                  <option value="">
                    {roomStatusLoading 
                      ? 'Checking room availability...'
                      : roomTypes.length === 0 
                        ? (reservationData.checkInDate && reservationData.checkOutDate 
                            ? 'No rooms available for selected dates' 
                            : 'Select dates first to see available room types')
                        : 'Select a room type'}
                  </option>
                  {roomTypes.map(type => {
                    const roomsOfType = availableRoomsByType[type] || [];
                    const count = roomsOfType.length;
                    const sampleRoom = roomsOfType[0];
                    const price = sampleRoom?.pricePerNight || 0;
                    
                    return (
                      <option key={type} value={type}>
                        {type} - {count} available - ${price}/night
                      </option>
                    );
                  })}
                </select>
                {reservationData.roomType && availableRoomsByType[reservationData.roomType] && (
                  <div className="text-xs text-black mt-2 p-3 border border-gray-200">
                    System will automatically assign: Room {availableRoomsByType[reservationData.roomType][0]?.roomNumber}
                  </div>
                )}
              </div>

              <div>
                <label className="block text-xs text-gray-500 mb-2">Meal Plan</label>
                <select
                  value={reservationData.mealPlan}
                  onChange={(e) => setReservationData({...reservationData, mealPlan: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
                >
                  <option value="Room Only">Room Only</option>
                  <option value="Bed & Breakfast">Bed & Breakfast</option>
                  <option value="Half Board">Half Board</option>
                  <option value="Full Board">Full Board</option>
                  <option value="All Inclusive">All Inclusive</option>
                </select>
              </div>
              
              <div>
                <label className="block text-xs text-gray-500 mb-2">Adults</label>
                <input
                  type="number"
                  min="1"
                  max="10"
                  value={reservationData.adults}
                  onChange={(e) => setReservationData({...reservationData, adults: parseInt(e.target.value)})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                />
              </div>

              <div>
                <label className="block text-xs text-gray-500 mb-2">Kids</label>
                <input
                  type="number"
                  min="0"
                  max="10"
                  value={reservationData.kids}
                  onChange={(e) => setReservationData({...reservationData, kids: parseInt(e.target.value)})}
                  className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                />
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-xs text-gray-500 mb-2">Amenities</label>
              <input
                type="text"
                value={reservationData.amenities}
                onChange={(e) => setReservationData({...reservationData, amenities: e.target.value})}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="e.g., Wifi, Breakfast, Airport Pickup"
              />
            </div>

            <div className="mb-6">
              <label className="block text-xs text-gray-500 mb-2">Special Requests</label>
              <textarea
                value={reservationData.specialRequests}
                onChange={(e) => setReservationData({...reservationData, specialRequests: e.target.value})}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors resize-vertical"
                rows="3"
                placeholder="Any special requirements..."
              />
            </div>

            <div className="mb-8">
              <label className="block text-xs text-gray-500 mb-2">Additional Notes (Internal)</label>
              <textarea
                value={reservationData.additionalNotes}
                onChange={(e) => setReservationData({...reservationData, additionalNotes: e.target.value})}
                className="w-full px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors resize-vertical"
                rows="2"
                placeholder="Internal notes..."
              />
            </div>
            
            <button
              onClick={() => createReservation(reservationData)}
              disabled={loading || !reservationData.guestId || !reservationData.checkInDate || !reservationData.checkOutDate || !reservationData.roomType}
              className={`w-full px-6 py-4 text-sm transition-colors ${
                loading || !reservationData.guestId || !reservationData.roomType
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-black text-white hover:bg-gray-900'
              }`}
            >
              {loading ? 'Creating...' : 'Create Reservation'}
            </button>
          </div>
        )}

        {/* Search Tab */}
        {activeTab === 'search' && (
          <div>
            <h2 className="text-3xl font-light tracking-tight mb-8">
              Search Reservations
            </h2>
            
            <div className="grid grid-cols-3 gap-4 mb-8">
              <select
                value={searchData.searchBy}
                onChange={(e) => setSearchData({...searchData, searchBy: e.target.value})}
                className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
              >
                <option value="guestId">Guest ID</option>
                <option value="status">Status</option>
                <option value="checkInDate">Check-in Date</option>
                <option value="checkOutDate">Check-out Date</option>
              </select>
              
              <input
                type={searchData.searchBy.includes('Date') ? 'date' : 'text'}
                value={searchData.searchValue}
                onChange={(e) => setSearchData({...searchData, searchValue: e.target.value})}
                onKeyPress={(e) => e.key === 'Enter' && searchReservations()}
                className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors"
                placeholder="Enter search value..."
              />
              
              <button
                onClick={searchReservations}
                disabled={loading}
                className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
              >
                {loading ? 'Searching...' : 'Search'}
              </button>
            </div>

            {searchResults.length > 0 && (
              <div>
                <h3 className="text-sm font-medium mb-4">
                  Results ({searchResults.length})
                </h3>
                {searchResults.map(reservation => (
                  <div key={reservation.reservationId} className="border border-gray-200 p-6 mb-4">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <div className="font-medium text-lg">RES-{reservation.reservationId}</div>
                        <div className="text-sm text-gray-500 mt-1">
                          Guest ID: {reservation.guestId}
                        </div>
                      </div>
                      <div className="text-sm font-medium">
                        {reservation.status}
                      </div>
                    </div>
                    
                    <div className="text-sm grid grid-cols-2 gap-3">
                      <div>Check-in: {reservation.checkInDate}</div>
                      <div>Check-out: {reservation.checkOutDate}</div>
                      <div>Room IDs: {Array.from(reservation.roomIds || []).join(', ')}</div>
                      <div>Created: {new Date(reservation.createdAt).toLocaleDateString()}</div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Manage Tab */}
        {activeTab === 'manage' && (
          <div>
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-3xl font-light tracking-tight">
                All Reservations ({reservations.length})
              </h2>
              <button
                onClick={fetchAllReservations}
                className="px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
              >
                Refresh
              </button>
            </div>
            
            {loading ? (
              <div className="text-center py-24 text-sm text-gray-400">
                Loading reservations...
              </div>
            ) : reservations.length === 0 ? (
              <div className="text-center py-24 text-sm text-gray-400">
                No reservations found
              </div>
            ) : (
              reservations.map(reservation => (
                <div key={reservation.reservationId} className="border border-gray-200 p-6 mb-4">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-light">RES-{reservation.reservationId}</h3>
                      <div className="text-sm text-gray-500 mt-1">
                        Guest ID: {reservation.guestId}
                      </div>
                    </div>
                    <div className="text-sm font-medium">
                      {reservation.status}
                    </div>
                  </div>
                  
                  <div className="text-sm grid grid-cols-2 gap-3 mb-4">
                    <div>Check-in: {reservation.checkInDate}</div>
                    <div>Check-out: {reservation.checkOutDate}</div>
                    <div>Room IDs: {Array.from(reservation.roomIds || []).join(', ')}</div>
                    <div>Created: {new Date(reservation.createdAt).toLocaleDateString()}</div>
                  </div>
                  
                  <select
                    value={reservation.status}
                    onChange={(e) => updateReservationStatus(reservation.reservationId, e.target.value)}
                    className="px-4 py-2 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
                  >
                    <option value="PENDING">Pending</option>
                    <option value="CONFIRMED">Confirmed</option>
                    <option value="CHECKED_IN">Checked In</option>
                    <option value="OCCUPIED">Occupied</option>
                    <option value="CHECKED_OUT">Checked Out</option>
                    <option value="CANCELLED">Cancelled</option>
                  </select>
                </div>
              ))
            )}
          </div>
        )}

        {/* Front Desk Tab */}
        {activeTab === 'checkin' && (
          <div>
            <h2 className="text-3xl font-light tracking-tight mb-8">
              Front Desk Operations
            </h2>
            
            {dailySummary && (
              <div className="mb-12 p-6 border border-gray-200">
                <h3 className="text-sm font-medium mb-6">Today's Summary</h3>
                <div className="grid grid-cols-4 gap-6">
                  <div className="p-6 border border-gray-200 text-center">
                    <div className="text-3xl font-light mb-2">{dailySummary.occupancyRate}%</div>
                    <div className="text-xs text-gray-500">Occupancy</div>
                  </div>
                  <div className="p-6 border border-gray-200 text-center">
                    <div className="text-3xl font-light mb-2">{dailySummary.expectedArrivals}</div>
                    <div className="text-xs text-gray-500">Arrivals</div>
                  </div>
                  <div className="p-6 border border-gray-200 text-center">
                    <div className="text-3xl font-light mb-2">{dailySummary.expectedDepartures}</div>
                    <div className="text-xs text-gray-500">Departures</div>
                  </div>
                  <div className="p-6 border border-gray-200 text-center">
                    <div className="text-3xl font-light mb-2">{dailySummary.availableRooms}</div>
                    <div className="text-xs text-gray-500">Available</div>
                  </div>
                </div>
              </div>
            )}
            
            <div className="text-center py-16 border border-gray-200 mb-12">
              <div className="mb-6 flex justify-center">
                <Camera size={48} className="text-gray-400" />
              </div>
              <h3 className="text-xl font-light mb-4">
                Scan Guest QR Code
              </h3>
              <p className="text-sm text-gray-500 mb-8">
                Quick check-in for arriving guests
              </p>
              <button
                onClick={() => openScanner('checkin')}
                className="px-8 py-4 bg-black text-white text-sm hover:bg-gray-900 transition-colors inline-flex items-center gap-3"
              >
                <Camera size={20} />
                Scan for Check-in
              </button>
            </div>

            <div className="mb-12">
              <h3 className="text-sm font-medium mb-4">
                Today's Arrivals ({todayArrivals.length})
              </h3>
              {todayArrivals.length === 0 ? (
                <div className="text-center py-16 border border-dashed border-gray-300 text-sm text-gray-400">
                  No arrivals scheduled for today
                </div>
              ) : (
                todayArrivals.map(reservation => (
                  <div key={reservation.reservationId} className="border border-gray-200 p-6 mb-4">
                    <div className="flex justify-between items-center gap-4 flex-wrap">
                      <div className="flex-1 min-w-48">
                        <div className="font-medium">RES-{reservation.reservationId}</div>
                        <div className="text-sm mt-2">
                          Guest: {reservation.guestId}
                        </div>
                        <div className="text-sm">
                          Room IDs: {Array.from(reservation.roomIds || []).join(', ')}
                        </div>
                        <div className="text-xs text-gray-500 mt-2">
                          Stay: {reservation.checkInDate} to {reservation.checkOutDate}
                        </div>
                      </div>
                      <button
                        onClick={() => handleCheckIn(reservation.reservationId)}
                        disabled={loading}
                        className="px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
                      >
                        Check In
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>

            <div>
              <h3 className="text-sm font-medium mb-4">
                Today's Departures ({todayDepartures.length})
              </h3>
              {todayDepartures.length === 0 ? (
                <div className="text-center py-16 border border-dashed border-gray-300 text-sm text-gray-400">
                  No departures scheduled for today
                </div>
              ) : (
                todayDepartures.map(reservation => (
                  <div key={reservation.reservationId} className="border border-gray-200 p-6 mb-4">
                    <div className="flex justify-between items-center gap-4 flex-wrap">
                      <div className="flex-1 min-w-48">
                        <div className="font-medium">RES-{reservation.reservationId}</div>
                        <div className="text-sm mt-2">
                          Guest: {reservation.guestId}
                        </div>
                        <div className="text-sm">
                          Room IDs: {Array.from(reservation.roomIds || []).join(', ')}
                        </div>
                        <div className="text-xs text-gray-500 mt-2">
                          Checked in: {reservation.checkInDate}
                        </div>
                      </div>
                      <button
                        onClick={() => handleCheckOut(reservation.reservationId)}
                        disabled={loading}
                        className="px-6 py-3 bg-gray-600 text-white text-sm hover:bg-gray-700 transition-colors"
                      >
                        Check Out
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default Reservations;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\RoomView.jsx =====  
import React, { useEffect, useState } from "react";
import {
  getAllRooms,
  getRoomById,
  deleteRoom,
  getAvailableRooms,
  getRoomsByType,
} from "../api/room";

const RoomView = () => {
  const [rooms, setRooms] = useState([]);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [filter, setFilter] = useState("all");
  const [typeFilter, setTypeFilter] = useState("all");

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  const handleTypeFilterChange = (event) => {
    setTypeFilter(event.target.value);
  };

  const fetchRoomDetails = async (roomId) => {
    try {
      const data = await getRoomById(roomId);
      setSelectedRoom(data);
      setDrawerOpen(true);
    } catch (error) {
      console.error("Error fetching room details:", error);
    }
  };

  const fetchRooms = async () => {
    try {
      let data = [];
      if (filter === "available") {
        data = await getAvailableRooms();
      } else if (typeFilter !== "all") {
        data = await getRoomsByType(typeFilter);
      } else {
        data = await getAllRooms();
      }

      if (filter === "available" && typeFilter !== "all") {
        data = data.filter(
          (room) => room.type.toLowerCase() === typeFilter.toLowerCase()
        );
      }

      setRooms(data);
    } catch (error) {
      console.error("Error fetching rooms:", error);
    }
  };

  const handleDeleteRoom = async (roomId) => {
    if (window.confirm("Are you sure you want to delete this room?")) {
      try {
        await deleteRoom(roomId);
        fetchRooms();
      } catch (error) {
        console.error("Error deleting room:", error);
      }
    }
  };

  useEffect(() => {
    fetchRooms();
  }, [filter, typeFilter]);

  const getStatusColor = (status) => {
    const normalizedStatus = status?.toLowerCase() || 'unknown';
    switch (normalizedStatus) {
      case "available":
        return "border-black";
      case "occupied":
        return "border-gray-900";
      case "reserved":
        return "border-gray-600";
      case "maintenance":
        return "border-gray-400";
      default:
        return "border-gray-300";
    }
  };

  const getStatusBadge = (status) => {
    const normalizedStatus = status?.toLowerCase() || 'unknown';
    switch (normalizedStatus) {
      case "available":
        return "bg-black text-white";
      case "occupied":
        return "bg-gray-900 text-white";
      case "reserved":
        return "bg-gray-600 text-white";
      case "maintenance":
        return "bg-gray-400 text-black";
      default:
        return "border border-gray-300 text-black";
    }
  };

  const needsPriorityAttention = (room) => {
    const status = room.availabilityStatus?.toLowerCase() || 'unknown';
    return status === "reserved" || status === "maintenance";
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="mb-16">
          <h1 className="text-5xl font-light tracking-tight text-black mb-3">
            Rooms
          </h1>
          <p className="text-gray-500 text-sm">
            Manage room availability and details
          </p>
        </div>

        {/* Filters */}
        <div className="flex gap-4 mb-12">
          <select
            value={filter}
            onChange={handleFilterChange}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Rooms</option>
            <option value="available">Available Only</option>
          </select>

          <select
            value={typeFilter}
            onChange={handleTypeFilterChange}
            className="px-4 py-3 border border-gray-200 text-sm focus:outline-none focus:border-black transition-colors bg-white"
          >
            <option value="all">All Types</option>
            <option value="Standard">Standard</option>
            <option value="Deluxe">Deluxe</option>
            <option value="Suite">Suite</option>
          </select>
        </div>

        {/* Room Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {rooms.map((room) => (
            <div
              key={room.id}
              className={`border-2 ${getStatusColor(room.availabilityStatus)} hover:border-black transition-colors`}
            >
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-2xl font-light tracking-tight mb-1">
                      Room {room.roomNumber}
                      {needsPriorityAttention(room) && (
                        <span className="ml-2 text-gray-600">⚠</span>
                      )}
                    </h3>
                    <p className="text-sm text-gray-500">Floor {room.floorNumber}</p>
                  </div>
                  <span className={`px-3 py-1 text-xs ${getStatusBadge(room.availabilityStatus)}`}>
                    {room.availabilityStatus || 'Unknown'}
                  </span>
                </div>

                <div className="space-y-2 mb-6 pb-6 border-b border-gray-100">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500">Type</span>
                    <span className="text-black">{room.type}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500">Capacity</span>
                    <span className="text-black">{room.capacity}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500">Price/Night</span>
                    <span className="text-black">${room.pricePerNight}</span>
                  </div>
                </div>

                <div className="flex gap-3">
                  <button
                    onClick={() => fetchRoomDetails(room.id)}
                    className="flex-1 px-4 py-2 bg-black text-white text-xs hover:bg-gray-900 transition-colors"
                  >
                    View Details
                  </button>
                  <button
                    onClick={() => handleDeleteRoom(room.id)}
                    className="px-4 py-2 border border-gray-200 text-black text-xs hover:border-black transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {rooms.length === 0 && (
          <div className="py-24 text-center">
            <p className="text-gray-400 text-sm">No rooms found</p>
          </div>
        )}
      </div>

      {/* Drawer */}
      {drawerOpen && (
        <>
          <div
            className="fixed inset-0 bg-black bg-opacity-20 z-40"
            onClick={() => setDrawerOpen(false)}
          />
          <div className="fixed right-0 top-0 h-full w-96 bg-white border-l border-gray-200 z-50 overflow-y-auto">
            <div className="p-8">
              {selectedRoom ? (
                <>
                  <div className="mb-8">
                    <h2 className="text-3xl font-light tracking-tight mb-2">
                      Room {selectedRoom.roomNumber}
                      {needsPriorityAttention(selectedRoom) && (
                        <span className="ml-2 text-gray-600">⚠</span>
                      )}
                    </h2>
                    <span className={`inline-block px-3 py-1 text-xs ${getStatusBadge(selectedRoom.availabilityStatus)}`}>
                      {selectedRoom.availabilityStatus || 'Unknown'}
                    </span>
                  </div>

                  <div className="space-y-4 mb-8">
                    <div className="pb-4 border-b border-gray-100">
                      <div className="text-xs text-gray-500 mb-1">Floor</div>
                      <div className="text-black">{selectedRoom.floorNumber}</div>
                    </div>
                    <div className="pb-4 border-b border-gray-100">
                      <div className="text-xs text-gray-500 mb-1">Type</div>
                      <div className="text-black">{selectedRoom.type}</div>
                    </div>
                    <div className="pb-4 border-b border-gray-100">
                      <div className="text-xs text-gray-500 mb-1">Capacity</div>
                      <div className="text-black">{selectedRoom.capacity}</div>
                    </div>
                    <div className="pb-4 border-b border-gray-100">
                      <div className="text-xs text-gray-500 mb-1">Price per Night</div>
                      <div className="text-black">${selectedRoom.pricePerNight}</div>
                    </div>
                    {selectedRoom.description && (
                      <div className="pb-4 border-b border-gray-100">
                        <div className="text-xs text-gray-500 mb-1">Description</div>
                        <div className="text-black text-sm">{selectedRoom.description}</div>
                      </div>
                    )}
                  </div>

                  {needsPriorityAttention(selectedRoom) && (
                    <div className="mb-8 p-4 border border-gray-300">
                      <div className="text-sm font-medium text-black mb-1">
                        ⚠ Priority Attention Required
                      </div>
                      <div className="text-xs text-gray-500">
                        This room requires immediate attention
                      </div>
                    </div>
                  )}

                  <button
                    onClick={() => setDrawerOpen(false)}
                    className="w-full px-6 py-3 bg-black text-white text-sm hover:bg-gray-900 transition-colors"
                  >
                    Close
                  </button>
                </>
              ) : (
                <p className="text-gray-400">Loading...</p>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default RoomView;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Security.jsx =====  
import React, { useState } from 'react';

const Security = ({ securityLogs = [] }) => {
  const [activeTab, setActiveTab] = useState('access');

  const secureCount = securityLogs.filter(log => log.status === 'success').length;
  const alertCount = securityLogs.filter(log => log.status === 'blocked').length;
  const activeKeyCards = 15; // This could be passed as a prop

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-8 py-12">
        {/* Header */}
        <div className="mb-16 border-b border-black pb-6">
          <h1 className="text-5xl font-light tracking-tight text-black mb-2">
            Security
          </h1>
          <p className="text-sm text-gray-500">
            Monitor access control and security systems
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">System Status</div>
            <div className="text-3xl font-light">Secure</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Active Key Cards</div>
            <div className="text-3xl font-light">{activeKeyCards}</div>
          </div>
          
          <div className="border border-gray-200 p-6 hover:border-black transition-colors">
            <div className="text-xs text-gray-500 mb-2 uppercase tracking-wider">Security Alerts</div>
            <div className="text-3xl font-light">{alertCount}</div>
          </div>
        </div>

        {/* Security Logs */}
        <div className="border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-2xl font-light tracking-tight">Security Logs</h2>
          </div>
          
          <div className="p-6">
            {securityLogs.length === 0 ? (
              <div className="py-24 text-center">
                <p className="text-gray-400 text-sm">No security logs found</p>
              </div>
            ) : (
              <div className="space-y-4">
                {securityLogs.map((log) => (
                  <div 
                    key={log.id} 
                    className="border border-gray-200 hover:border-black transition-colors"
                  >
                    <div className="p-6">
                      <div className="flex justify-between items-start mb-4">
                        <div className="flex-1">
                          <h4 className="text-lg font-light tracking-tight mb-2">
                            {log.action}
                          </h4>
                          <div className="text-sm text-gray-600 space-y-1">
                            <div>User: {log.user}</div>
                            <div>Location: {log.location}</div>
                            <div className="text-xs text-gray-400">{log.timestamp}</div>
                          </div>
                        </div>
                        <span className={`px-3 py-1 text-xs ${
                          log.status === 'success' 
                            ? 'bg-black text-white' 
                            : 'bg-gray-900 text-white'
                        }`}>
                          {log.status}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Demo with sample data
const mockSecurityLogs = [
  {
    id: 'SEC001',
    type: 'access',
    user: 'John Smith',
    action: 'Room Entry',
    location: 'Room 101',
    timestamp: '2024-01-15 14:30:00',
    status: 'success'
  },
  {
    id: 'SEC002',
    type: 'alert',
    user: 'System',
    action: 'Unauthorized Access Attempt',
    location: 'Staff Area',
    timestamp: '2024-01-15 15:45:00',
    status: 'blocked'
  },
  {
    id: 'SEC003',
    type: 'access',
    user: 'Emily Johnson',
    action: 'Room Entry',
    location: 'Room 205',
    timestamp: '2024-01-15 16:15:00',
    status: 'success'
  },
  {
    id: 'SEC004',
    type: 'access',
    user: 'Michael Brown',
    action: 'Staff Area Access',
    location: 'Back Office',
    timestamp: '2024-01-15 17:00:00',
    status: 'success'
  }
];

export default () => <Security securityLogs={mockSecurityLogs} />;===== File: D:\Projects\StayOps\StayOps\admin-ui\stayops-reception\src\pages\Settings.jsx =====  
import React, { useState } from 'react';
import {
  Settings as SettingsIcon,
  AccountCircle,
  Notifications,
  Security,
  Language,
  Palette,
  Save
} from '@mui/icons-material';

const Settings = () => {
  const [settings, setSettings] = useState({
    notifications: {
      email: true,
      push: false,
      sms: true
    },
    appearance: {
      theme: 'light',
      language: 'en'
    },
    security: {
      twoFactor: false,
      sessionTimeout: 30
    }
  });

  const handleSave = () => {
    console.log('Saving settings:', settings);
    alert('Settings saved successfully!');
  };

  return (
    <div style={{ padding: '32px', backgroundColor: '#fafafa', minHeight: '100vh' }}>
      <div style={{ marginBottom: '32px' }}>
        <h1 style={{ fontSize: '20px', fontWeight: '500', color: '#1a1a1a', margin: '0 0 6px 0' }}>
          Application Settings
        </h1>
        <p style={{ fontSize: '13px', color: '#999', margin: 0 }}>
          Configure system preferences and user settings
        </p>
      </div>

      <div style={{ display: 'grid', gap: '20px', maxWidth: '800px' }}>
        {/* Profile Settings */}
        <div style={{ backgroundColor: 'white', padding: '24px', borderRadius: '6px', border: '1px solid #e8e8e8' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
            <AccountCircle style={{ fontSize: '20px', color: '#1a1a1a', marginRight: '8px' }} />
            <h3 style={{ margin: 0, fontSize: '15px', fontWeight: '500', color: '#1a1a1a' }}>Profile Settings</h3>
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                Full Name
              </label>
              <input
                type="text"
                defaultValue="John Doe"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #e0e0e0',
                  borderRadius: '4px',
                  fontSize: '13px',
                  outline: 'none',
                  boxSizing: 'border-box'
                }}
                onFocus={(e) => e.target.style.borderColor = '#1a1a1a'}
                onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                Email
              </label>
              <input
                type="email"
                defaultValue="john.doe@hotel.com"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #e0e0e0',
                  borderRadius: '4px',
                  fontSize: '13px',
                  outline: 'none',
                  boxSizing: 'border-box'
                }}
                onFocus={(e) => e.target.style.borderColor = '#1a1a1a'}
                onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
              />
            </div>
          </div>
        </div>

        {/* Notification Settings */}
        <div style={{ backgroundColor: 'white', padding: '24px', borderRadius: '6px', border: '1px solid #e8e8e8' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
            <Notifications style={{ fontSize: '20px', color: '#1a1a1a', marginRight: '8px' }} />
            <h3 style={{ margin: 0, fontSize: '15px', fontWeight: '500', color: '#1a1a1a' }}>Notification Preferences</h3>
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '14px' }}>
            {Object.entries(settings.notifications).map(([key, value]) => (
              <label 
                key={key} 
                style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  fontSize: '13px', 
                  color: '#4a4a4a',
                  cursor: 'pointer',
                  padding: '8px 12px',
                  borderRadius: '4px',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#fafafa'}
                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
              >
                <input
                  type="checkbox"
                  checked={value}
                  onChange={(e) => setSettings({
                    ...settings,
                    notifications: { ...settings.notifications, [key]: e.target.checked }
                  })}
                  style={{ 
                    marginRight: '10px',
                    cursor: 'pointer',
                    width: '16px',
                    height: '16px'
                  }}
                />
                {key.charAt(0).toUpperCase() + key.slice(1)} Notifications
              </label>
            ))}
          </div>
        </div>

        {/* Appearance Settings */}
        <div style={{ backgroundColor: 'white', padding: '24px', borderRadius: '6px', border: '1px solid #e8e8e8' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
            <Palette style={{ fontSize: '20px', color: '#1a1a1a', marginRight: '8px' }} />
            <h3 style={{ margin: 0, fontSize: '15px', fontWeight: '500', color: '#1a1a1a' }}>Appearance</h3>
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                Theme
              </label>
              <select
                value={settings.appearance.theme}
                onChange={(e) => setSettings({
                  ...settings,
                  appearance: { ...settings.appearance, theme: e.target.value }
                })}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #e0e0e0',
                  borderRadius: '4px',
                  fontSize: '13px',
                  backgroundColor: 'white',
                  outline: 'none',
                  cursor: 'pointer',
                  boxSizing: 'border-box',
                  color: '#1a1a1a'
                }}
                onFocus={(e) => e.target.style.borderColor = '#1a1a1a'}
                onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
              >
                <option value="light">Light</option>
                <option value="dark">Dark</option>
                <option value="auto">Auto</option>
              </select>
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                Language
              </label>
              <select
                value={settings.appearance.language}
                onChange={(e) => setSettings({
                  ...settings,
                  appearance: { ...settings.appearance, language: e.target.value }
                })}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #e0e0e0',
                  borderRadius: '4px',
                  fontSize: '13px',
                  backgroundColor: 'white',
                  outline: 'none',
                  cursor: 'pointer',
                  boxSizing: 'border-box',
                  color: '#1a1a1a'
                }}
                onFocus={(e) => e.target.style.borderColor = '#1a1a1a'}
                onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
              >
                <option value="en">English</option>
                <option value="es">Spanish</option>
                <option value="fr">French</option>
              </select>
            </div>
          </div>
        </div>

        {/* Security Settings */}
        <div style={{ backgroundColor: 'white', padding: '24px', borderRadius: '6px', border: '1px solid #e8e8e8' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
            <Security style={{ fontSize: '20px', color: '#1a1a1a', marginRight: '8px' }} />
            <h3 style={{ margin: 0, fontSize: '15px', fontWeight: '500', color: '#1a1a1a' }}>Security</h3>
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
            <label 
              style={{ 
                display: 'flex', 
                alignItems: 'center', 
                fontSize: '13px', 
                color: '#4a4a4a',
                cursor: 'pointer',
                padding: '8px 12px',
                borderRadius: '4px',
                transition: 'background-color 0.2s'
              }}
              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#fafafa'}
              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
            >
              <input
                type="checkbox"
                checked={settings.security.twoFactor}
                onChange={(e) => setSettings({
                  ...settings,
                  security: { ...settings.security, twoFactor: e.target.checked }
                })}
                style={{ 
                  marginRight: '10px',
                  cursor: 'pointer',
                  width: '16px',
                  height: '16px'
                }}
              />
              Enable Two-Factor Authentication
            </label>
            <div>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '13px', fontWeight: '500', color: '#4a4a4a' }}>
                Session Timeout (minutes)
              </label>
              <input
                type="number"
                value={settings.security.sessionTimeout}
                onChange={(e) => setSettings({
                  ...settings,
                  security: { ...settings.security, sessionTimeout: parseInt(e.target.value) }
                })}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #e0e0e0',
                  borderRadius: '4px',
                  fontSize: '13px',
                  outline: 'none',
                  boxSizing: 'border-box',
                  color: '#1a1a1a'
                }}
                onFocus={(e) => e.target.style.borderColor = '#1a1a1a'}
                onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
              />
            </div>
          </div>
        </div>

        {/* Save Button */}
        <button
          onClick={handleSave}
          style={{
            backgroundColor: '#1a1a1a',
            color: 'white',
            border: 'none',
            padding: '12px 24px',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '14px',
            fontWeight: '500',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            justifyContent: 'center',
            maxWidth: '200px',
            transition: 'background-color 0.2s'
          }}
          onMouseEnter={(e) => e.target.style.backgroundColor = '#000'}
          onMouseLeave={(e) => e.target.style.backgroundColor = '#1a1a1a'}
        >
          <Save style={{ fontSize: '16px' }} />
          Save Settings
        </button>
      </div>
    </div>
  );
};

export default Settings;